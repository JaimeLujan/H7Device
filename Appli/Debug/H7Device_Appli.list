
H7Device_Appli.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002b0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed4  080002b0  080002b0  000012b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08007184  08007184  00008184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071d4  080071d4  00009100  2**0
                  CONTENTS
  4 .ARM          00000000  080071d4  080071d4  00009100  2**0
                  CONTENTS
  5 .preinit_array 00000000  080071d4  080071d4  00009100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071d4  080071d4  000081d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080071d8  080071d8  000081d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  24000000  080071dc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c04  24000100  080072dc  00009100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000000  20000000  0000a000  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010efe  00000000  00000000  0000912e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cef  00000000  00000000  0001a02c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  0001cd20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b95  00000000  00000000  0001dcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031ecc  00000000  00000000  0001e84d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012cce  00000000  00000000  00050719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012facd  00000000  00000000  000633e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00192eb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f64  00000000  00000000  00192ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  00196e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000100 	.word	0x24000100
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800716c 	.word	0x0800716c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000104 	.word	0x24000104
 80002ec:	0800716c 	.word	0x0800716c

080002f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Update SystemCoreClock variable according to RCC registers values. */
  SystemCoreClockUpdate();
 80002f4:	f000 f866 	bl	80003c4 <SystemCoreClockUpdate>

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f8:	f000 f9c5 	bl	8000686 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_USB_DEVICE_Init();
 80002fc:	f006 fa1c 	bl	8006738 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 8000300:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000304:	f000 fa34 	bl	8000770 <HAL_Delay>
 8000308:	e7fa      	b.n	8000300 <main+0x10>

0800030a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800030a:	b480      	push	{r7}
 800030c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800030e:	b672      	cpsid	i
}
 8000310:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000312:	bf00      	nop
 8000314:	e7fd      	b.n	8000312 <Error_Handler+0x8>

08000316 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000316:	b480      	push	{r7}
 8000318:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800031a:	bf00      	nop
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr

08000324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000328:	bf00      	nop
 800032a:	e7fd      	b.n	8000328 <NMI_Handler+0x4>

0800032c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000330:	bf00      	nop
 8000332:	e7fd      	b.n	8000330 <HardFault_Handler+0x4>

08000334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000338:	bf00      	nop
 800033a:	e7fd      	b.n	8000338 <MemManage_Handler+0x4>

0800033c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000340:	bf00      	nop
 8000342:	e7fd      	b.n	8000340 <BusFault_Handler+0x4>

08000344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000348:	bf00      	nop
 800034a:	e7fd      	b.n	8000348 <UsageFault_Handler+0x4>

0800034c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr

0800035a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800035e:	bf00      	nop
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr

08000368 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr

08000376 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000376:	b580      	push	{r7, lr}
 8000378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800037a:	f000 f9d9 	bl	8000730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
	...

08000384 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB OTG HS interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000388:	4802      	ldr	r0, [pc, #8]	@ (8000394 <OTG_HS_IRQHandler+0x10>)
 800038a:	f000 fc92 	bl	8000cb2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	24001600 	.word	0x24001600

08000398 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = INTVECT_START;
 800039c:	4b07      	ldr	r3, [pc, #28]	@ (80003bc <SystemInit+0x24>)
 800039e:	4a08      	ldr	r2, [pc, #32]	@ (80003c0 <SystemInit+0x28>)
 80003a0:	609a      	str	r2, [r3, #8]

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80003a2:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <SystemInit+0x24>)
 80003a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003a8:	4a04      	ldr	r2, [pc, #16]	@ (80003bc <SystemInit+0x24>)
 80003aa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003ae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80003b2:	bf00      	nop
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	e000ed00 	.word	0xe000ed00
 80003c0:	08000000 	.word	0x08000000

080003c4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b089      	sub	sp, #36	@ 0x24
 80003c8:	af00      	add	r7, sp, #0
  uint32_t sysclk, hsivalue, pllsource, pllm, pllp, core_presc;
  float_t pllfracn, pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80003ca:	4b92      	ldr	r3, [pc, #584]	@ (8000614 <SystemCoreClockUpdate+0x250>)
 80003cc:	691b      	ldr	r3, [r3, #16]
 80003ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80003d2:	2b18      	cmp	r3, #24
 80003d4:	f200 80fb 	bhi.w	80005ce <SystemCoreClockUpdate+0x20a>
 80003d8:	a201      	add	r2, pc, #4	@ (adr r2, 80003e0 <SystemCoreClockUpdate+0x1c>)
 80003da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003de:	bf00      	nop
 80003e0:	08000445 	.word	0x08000445
 80003e4:	080005cf 	.word	0x080005cf
 80003e8:	080005cf 	.word	0x080005cf
 80003ec:	080005cf 	.word	0x080005cf
 80003f0:	080005cf 	.word	0x080005cf
 80003f4:	080005cf 	.word	0x080005cf
 80003f8:	080005cf 	.word	0x080005cf
 80003fc:	080005cf 	.word	0x080005cf
 8000400:	08000459 	.word	0x08000459
 8000404:	080005cf 	.word	0x080005cf
 8000408:	080005cf 	.word	0x080005cf
 800040c:	080005cf 	.word	0x080005cf
 8000410:	080005cf 	.word	0x080005cf
 8000414:	080005cf 	.word	0x080005cf
 8000418:	080005cf 	.word	0x080005cf
 800041c:	080005cf 	.word	0x080005cf
 8000420:	0800045f 	.word	0x0800045f
 8000424:	080005cf 	.word	0x080005cf
 8000428:	080005cf 	.word	0x080005cf
 800042c:	080005cf 	.word	0x080005cf
 8000430:	080005cf 	.word	0x080005cf
 8000434:	080005cf 	.word	0x080005cf
 8000438:	080005cf 	.word	0x080005cf
 800043c:	080005cf 	.word	0x080005cf
 8000440:	08000465 	.word	0x08000465
  {
  case 0x00:  /* HSI used as system clock source (default after reset) */
    sysclk = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos));
 8000444:	4b73      	ldr	r3, [pc, #460]	@ (8000614 <SystemCoreClockUpdate+0x250>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	08db      	lsrs	r3, r3, #3
 800044a:	f003 0303 	and.w	r3, r3, #3
 800044e:	4a72      	ldr	r2, [pc, #456]	@ (8000618 <SystemCoreClockUpdate+0x254>)
 8000450:	fa22 f303 	lsr.w	r3, r2, r3
 8000454:	61fb      	str	r3, [r7, #28]
    break;
 8000456:	e0c4      	b.n	80005e2 <SystemCoreClockUpdate+0x21e>

  case 0x08:  /* CSI used as system clock source */
    sysclk = CSI_VALUE;
 8000458:	4b70      	ldr	r3, [pc, #448]	@ (800061c <SystemCoreClockUpdate+0x258>)
 800045a:	61fb      	str	r3, [r7, #28]
    break;
 800045c:	e0c1      	b.n	80005e2 <SystemCoreClockUpdate+0x21e>

  case 0x10:  /* HSE used as system clock source */
    sysclk = HSE_VALUE;
 800045e:	4b70      	ldr	r3, [pc, #448]	@ (8000620 <SystemCoreClockUpdate+0x25c>)
 8000460:	61fb      	str	r3, [r7, #28]
    break;
 8000462:	e0be      	b.n	80005e2 <SystemCoreClockUpdate+0x21e>

  case 0x18:  /* PLL1 used as system clock  source */
    /* PLL1_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL1_VCO / PLL1R
       */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000464:	4b6b      	ldr	r3, [pc, #428]	@ (8000614 <SystemCoreClockUpdate+0x250>)
 8000466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000468:	f003 0303 	and.w	r3, r3, #3
 800046c:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos)  ;
 800046e:	4b69      	ldr	r3, [pc, #420]	@ (8000614 <SystemCoreClockUpdate+0x250>)
 8000470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000472:	091b      	lsrs	r3, r3, #4
 8000474:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000478:	60fb      	str	r3, [r7, #12]
    if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) != 0U)
 800047a:	4b66      	ldr	r3, [pc, #408]	@ (8000614 <SystemCoreClockUpdate+0x250>)
 800047c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	2b00      	cmp	r3, #0
 8000484:	d00b      	beq.n	800049e <SystemCoreClockUpdate+0xda>
    {
      pllfracn = (float_t)(uint32_t)(((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN)>> RCC_PLL1FRACR_FRACN_Pos));
 8000486:	4b63      	ldr	r3, [pc, #396]	@ (8000614 <SystemCoreClockUpdate+0x250>)
 8000488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800048a:	08db      	lsrs	r3, r3, #3
 800048c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8000490:	ee07 3a90 	vmov	s15, r3
 8000494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000498:	edc7 7a06 	vstr	s15, [r7, #24]
 800049c:	e002      	b.n	80004a4 <SystemCoreClockUpdate+0xe0>
    }
    else
    {
      pllfracn = (float_t)0U;
 800049e:	f04f 0300 	mov.w	r3, #0
 80004a2:	61bb      	str	r3, [r7, #24]
    }

    if (pllm != 0U)
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	f000 808e 	beq.w	80005c8 <SystemCoreClockUpdate+0x204>
 80004ac:	693b      	ldr	r3, [r7, #16]
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d024      	beq.n	80004fc <SystemCoreClockUpdate+0x138>
 80004b2:	693b      	ldr	r3, [r7, #16]
 80004b4:	2b02      	cmp	r3, #2
 80004b6:	d143      	bne.n	8000540 <SystemCoreClockUpdate+0x17c>
    {
      switch (pllsource)
      {
      case 0x02:  /* HSE used as PLL1 clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (pllfracn/(float_t)0x2000) +(float_t)1 );
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	ee07 3a90 	vmov	s15, r3
 80004be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80004c2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8000624 <SystemCoreClockUpdate+0x260>
 80004c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80004ca:	4b52      	ldr	r3, [pc, #328]	@ (8000614 <SystemCoreClockUpdate+0x250>)
 80004cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80004d2:	ee07 3a90 	vmov	s15, r3
 80004d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80004da:	ed97 6a06 	vldr	s12, [r7, #24]
 80004de:	eddf 5a52 	vldr	s11, [pc, #328]	@ 8000628 <SystemCoreClockUpdate+0x264>
 80004e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80004e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80004ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80004ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80004f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80004f6:	edc7 7a05 	vstr	s15, [r7, #20]
        break;
 80004fa:	e04f      	b.n	800059c <SystemCoreClockUpdate+0x1d8>

      case 0x01:  /* CSI used as PLL1 clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (pllfracn/(float_t)0x2000) +(float_t)1 );
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	ee07 3a90 	vmov	s15, r3
 8000502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000506:	eddf 6a49 	vldr	s13, [pc, #292]	@ 800062c <SystemCoreClockUpdate+0x268>
 800050a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800050e:	4b41      	ldr	r3, [pc, #260]	@ (8000614 <SystemCoreClockUpdate+0x250>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000516:	ee07 3a90 	vmov	s15, r3
 800051a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800051e:	ed97 6a06 	vldr	s12, [r7, #24]
 8000522:	eddf 5a41 	vldr	s11, [pc, #260]	@ 8000628 <SystemCoreClockUpdate+0x264>
 8000526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800052a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800052e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800053a:	edc7 7a05 	vstr	s15, [r7, #20]
        break;
 800053e:	e02d      	b.n	800059c <SystemCoreClockUpdate+0x1d8>

      case 0x00:  /* HSI used as PLL1 clock source */
      default:
        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos));
 8000540:	4b34      	ldr	r3, [pc, #208]	@ (8000614 <SystemCoreClockUpdate+0x250>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	08db      	lsrs	r3, r3, #3
 8000546:	f003 0303 	and.w	r3, r3, #3
 800054a:	4a33      	ldr	r2, [pc, #204]	@ (8000618 <SystemCoreClockUpdate+0x254>)
 800054c:	fa22 f303 	lsr.w	r3, r2, r3
 8000550:	60bb      	str	r3, [r7, #8]
        pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (pllfracn/(float_t)0x2000) +(float_t)1 );
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	ee07 3a90 	vmov	s15, r3
 8000558:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	ee07 3a90 	vmov	s15, r3
 8000562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800056a:	4b2a      	ldr	r3, [pc, #168]	@ (8000614 <SystemCoreClockUpdate+0x250>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000572:	ee07 3a90 	vmov	s15, r3
 8000576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800057a:	ed97 6a06 	vldr	s12, [r7, #24]
 800057e:	eddf 5a2a 	vldr	s11, [pc, #168]	@ 8000628 <SystemCoreClockUpdate+0x264>
 8000582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800058a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800058e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000596:	edc7 7a05 	vstr	s15, [r7, #20]
        break;
 800059a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVP) >> RCC_PLL1DIVR1_DIVP_Pos) + 1U ) ;
 800059c:	4b1d      	ldr	r3, [pc, #116]	@ (8000614 <SystemCoreClockUpdate+0x250>)
 800059e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a0:	0a5b      	lsrs	r3, r3, #9
 80005a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80005a6:	3301      	adds	r3, #1
 80005a8:	607b      	str	r3, [r7, #4]
      sysclk =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	ee07 3a90 	vmov	s15, r3
 80005b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80005b4:	edd7 6a05 	vldr	s13, [r7, #20]
 80005b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005c0:	ee17 3a90 	vmov	r3, s15
 80005c4:	61fb      	str	r3, [r7, #28]
    }
    else
    {
      sysclk = 0U;
    }
    break;
 80005c6:	e00c      	b.n	80005e2 <SystemCoreClockUpdate+0x21e>
      sysclk = 0U;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]
    break;
 80005cc:	e009      	b.n	80005e2 <SystemCoreClockUpdate+0x21e>

  default:  /* Unexpected, default to HSI used as system clock source (default after reset) */
    sysclk = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos));
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <SystemCoreClockUpdate+0x250>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	08db      	lsrs	r3, r3, #3
 80005d4:	f003 0303 	and.w	r3, r3, #3
 80005d8:	4a0f      	ldr	r2, [pc, #60]	@ (8000618 <SystemCoreClockUpdate+0x254>)
 80005da:	fa22 f303 	lsr.w	r3, r2, r3
 80005de:	61fb      	str	r3, [r7, #28]
    break;
 80005e0:	bf00      	nop
  }

  /* system clock frequency : CM7 CPU frequency  */
  core_presc = (RCC->CDCFGR & RCC_CDCFGR_CPRE);
 80005e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <SystemCoreClockUpdate+0x250>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	f003 030f 	and.w	r3, r3, #15
 80005ea:	603b      	str	r3, [r7, #0]
  if (core_presc >= 8U)
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2b07      	cmp	r3, #7
 80005f0:	d907      	bls.n	8000602 <SystemCoreClockUpdate+0x23e>
  {
    SystemCoreClock = (sysclk >> (core_presc - RCC_CDCFGR_CPRE_3 + 1U));
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	3b07      	subs	r3, #7
 80005f6:	69fa      	ldr	r2, [r7, #28]
 80005f8:	fa22 f303 	lsr.w	r3, r2, r3
 80005fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000630 <SystemCoreClockUpdate+0x26c>)
 80005fe:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock = sysclk;
  }
}
 8000600:	e002      	b.n	8000608 <SystemCoreClockUpdate+0x244>
    SystemCoreClock = sysclk;
 8000602:	4a0b      	ldr	r2, [pc, #44]	@ (8000630 <SystemCoreClockUpdate+0x26c>)
 8000604:	69fb      	ldr	r3, [r7, #28]
 8000606:	6013      	str	r3, [r2, #0]
}
 8000608:	bf00      	nop
 800060a:	3724      	adds	r7, #36	@ 0x24
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	58024400 	.word	0x58024400
 8000618:	03d09000 	.word	0x03d09000
 800061c:	003d0900 	.word	0x003d0900
 8000620:	016e3600 	.word	0x016e3600
 8000624:	4bb71b00 	.word	0x4bb71b00
 8000628:	46000000 	.word	0x46000000
 800062c:	4a742400 	.word	0x4a742400
 8000630:	24000000 	.word	0x24000000

08000634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000634:	480d      	ldr	r0, [pc, #52]	@ (800066c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000636:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000638:	f7ff feae 	bl	8000398 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800063c:	480c      	ldr	r0, [pc, #48]	@ (8000670 <LoopForever+0x6>)
  ldr r1, =_edata
 800063e:	490d      	ldr	r1, [pc, #52]	@ (8000674 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000640:	4a0d      	ldr	r2, [pc, #52]	@ (8000678 <LoopForever+0xe>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000644:	e002      	b.n	800064c <LoopCopyDataInit>

08000646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064a:	3304      	adds	r3, #4

0800064c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800064c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000650:	d3f9      	bcc.n	8000646 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000652:	4a0a      	ldr	r2, [pc, #40]	@ (800067c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000654:	4c0a      	ldr	r4, [pc, #40]	@ (8000680 <LoopForever+0x16>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000658:	e001      	b.n	800065e <LoopFillZerobss>

0800065a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800065c:	3204      	adds	r2, #4

0800065e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000660:	d3fb      	bcc.n	800065a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000662:	f006 fd5f 	bl	8007124 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000666:	f7ff fe43 	bl	80002f0 <main>

0800066a <LoopForever>:

LoopForever:
  b LoopForever
 800066a:	e7fe      	b.n	800066a <LoopForever>
  ldr   r0, =_estack
 800066c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000670:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000674:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 8000678:	080071dc 	.word	0x080071dc
  ldr r2, =_sbss
 800067c:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8000680:	24001d04 	.word	0x24001d04

08000684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000684:	e7fe      	b.n	8000684 <ADC1_2_IRQHandler>

08000686 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	b082      	sub	sp, #8
 800068a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800068c:	2300      	movs	r3, #0
 800068e:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000690:	2003      	movs	r0, #3
 8000692:	f000 f981 	bl	8000998 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000696:	200f      	movs	r0, #15
 8000698:	f000 f80e 	bl	80006b8 <HAL_InitTick>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d002      	beq.n	80006a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006a2:	2301      	movs	r3, #1
 80006a4:	71fb      	strb	r3, [r7, #7]
 80006a6:	e001      	b.n	80006ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006a8:	f7ff fe35 	bl	8000316 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006ac:	79fb      	ldrb	r3, [r7, #7]
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006c0:	2300      	movs	r3, #0
 80006c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006c4:	4b17      	ldr	r3, [pc, #92]	@ (8000724 <HAL_InitTick+0x6c>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d023      	beq.n	8000714 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006cc:	4b16      	ldr	r3, [pc, #88]	@ (8000728 <HAL_InitTick+0x70>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <HAL_InitTick+0x6c>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	4619      	mov	r1, r3
 80006d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006da:	fbb3 f3f1 	udiv	r3, r3, r1
 80006de:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 f98b 	bl	80009fe <HAL_SYSTICK_Config>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d10f      	bne.n	800070e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2b0f      	cmp	r3, #15
 80006f2:	d809      	bhi.n	8000708 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f4:	2200      	movs	r2, #0
 80006f6:	6879      	ldr	r1, [r7, #4]
 80006f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80006fc:	f000 f957 	bl	80009ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000700:	4a0a      	ldr	r2, [pc, #40]	@ (800072c <HAL_InitTick+0x74>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6013      	str	r3, [r2, #0]
 8000706:	e007      	b.n	8000718 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000708:	2301      	movs	r3, #1
 800070a:	73fb      	strb	r3, [r7, #15]
 800070c:	e004      	b.n	8000718 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800070e:	2301      	movs	r3, #1
 8000710:	73fb      	strb	r3, [r7, #15]
 8000712:	e001      	b.n	8000718 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000714:	2301      	movs	r3, #1
 8000716:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000718:	7bfb      	ldrb	r3, [r7, #15]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	24000008 	.word	0x24000008
 8000728:	24000000 	.word	0x24000000
 800072c:	24000004 	.word	0x24000004

08000730 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000734:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <HAL_IncTick+0x20>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <HAL_IncTick+0x24>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4413      	add	r3, r2
 8000740:	4a04      	ldr	r2, [pc, #16]	@ (8000754 <HAL_IncTick+0x24>)
 8000742:	6013      	str	r3, [r2, #0]
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	24000008 	.word	0x24000008
 8000754:	2400011c 	.word	0x2400011c

08000758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  return uwTick;
 800075c:	4b03      	ldr	r3, [pc, #12]	@ (800076c <HAL_GetTick+0x14>)
 800075e:	681b      	ldr	r3, [r3, #0]
}
 8000760:	4618      	mov	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	2400011c 	.word	0x2400011c

08000770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000778:	f7ff ffee 	bl	8000758 <HAL_GetTick>
 800077c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	60fb      	str	r3, [r7, #12]

  /* Add a period to ensure minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000788:	d005      	beq.n	8000796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800078a:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <HAL_Delay+0x44>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	461a      	mov	r2, r3
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	4413      	add	r3, r2
 8000794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000796:	bf00      	nop
 8000798:	f7ff ffde 	bl	8000758 <HAL_GetTick>
 800079c:	4602      	mov	r2, r0
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	68fa      	ldr	r2, [r7, #12]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d8f7      	bhi.n	8000798 <HAL_Delay+0x28>
  {
  }
}
 80007a8:	bf00      	nop
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	24000008 	.word	0x24000008

080007b8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80007bc:	4b05      	ldr	r3, [pc, #20]	@ (80007d4 <HAL_SuspendTick+0x1c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a04      	ldr	r2, [pc, #16]	@ (80007d4 <HAL_SuspendTick+0x1c>)
 80007c2:	f023 0302 	bic.w	r3, r3, #2
 80007c6:	6013      	str	r3, [r2, #0]
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000e010 	.word	0xe000e010

080007d8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80007dc:	4b05      	ldr	r3, [pc, #20]	@ (80007f4 <HAL_ResumeTick+0x1c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a04      	ldr	r2, [pc, #16]	@ (80007f4 <HAL_ResumeTick+0x1c>)
 80007e2:	f043 0302 	orr.w	r3, r3, #2
 80007e6:	6013      	str	r3, [r2, #0]
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000e010 	.word	0xe000e010

080007f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f003 0307 	and.w	r3, r3, #7
 8000806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000808:	4b0b      	ldr	r3, [pc, #44]	@ (8000838 <__NVIC_SetPriorityGrouping+0x40>)
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800080e:	68ba      	ldr	r2, [r7, #8]
 8000810:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000814:	4013      	ands	r3, r2
 8000816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <__NVIC_SetPriorityGrouping+0x44>)
 8000822:	4313      	orrs	r3, r2
 8000824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000826:	4a04      	ldr	r2, [pc, #16]	@ (8000838 <__NVIC_SetPriorityGrouping+0x40>)
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	60d3      	str	r3, [r2, #12]
}
 800082c:	bf00      	nop
 800082e:	3714      	adds	r7, #20
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	e000ed00 	.word	0xe000ed00
 800083c:	05fa0000 	.word	0x05fa0000

08000840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000844:	4b04      	ldr	r3, [pc, #16]	@ (8000858 <__NVIC_GetPriorityGrouping+0x18>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	0a1b      	lsrs	r3, r3, #8
 800084a:	f003 0307 	and.w	r3, r3, #7
}
 800084e:	4618      	mov	r0, r3
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800086a:	2b00      	cmp	r3, #0
 800086c:	db0b      	blt.n	8000886 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800086e:	88fb      	ldrh	r3, [r7, #6]
 8000870:	f003 021f 	and.w	r2, r3, #31
 8000874:	4907      	ldr	r1, [pc, #28]	@ (8000894 <__NVIC_EnableIRQ+0x38>)
 8000876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800087a:	095b      	lsrs	r3, r3, #5
 800087c:	2001      	movs	r0, #1
 800087e:	fa00 f202 	lsl.w	r2, r0, r2
 8000882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000e100 	.word	0xe000e100

08000898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80008a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	db0a      	blt.n	80008c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	490c      	ldr	r1, [pc, #48]	@ (80008e4 <__NVIC_SetPriority+0x4c>)
 80008b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008b6:	0112      	lsls	r2, r2, #4
 80008b8:	b2d2      	uxtb	r2, r2
 80008ba:	440b      	add	r3, r1
 80008bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c0:	e00a      	b.n	80008d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4908      	ldr	r1, [pc, #32]	@ (80008e8 <__NVIC_SetPriority+0x50>)
 80008c8:	88fb      	ldrh	r3, [r7, #6]
 80008ca:	f003 030f 	and.w	r3, r3, #15
 80008ce:	3b04      	subs	r3, #4
 80008d0:	0112      	lsls	r2, r2, #4
 80008d2:	b2d2      	uxtb	r2, r2
 80008d4:	440b      	add	r3, r1
 80008d6:	761a      	strb	r2, [r3, #24]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	e000e100 	.word	0xe000e100
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b089      	sub	sp, #36	@ 0x24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	f1c3 0307 	rsb	r3, r3, #7
 8000906:	2b04      	cmp	r3, #4
 8000908:	bf28      	it	cs
 800090a:	2304      	movcs	r3, #4
 800090c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3304      	adds	r3, #4
 8000912:	2b06      	cmp	r3, #6
 8000914:	d902      	bls.n	800091c <NVIC_EncodePriority+0x30>
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3b03      	subs	r3, #3
 800091a:	e000      	b.n	800091e <NVIC_EncodePriority+0x32>
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43da      	mvns	r2, r3
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	401a      	ands	r2, r3
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000934:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	fa01 f303 	lsl.w	r3, r1, r3
 800093e:	43d9      	mvns	r1, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	4313      	orrs	r3, r2
         );
}
 8000946:	4618      	mov	r0, r3
 8000948:	3724      	adds	r7, #36	@ 0x24
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
	...

08000954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3b01      	subs	r3, #1
 8000960:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000964:	d301      	bcc.n	800096a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000966:	2301      	movs	r3, #1
 8000968:	e00f      	b.n	800098a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800096a:	4a0a      	ldr	r2, [pc, #40]	@ (8000994 <SysTick_Config+0x40>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3b01      	subs	r3, #1
 8000970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000972:	210f      	movs	r1, #15
 8000974:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000978:	f7ff ff8e 	bl	8000898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800097c:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <SysTick_Config+0x40>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000982:	4b04      	ldr	r3, [pc, #16]	@ (8000994 <SysTick_Config+0x40>)
 8000984:	2207      	movs	r2, #7
 8000986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	e000e010 	.word	0xe000e010

08000998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ff29 	bl	80007f8 <__NVIC_SetPriorityGrouping>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b086      	sub	sp, #24
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	4603      	mov	r3, r0
 80009b6:	60b9      	str	r1, [r7, #8]
 80009b8:	607a      	str	r2, [r7, #4]
 80009ba:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
 80009bc:	f7ff ff40 	bl	8000840 <__NVIC_GetPriorityGrouping>
 80009c0:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	68b9      	ldr	r1, [r7, #8]
 80009c6:	6978      	ldr	r0, [r7, #20]
 80009c8:	f7ff ff90 	bl	80008ec <NVIC_EncodePriority>
 80009cc:	4602      	mov	r2, r0
 80009ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009d2:	4611      	mov	r1, r2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ff5f 	bl	8000898 <__NVIC_SetPriority>
}
 80009da:	bf00      	nop
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32h7rsxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	4603      	mov	r3, r0
 80009ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff33 	bl	800085c <__NVIC_EnableIRQ>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f7ff ffa4 	bl	8000954 <SysTick_Config>
 8000a0c:	4603      	mov	r3, r0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af02      	add	r7, sp, #8
 8000a1e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d101      	bne.n	8000a2a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e108      	b.n	8000c3c <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d106      	bne.n	8000a4a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f006 f839 	bl	8006abc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2203      	movs	r2, #3
 8000a4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	4a7b      	ldr	r2, [pc, #492]	@ (8000c44 <HAL_PCD_Init+0x22c>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d102      	bne.n	8000a60 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f002 fc3c 	bl	80032e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6818      	ldr	r0, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	7c1a      	ldrb	r2, [r3, #16]
 8000a72:	f88d 2000 	strb.w	r2, [sp]
 8000a76:	3304      	adds	r3, #4
 8000a78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a7a:	f002 fb2d 	bl	80030d8 <USB_CoreInit>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d005      	beq.n	8000a90 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2202      	movs	r2, #2
 8000a88:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	e0d5      	b.n	8000c3c <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f002 fc34 	bl	8003304 <USB_SetCurrentMode>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d005      	beq.n	8000aae <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e0c6      	b.n	8000c3c <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000aae:	2300      	movs	r3, #0
 8000ab0:	73fb      	strb	r3, [r7, #15]
 8000ab2:	e04a      	b.n	8000b4a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ab4:	7bfa      	ldrb	r2, [r7, #15]
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	00db      	lsls	r3, r3, #3
 8000abc:	4413      	add	r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	3315      	adds	r3, #21
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ac8:	7bfa      	ldrb	r2, [r7, #15]
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	4613      	mov	r3, r2
 8000ace:	00db      	lsls	r3, r3, #3
 8000ad0:	4413      	add	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	440b      	add	r3, r1
 8000ad6:	3314      	adds	r3, #20
 8000ad8:	7bfa      	ldrb	r2, [r7, #15]
 8000ada:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000adc:	7bfa      	ldrb	r2, [r7, #15]
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
 8000ae0:	b298      	uxth	r0, r3
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	00db      	lsls	r3, r3, #3
 8000ae8:	4413      	add	r3, r2
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	440b      	add	r3, r1
 8000aee:	332e      	adds	r3, #46	@ 0x2e
 8000af0:	4602      	mov	r2, r0
 8000af2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000af4:	7bfa      	ldrb	r2, [r7, #15]
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	4613      	mov	r3, r2
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	4413      	add	r3, r2
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	440b      	add	r3, r1
 8000b02:	3318      	adds	r3, #24
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000b08:	7bfa      	ldrb	r2, [r7, #15]
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	4413      	add	r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	440b      	add	r3, r1
 8000b16:	331c      	adds	r3, #28
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000b1c:	7bfa      	ldrb	r2, [r7, #15]
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	4613      	mov	r3, r2
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	4413      	add	r3, r2
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	440b      	add	r3, r1
 8000b2a:	3320      	adds	r3, #32
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000b30:	7bfa      	ldrb	r2, [r7, #15]
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	4613      	mov	r3, r2
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	4413      	add	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	440b      	add	r3, r1
 8000b3e:	3324      	adds	r3, #36	@ 0x24
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	3301      	adds	r3, #1
 8000b48:	73fb      	strb	r3, [r7, #15]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	791b      	ldrb	r3, [r3, #4]
 8000b4e:	7bfa      	ldrb	r2, [r7, #15]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d3af      	bcc.n	8000ab4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b54:	2300      	movs	r3, #0
 8000b56:	73fb      	strb	r3, [r7, #15]
 8000b58:	e044      	b.n	8000be4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000b5a:	7bfa      	ldrb	r2, [r7, #15]
 8000b5c:	6879      	ldr	r1, [r7, #4]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	4413      	add	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	440b      	add	r3, r1
 8000b68:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000b70:	7bfa      	ldrb	r2, [r7, #15]
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	4613      	mov	r3, r2
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	4413      	add	r3, r2
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	440b      	add	r3, r1
 8000b7e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8000b82:	7bfa      	ldrb	r2, [r7, #15]
 8000b84:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000b86:	7bfa      	ldrb	r2, [r7, #15]
 8000b88:	6879      	ldr	r1, [r7, #4]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	4413      	add	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	440b      	add	r3, r1
 8000b94:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000b9c:	7bfa      	ldrb	r2, [r7, #15]
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	4413      	add	r3, r2
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	440b      	add	r3, r1
 8000baa:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000bb2:	7bfa      	ldrb	r2, [r7, #15]
 8000bb4:	6879      	ldr	r1, [r7, #4]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	4413      	add	r3, r2
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000bc8:	7bfa      	ldrb	r2, [r7, #15]
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	4413      	add	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	3301      	adds	r3, #1
 8000be2:	73fb      	strb	r3, [r7, #15]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	791b      	ldrb	r3, [r3, #4]
 8000be8:	7bfa      	ldrb	r2, [r7, #15]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d3b5      	bcc.n	8000b5a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6818      	ldr	r0, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	7c1a      	ldrb	r2, [r3, #16]
 8000bf6:	f88d 2000 	strb.w	r2, [sp]
 8000bfa:	3304      	adds	r3, #4
 8000bfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bfe:	f002 fbcd 	bl	800339c <USB_DevInit>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d005      	beq.n	8000c14 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	e013      	b.n	8000c3c <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2200      	movs	r2, #0
 8000c18:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	7b1b      	ldrb	r3, [r3, #12]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d102      	bne.n	8000c30 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f001 f96e 	bl	8001f0c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f003 fc4c 	bl	80044d2 <USB_DevDisconnect>

  return HAL_OK;
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40080000 	.word	0x40080000

08000c48 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d101      	bne.n	8000c64 <HAL_PCD_Start+0x1c>
 8000c60:	2302      	movs	r3, #2
 8000c62:	e022      	b.n	8000caa <HAL_PCD_Start+0x62>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2201      	movs	r2, #1
 8000c68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d009      	beq.n	8000c8c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d105      	bne.n	8000c8c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c84:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f002 fb15 	bl	80032c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f003 fbf8 	bl	8004490 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000cb2:	b590      	push	{r4, r7, lr}
 8000cb4:	b08d      	sub	sp, #52	@ 0x34
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000cc0:	6a3b      	ldr	r3, [r7, #32]
 8000cc2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f003 fcb6 	bl	800463a <USB_GetMode>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f040 84b9 	bne.w	8001648 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f003 fc1a 	bl	8004514 <USB_ReadInterrupts>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f000 84af 	beq.w	8001646 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	0a1b      	lsrs	r3, r3, #8
 8000cf2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f003 fc07 	bl	8004514 <USB_ReadInterrupts>
 8000d06:	4603      	mov	r3, r0
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d107      	bne.n	8000d20 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	695a      	ldr	r2, [r3, #20]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f002 0202 	and.w	r2, r2, #2
 8000d1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f003 fbf5 	bl	8004514 <USB_ReadInterrupts>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	f003 0310 	and.w	r3, r3, #16
 8000d30:	2b10      	cmp	r3, #16
 8000d32:	d161      	bne.n	8000df8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	699a      	ldr	r2, [r3, #24]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f022 0210 	bic.w	r2, r2, #16
 8000d42:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8000d44:	6a3b      	ldr	r3, [r7, #32]
 8000d46:	6a1b      	ldr	r3, [r3, #32]
 8000d48:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	f003 020f 	and.w	r2, r3, #15
 8000d50:	4613      	mov	r3, r2
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	4413      	add	r3, r2
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	4413      	add	r3, r2
 8000d60:	3304      	adds	r3, #4
 8000d62:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	0c5b      	lsrs	r3, r3, #17
 8000d68:	f003 030f 	and.w	r3, r3, #15
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d124      	bne.n	8000dba <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8000d76:	4013      	ands	r3, r2
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d035      	beq.n	8000de8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	091b      	lsrs	r3, r3, #4
 8000d84:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000d86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	6a38      	ldr	r0, [r7, #32]
 8000d90:	f003 fa2c 	bl	80041ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	68da      	ldr	r2, [r3, #12]
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	091b      	lsrs	r3, r3, #4
 8000d9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000da0:	441a      	add	r2, r3
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	695a      	ldr	r2, [r3, #20]
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	091b      	lsrs	r3, r3, #4
 8000dae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000db2:	441a      	add	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	615a      	str	r2, [r3, #20]
 8000db8:	e016      	b.n	8000de8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	0c5b      	lsrs	r3, r3, #17
 8000dbe:	f003 030f 	and.w	r3, r3, #15
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	d110      	bne.n	8000de8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8000dcc:	2208      	movs	r2, #8
 8000dce:	4619      	mov	r1, r3
 8000dd0:	6a38      	ldr	r0, [r7, #32]
 8000dd2:	f003 fa0b 	bl	80041ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	695a      	ldr	r2, [r3, #20]
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	091b      	lsrs	r3, r3, #4
 8000dde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000de2:	441a      	add	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	699a      	ldr	r2, [r3, #24]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f042 0210 	orr.w	r2, r2, #16
 8000df6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f003 fb89 	bl	8004514 <USB_ReadInterrupts>
 8000e02:	4603      	mov	r3, r0
 8000e04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e08:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8000e0c:	f040 80a7 	bne.w	8000f5e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f003 fb8e 	bl	800453a <USB_ReadDevAllOutEpInterrupt>
 8000e1e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8000e20:	e099      	b.n	8000f56 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f000 808e 	beq.w	8000f4a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f003 fbb2 	bl	80045a2 <USB_ReadDevOutEPInterrupt>
 8000e3e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d00c      	beq.n	8000e64 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e4c:	015a      	lsls	r2, r3, #5
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	4413      	add	r3, r2
 8000e52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8000e56:	461a      	mov	r2, r3
 8000e58:	2301      	movs	r3, #1
 8000e5a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000e5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 fece 	bl	8001c00 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d00c      	beq.n	8000e88 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e70:	015a      	lsls	r2, r3, #5
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	4413      	add	r3, r2
 8000e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000e80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f000 ffa4 	bl	8001dd0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	f003 0310 	and.w	r3, r3, #16
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d008      	beq.n	8000ea4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e94:	015a      	lsls	r2, r3, #5
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	4413      	add	r3, r2
 8000e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	2310      	movs	r3, #16
 8000ea2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d030      	beq.n	8000f10 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8000eae:	6a3b      	ldr	r3, [r7, #32]
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eb6:	2b80      	cmp	r3, #128	@ 0x80
 8000eb8:	d109      	bne.n	8000ece <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	69fa      	ldr	r2, [r7, #28]
 8000ec4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8000ec8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ecc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8000ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	4413      	add	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	4413      	add	r3, r2
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	78db      	ldrb	r3, [r3, #3]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d108      	bne.n	8000efe <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f005 fefb 	bl	8006cf4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8000efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f00:	015a      	lsls	r2, r3, #5
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	4413      	add	r3, r2
 8000f06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	f003 0320 	and.w	r3, r3, #32
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d008      	beq.n	8000f2c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f1c:	015a      	lsls	r2, r3, #5
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	4413      	add	r3, r2
 8000f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8000f26:	461a      	mov	r2, r3
 8000f28:	2320      	movs	r3, #32
 8000f2a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d009      	beq.n	8000f4a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8000f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f38:	015a      	lsls	r2, r3, #5
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8000f42:	461a      	mov	r2, r3
 8000f44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f48:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8000f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f52:	085b      	lsrs	r3, r3, #1
 8000f54:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8000f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f47f af62 	bne.w	8000e22 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f003 fad6 	bl	8004514 <USB_ReadInterrupts>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8000f72:	f040 80db 	bne.w	800112c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 faf7 	bl	800456e <USB_ReadDevAllInEpInterrupt>
 8000f80:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8000f86:	e0cd      	b.n	8001124 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8000f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 80c2 	beq.w	8001118 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f003 fb1d 	bl	80045de <USB_ReadDevInEPInterrupt>
 8000fa4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d057      	beq.n	8001060 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000fc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69f9      	ldr	r1, [r7, #28]
 8000fcc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd6:	015a      	lsls	r2, r3, #5
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	4413      	add	r3, r2
 8000fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	799b      	ldrb	r3, [r3, #6]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d132      	bne.n	8001054 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	4413      	add	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	3320      	adds	r3, #32
 8000ffe:	6819      	ldr	r1, [r3, #0]
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001004:	4613      	mov	r3, r2
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	4413      	add	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4403      	add	r3, r0
 800100e:	331c      	adds	r3, #28
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4419      	add	r1, r3
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001018:	4613      	mov	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	4413      	add	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4403      	add	r3, r0
 8001022:	3320      	adds	r3, #32
 8001024:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001028:	2b00      	cmp	r3, #0
 800102a:	d113      	bne.n	8001054 <HAL_PCD_IRQHandler+0x3a2>
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001030:	4613      	mov	r3, r2
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	4413      	add	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	440b      	add	r3, r1
 800103a:	3324      	adds	r3, #36	@ 0x24
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d108      	bne.n	8001054 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6818      	ldr	r0, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800104c:	461a      	mov	r2, r3
 800104e:	2101      	movs	r1, #1
 8001050:	f003 fb26 	bl	80046a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001056:	b2db      	uxtb	r3, r3
 8001058:	4619      	mov	r1, r3
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f005 fda9 	bl	8006bb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	f003 0308 	and.w	r3, r3, #8
 8001066:	2b00      	cmp	r3, #0
 8001068:	d008      	beq.n	800107c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800106a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800106c:	015a      	lsls	r2, r3, #5
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	4413      	add	r3, r2
 8001072:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001076:	461a      	mov	r2, r3
 8001078:	2308      	movs	r3, #8
 800107a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	f003 0310 	and.w	r3, r3, #16
 8001082:	2b00      	cmp	r3, #0
 8001084:	d008      	beq.n	8001098 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001088:	015a      	lsls	r2, r3, #5
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	4413      	add	r3, r2
 800108e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001092:	461a      	mov	r2, r3
 8001094:	2310      	movs	r3, #16
 8001096:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d008      	beq.n	80010b4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80010a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a4:	015a      	lsls	r2, r3, #5
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	4413      	add	r3, r2
 80010aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80010ae:	461a      	mov	r2, r3
 80010b0:	2340      	movs	r3, #64	@ 0x40
 80010b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d023      	beq.n	8001106 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80010be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80010c0:	6a38      	ldr	r0, [r7, #32]
 80010c2:	f002 fb09 	bl	80036d8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80010c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010c8:	4613      	mov	r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	4413      	add	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	3310      	adds	r3, #16
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	3304      	adds	r3, #4
 80010d8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	78db      	ldrb	r3, [r3, #3]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d108      	bne.n	80010f4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	2200      	movs	r2, #0
 80010e6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80010e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	4619      	mov	r1, r3
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f005 fe12 	bl	8006d18 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80010f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f6:	015a      	lsls	r2, r3, #5
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	4413      	add	r3, r2
 80010fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001100:	461a      	mov	r2, r3
 8001102:	2302      	movs	r3, #2
 8001104:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001110:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 fce8 	bl	8001ae8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111a:	3301      	adds	r3, #1
 800111c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800111e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001120:	085b      	lsrs	r3, r3, #1
 8001122:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001126:	2b00      	cmp	r3, #0
 8001128:	f47f af2e 	bne.w	8000f88 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f003 f9ef 	bl	8004514 <USB_ReadInterrupts>
 8001136:	4603      	mov	r3, r0
 8001138:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800113c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001140:	d122      	bne.n	8001188 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	69fa      	ldr	r2, [r7, #28]
 800114c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001150:	f023 0301 	bic.w	r3, r3, #1
 8001154:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800115c:	2b01      	cmp	r3, #1
 800115e:	d108      	bne.n	8001172 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001168:	2100      	movs	r1, #0
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 fef2 	bl	8001f54 <HAL_PCDEx_LPM_Callback>
 8001170:	e002      	b.n	8001178 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f005 fd96 	bl	8006ca4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	695a      	ldr	r2, [r3, #20]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001186:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f003 f9c1 	bl	8004514 <USB_ReadInterrupts>
 8001192:	4603      	mov	r3, r0
 8001194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800119c:	d112      	bne.n	80011c4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d102      	bne.n	80011b4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f005 fd50 	bl	8006c54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	695a      	ldr	r2, [r3, #20]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80011c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f003 f9a3 	bl	8004514 <USB_ReadInterrupts>
 80011ce:	4603      	mov	r3, r0
 80011d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80011d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80011d8:	d121      	bne.n	800121e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	695a      	ldr	r2, [r3, #20]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80011e8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d111      	bne.n	8001218 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2201      	movs	r2, #1
 80011f8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	f003 020f 	and.w	r2, r3, #15
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800120e:	2101      	movs	r1, #1
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 fe9f 	bl	8001f54 <HAL_PCDEx_LPM_Callback>
 8001216:	e002      	b.n	800121e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f005 fd1b 	bl	8006c54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f003 f976 	bl	8004514 <USB_ReadInterrupts>
 8001228:	4603      	mov	r3, r0
 800122a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800122e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001232:	f040 80b7 	bne.w	80013a4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	69fa      	ldr	r2, [r7, #28]
 8001240:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001244:	f023 0301 	bic.w	r3, r3, #1
 8001248:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2110      	movs	r1, #16
 8001250:	4618      	mov	r0, r3
 8001252:	f002 fa41 	bl	80036d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001256:	2300      	movs	r3, #0
 8001258:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800125a:	e046      	b.n	80012ea <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800125c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800125e:	015a      	lsls	r2, r3, #5
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	4413      	add	r3, r2
 8001264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001268:	461a      	mov	r2, r3
 800126a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800126e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001272:	015a      	lsls	r2, r3, #5
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	4413      	add	r3, r2
 8001278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001280:	0151      	lsls	r1, r2, #5
 8001282:	69fa      	ldr	r2, [r7, #28]
 8001284:	440a      	add	r2, r1
 8001286:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800128a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800128e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001292:	015a      	lsls	r2, r3, #5
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	4413      	add	r3, r2
 8001298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800129c:	461a      	mov	r2, r3
 800129e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80012a2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80012a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012a6:	015a      	lsls	r2, r3, #5
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	4413      	add	r3, r2
 80012ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012b4:	0151      	lsls	r1, r2, #5
 80012b6:	69fa      	ldr	r2, [r7, #28]
 80012b8:	440a      	add	r2, r1
 80012ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80012be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80012c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80012c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012c6:	015a      	lsls	r2, r3, #5
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	4413      	add	r3, r2
 80012cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012d4:	0151      	lsls	r1, r2, #5
 80012d6:	69fa      	ldr	r2, [r7, #28]
 80012d8:	440a      	add	r2, r1
 80012da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80012de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80012e2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012e6:	3301      	adds	r3, #1
 80012e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	791b      	ldrb	r3, [r3, #4]
 80012ee:	461a      	mov	r2, r3
 80012f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d3b2      	bcc.n	800125c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001304:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001308:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	7bdb      	ldrb	r3, [r3, #15]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d016      	beq.n	8001340 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001318:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800131c:	69fa      	ldr	r2, [r7, #28]
 800131e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001322:	f043 030b 	orr.w	r3, r3, #11
 8001326:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001332:	69fa      	ldr	r2, [r7, #28]
 8001334:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001338:	f043 030b 	orr.w	r3, r3, #11
 800133c:	6453      	str	r3, [r2, #68]	@ 0x44
 800133e:	e015      	b.n	800136c <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001346:	695a      	ldr	r2, [r3, #20]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800134e:	4619      	mov	r1, r3
 8001350:	f242 032b 	movw	r3, #8235	@ 0x202b
 8001354:	4313      	orrs	r3, r2
 8001356:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	69fa      	ldr	r2, [r7, #28]
 8001362:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001366:	f043 030b 	orr.w	r3, r3, #11
 800136a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	69fa      	ldr	r2, [r7, #28]
 8001376:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800137a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800137e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6818      	ldr	r0, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800138e:	461a      	mov	r2, r3
 8001390:	f003 f986 	bl	80046a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	695a      	ldr	r2, [r3, #20]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80013a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f003 f8b3 	bl	8004514 <USB_ReadInterrupts>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80013b8:	d123      	bne.n	8001402 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f003 f94a 	bl	8004658 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 f9fe 	bl	80037ca <USB_GetDevSpeed>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461a      	mov	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681c      	ldr	r4, [r3, #0]
 80013da:	f000 ff51 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 80013de:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80013e4:	461a      	mov	r2, r3
 80013e6:	4620      	mov	r0, r4
 80013e8:	f001 fec8 	bl	800317c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f005 fc08 	bl	8006c02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	695a      	ldr	r2, [r3, #20]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001400:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f003 f884 	bl	8004514 <USB_ReadInterrupts>
 800140c:	4603      	mov	r3, r0
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	2b08      	cmp	r3, #8
 8001414:	d10a      	bne.n	800142c <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f005 fbe5 	bl	8006be6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	695a      	ldr	r2, [r3, #20]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f002 0208 	and.w	r2, r2, #8
 800142a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f003 f86f 	bl	8004514 <USB_ReadInterrupts>
 8001436:	4603      	mov	r3, r0
 8001438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800143c:	2b80      	cmp	r3, #128	@ 0x80
 800143e:	d123      	bne.n	8001488 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001440:	6a3b      	ldr	r3, [r7, #32]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001448:	6a3b      	ldr	r3, [r7, #32]
 800144a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800144c:	2301      	movs	r3, #1
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001450:	e014      	b.n	800147c <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001456:	4613      	mov	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d105      	bne.n	8001476 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800146a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146c:	b2db      	uxtb	r3, r3
 800146e:	4619      	mov	r1, r3
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f000 fb08 	bl	8001a86 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001478:	3301      	adds	r3, #1
 800147a:	627b      	str	r3, [r7, #36]	@ 0x24
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	791b      	ldrb	r3, [r3, #4]
 8001480:	461a      	mov	r2, r3
 8001482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001484:	4293      	cmp	r3, r2
 8001486:	d3e4      	bcc.n	8001452 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f003 f841 	bl	8004514 <USB_ReadInterrupts>
 8001492:	4603      	mov	r3, r0
 8001494:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001498:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800149c:	d13c      	bne.n	8001518 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800149e:	2301      	movs	r3, #1
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80014a2:	e02b      	b.n	80014fc <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80014a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a6:	015a      	lsls	r2, r3, #5
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	4413      	add	r3, r2
 80014ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	3318      	adds	r3, #24
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d115      	bne.n	80014f6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80014ca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	da12      	bge.n	80014f6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014d4:	4613      	mov	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	4413      	add	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	3317      	adds	r3, #23
 80014e0:	2201      	movs	r2, #1
 80014e2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80014e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	4619      	mov	r1, r3
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 fac8 	bl	8001a86 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80014f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f8:	3301      	adds	r3, #1
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	791b      	ldrb	r3, [r3, #4]
 8001500:	461a      	mov	r2, r3
 8001502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001504:	4293      	cmp	r3, r2
 8001506:	d3cd      	bcc.n	80014a4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	695a      	ldr	r2, [r3, #20]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001516:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f002 fff9 	bl	8004514 <USB_ReadInterrupts>
 8001522:	4603      	mov	r3, r0
 8001524:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001528:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800152c:	d156      	bne.n	80015dc <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800152e:	2301      	movs	r3, #1
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
 8001532:	e045      	b.n	80015c0 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001536:	015a      	lsls	r2, r3, #5
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	4413      	add	r3, r2
 800153c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d12e      	bne.n	80015ba <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800155c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800155e:	2b00      	cmp	r3, #0
 8001560:	da2b      	bge.n	80015ba <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800156e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001572:	429a      	cmp	r2, r3
 8001574:	d121      	bne.n	80015ba <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800157a:	4613      	mov	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	4413      	add	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001588:	2201      	movs	r2, #1
 800158a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800158c:	6a3b      	ldr	r3, [r7, #32]
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001598:	6a3b      	ldr	r3, [r7, #32]
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d10a      	bne.n	80015ba <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	69fa      	ldr	r2, [r7, #28]
 80015ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80015b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015b6:	6053      	str	r3, [r2, #4]
            break;
 80015b8:	e008      	b.n	80015cc <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80015ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015bc:	3301      	adds	r3, #1
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	791b      	ldrb	r3, [r3, #4]
 80015c4:	461a      	mov	r2, r3
 80015c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d3b3      	bcc.n	8001534 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	695a      	ldr	r2, [r3, #20]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80015da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f002 ff97 	bl	8004514 <USB_ReadInterrupts>
 80015e6:	4603      	mov	r3, r0
 80015e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80015ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015f0:	d10a      	bne.n	8001608 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f005 fba2 	bl	8006d3c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	695a      	ldr	r2, [r3, #20]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001606:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f002 ff81 	bl	8004514 <USB_ReadInterrupts>
 8001612:	4603      	mov	r3, r0
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b04      	cmp	r3, #4
 800161a:	d115      	bne.n	8001648 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	2b00      	cmp	r3, #0
 800162c:	d002      	beq.n	8001634 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f005 fb92 	bl	8006d58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6859      	ldr	r1, [r3, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	430a      	orrs	r2, r1
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	e000      	b.n	8001648 <HAL_PCD_IRQHandler+0x996>
      return;
 8001646:	bf00      	nop
    }
  }
}
 8001648:	3734      	adds	r7, #52	@ 0x34
 800164a:	46bd      	mov	sp, r7
 800164c:	bd90      	pop	{r4, r7, pc}

0800164e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
 8001656:	460b      	mov	r3, r1
 8001658:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <HAL_PCD_SetAddress+0x1a>
 8001664:	2302      	movs	r3, #2
 8001666:	e012      	b.n	800168e <HAL_PCD_SetAddress+0x40>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	78fa      	ldrb	r2, [r7, #3]
 8001674:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	78fa      	ldrb	r2, [r7, #3]
 800167c:	4611      	mov	r1, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f002 fee0 	bl	8004444 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	4608      	mov	r0, r1
 80016a0:	4611      	mov	r1, r2
 80016a2:	461a      	mov	r2, r3
 80016a4:	4603      	mov	r3, r0
 80016a6:	70fb      	strb	r3, [r7, #3]
 80016a8:	460b      	mov	r3, r1
 80016aa:	803b      	strh	r3, [r7, #0]
 80016ac:	4613      	mov	r3, r2
 80016ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	da0f      	bge.n	80016dc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	f003 020f 	and.w	r2, r3, #15
 80016c2:	4613      	mov	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	4413      	add	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	3310      	adds	r3, #16
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	4413      	add	r3, r2
 80016d0:	3304      	adds	r3, #4
 80016d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2201      	movs	r2, #1
 80016d8:	705a      	strb	r2, [r3, #1]
 80016da:	e00f      	b.n	80016fc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	f003 020f 	and.w	r2, r3, #15
 80016e2:	4613      	mov	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	4413      	add	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	3304      	adds	r3, #4
 80016f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	b2da      	uxtb	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001708:	883a      	ldrh	r2, [r7, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	78ba      	ldrb	r2, [r7, #2]
 8001712:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	785b      	ldrb	r3, [r3, #1]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d004      	beq.n	8001726 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001726:	78bb      	ldrb	r3, [r7, #2]
 8001728:	2b02      	cmp	r3, #2
 800172a:	d102      	bne.n	8001732 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2200      	movs	r2, #0
 8001730:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001738:	2b01      	cmp	r3, #1
 800173a:	d101      	bne.n	8001740 <HAL_PCD_EP_Open+0xaa>
 800173c:	2302      	movs	r3, #2
 800173e:	e00e      	b.n	800175e <HAL_PCD_EP_Open+0xc8>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68f9      	ldr	r1, [r7, #12]
 800174e:	4618      	mov	r0, r3
 8001750:	f002 f860 	bl	8003814 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800175c:	7afb      	ldrb	r3, [r7, #11]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b084      	sub	sp, #16
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	460b      	mov	r3, r1
 8001770:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001772:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001776:	2b00      	cmp	r3, #0
 8001778:	da0f      	bge.n	800179a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800177a:	78fb      	ldrb	r3, [r7, #3]
 800177c:	f003 020f 	and.w	r2, r3, #15
 8001780:	4613      	mov	r3, r2
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	4413      	add	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	3310      	adds	r3, #16
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	3304      	adds	r3, #4
 8001790:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2201      	movs	r2, #1
 8001796:	705a      	strb	r2, [r3, #1]
 8001798:	e00f      	b.n	80017ba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	f003 020f 	and.w	r2, r3, #15
 80017a0:	4613      	mov	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4413      	add	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	4413      	add	r3, r2
 80017b0:	3304      	adds	r3, #4
 80017b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80017ba:	78fb      	ldrb	r3, [r7, #3]
 80017bc:	f003 030f 	and.w	r3, r3, #15
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d101      	bne.n	80017d4 <HAL_PCD_EP_Close+0x6e>
 80017d0:	2302      	movs	r3, #2
 80017d2:	e00e      	b.n	80017f2 <HAL_PCD_EP_Close+0x8c>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68f9      	ldr	r1, [r7, #12]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f002 f89e 	bl	8003924 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b086      	sub	sp, #24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	60f8      	str	r0, [r7, #12]
 8001802:	607a      	str	r2, [r7, #4]
 8001804:	603b      	str	r3, [r7, #0]
 8001806:	460b      	mov	r3, r1
 8001808:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800180a:	7afb      	ldrb	r3, [r7, #11]
 800180c:	f003 020f 	and.w	r2, r3, #15
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	4413      	add	r3, r2
 8001820:	3304      	adds	r3, #4
 8001822:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	2200      	movs	r2, #0
 8001834:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2200      	movs	r2, #0
 800183a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800183c:	7afb      	ldrb	r3, [r7, #11]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	b2da      	uxtb	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	799b      	ldrb	r3, [r3, #6]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d102      	bne.n	8001856 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6818      	ldr	r0, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	799b      	ldrb	r3, [r3, #6]
 800185e:	461a      	mov	r2, r3
 8001860:	6979      	ldr	r1, [r7, #20]
 8001862:	f002 f93b 	bl	8003adc <USB_EPStartXfer>

  return HAL_OK;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	f003 020f 	and.w	r2, r3, #15
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	4413      	add	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001892:	681b      	ldr	r3, [r3, #0]
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	460b      	mov	r3, r1
 80018ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018b0:	7afb      	ldrb	r3, [r7, #11]
 80018b2:	f003 020f 	and.w	r2, r3, #15
 80018b6:	4613      	mov	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4413      	add	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	3310      	adds	r3, #16
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	4413      	add	r3, r2
 80018c4:	3304      	adds	r3, #4
 80018c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	2201      	movs	r2, #1
 80018de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018e0:	7afb      	ldrb	r3, [r7, #11]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	799b      	ldrb	r3, [r3, #6]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d102      	bne.n	80018fa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6818      	ldr	r0, [r3, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	799b      	ldrb	r3, [r3, #6]
 8001902:	461a      	mov	r2, r3
 8001904:	6979      	ldr	r1, [r7, #20]
 8001906:	f002 f8e9 	bl	8003adc <USB_EPStartXfer>

  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	7912      	ldrb	r2, [r2, #4]
 800192a:	4293      	cmp	r3, r2
 800192c:	d901      	bls.n	8001932 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e04f      	b.n	80019d2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001932:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001936:	2b00      	cmp	r3, #0
 8001938:	da0f      	bge.n	800195a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	f003 020f 	and.w	r2, r3, #15
 8001940:	4613      	mov	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4413      	add	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	3310      	adds	r3, #16
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	3304      	adds	r3, #4
 8001950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2201      	movs	r2, #1
 8001956:	705a      	strb	r2, [r3, #1]
 8001958:	e00d      	b.n	8001976 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800195a:	78fa      	ldrb	r2, [r7, #3]
 800195c:	4613      	mov	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	4413      	add	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	4413      	add	r3, r2
 800196c:	3304      	adds	r3, #4
 800196e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2201      	movs	r2, #1
 800197a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800197c:	78fb      	ldrb	r3, [r7, #3]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	b2da      	uxtb	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800198e:	2b01      	cmp	r3, #1
 8001990:	d101      	bne.n	8001996 <HAL_PCD_EP_SetStall+0x82>
 8001992:	2302      	movs	r3, #2
 8001994:	e01d      	b.n	80019d2 <HAL_PCD_EP_SetStall+0xbe>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68f9      	ldr	r1, [r7, #12]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f002 fc79 	bl	800429c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	f003 030f 	and.w	r3, r3, #15
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d109      	bne.n	80019c8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	7999      	ldrb	r1, [r3, #6]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80019c2:	461a      	mov	r2, r3
 80019c4:	f002 fe6c 	bl	80046a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b084      	sub	sp, #16
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	460b      	mov	r3, r1
 80019e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	f003 030f 	and.w	r3, r3, #15
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	7912      	ldrb	r2, [r2, #4]
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d901      	bls.n	80019f8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e042      	b.n	8001a7e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	da0f      	bge.n	8001a20 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a00:	78fb      	ldrb	r3, [r7, #3]
 8001a02:	f003 020f 	and.w	r2, r3, #15
 8001a06:	4613      	mov	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	3310      	adds	r3, #16
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	4413      	add	r3, r2
 8001a14:	3304      	adds	r3, #4
 8001a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	705a      	strb	r2, [r3, #1]
 8001a1e:	e00f      	b.n	8001a40 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	f003 020f 	and.w	r2, r3, #15
 8001a26:	4613      	mov	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	3304      	adds	r3, #4
 8001a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a46:	78fb      	ldrb	r3, [r7, #3]
 8001a48:	f003 030f 	and.w	r3, r3, #15
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d101      	bne.n	8001a60 <HAL_PCD_EP_ClrStall+0x86>
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e00e      	b.n	8001a7e <HAL_PCD_EP_ClrStall+0xa4>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68f9      	ldr	r1, [r7, #12]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f002 fc82 	bl	8004378 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001a92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	da0c      	bge.n	8001ab4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	f003 020f 	and.w	r2, r3, #15
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	3310      	adds	r3, #16
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	3304      	adds	r3, #4
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	e00c      	b.n	8001ace <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	f003 020f 	and.w	r2, r3, #15
 8001aba:	4613      	mov	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	3304      	adds	r3, #4
 8001acc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68f9      	ldr	r1, [r7, #12]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f002 faa1 	bl	800401c <USB_EPStopXfer>
 8001ada:	4603      	mov	r3, r0
 8001adc:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001ade:	7afb      	ldrb	r3, [r7, #11]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	@ 0x28
 8001aec:	af02      	add	r7, sp, #8
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	4613      	mov	r3, r2
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4413      	add	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	3310      	adds	r3, #16
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	695a      	ldr	r2, [r3, #20]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d901      	bls.n	8001b20 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e06b      	b.n	8001bf8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	691a      	ldr	r2, [r3, #16]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d902      	bls.n	8001b3c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	3303      	adds	r3, #3
 8001b40:	089b      	lsrs	r3, r3, #2
 8001b42:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001b44:	e02a      	b.n	8001b9c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	691a      	ldr	r2, [r3, #16]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d902      	bls.n	8001b62 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3303      	adds	r3, #3
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	68d9      	ldr	r1, [r3, #12]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	6978      	ldr	r0, [r7, #20]
 8001b80:	f002 faf6 	bl	8004170 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	441a      	add	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	695a      	ldr	r2, [r3, #20]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	441a      	add	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	015a      	lsls	r2, r3, #5
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d809      	bhi.n	8001bc6 <PCD_WriteEmptyTxFifo+0xde>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	695a      	ldr	r2, [r3, #20]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d203      	bcs.n	8001bc6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1bf      	bne.n	8001b46 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	691a      	ldr	r2, [r3, #16]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d811      	bhi.n	8001bf6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	2201      	movs	r2, #1
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001be6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	6939      	ldr	r1, [r7, #16]
 8001bee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3720      	adds	r7, #32
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	333c      	adds	r3, #60	@ 0x3c
 8001c18:	3304      	adds	r3, #4
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	015a      	lsls	r2, r3, #5
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	4413      	add	r3, r2
 8001c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	799b      	ldrb	r3, [r3, #6]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d17b      	bne.n	8001d2e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d015      	beq.n	8001c6c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	4a61      	ldr	r2, [pc, #388]	@ (8001dc8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	f240 80b9 	bls.w	8001dbc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80b3 	beq.w	8001dbc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	015a      	lsls	r2, r3, #5
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c62:	461a      	mov	r2, r3
 8001c64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c68:	6093      	str	r3, [r2, #8]
 8001c6a:	e0a7      	b.n	8001dbc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	f003 0320 	and.w	r3, r3, #32
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d009      	beq.n	8001c8a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	015a      	lsls	r2, r3, #5
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c82:	461a      	mov	r2, r3
 8001c84:	2320      	movs	r3, #32
 8001c86:	6093      	str	r3, [r2, #8]
 8001c88:	e098      	b.n	8001dbc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f040 8093 	bne.w	8001dbc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	4a4b      	ldr	r2, [pc, #300]	@ (8001dc8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d90f      	bls.n	8001cbe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00a      	beq.n	8001cbe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	015a      	lsls	r2, r3, #5
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	4413      	add	r3, r2
 8001cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001cba:	6093      	str	r3, [r2, #8]
 8001cbc:	e07e      	b.n	8001dbc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	4413      	add	r3, r2
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6a1a      	ldr	r2, [r3, #32]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	0159      	lsls	r1, r3, #5
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	440b      	add	r3, r1
 8001ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cea:	1ad2      	subs	r2, r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d114      	bne.n	8001d20 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d109      	bne.n	8001d12 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6818      	ldr	r0, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001d08:	461a      	mov	r2, r3
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	f002 fcc8 	bl	80046a0 <USB_EP0_OutStart>
 8001d10:	e006      	b.n	8001d20 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	441a      	add	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	4619      	mov	r1, r3
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f004 ff28 	bl	8006b7c <HAL_PCD_DataOutStageCallback>
 8001d2c:	e046      	b.n	8001dbc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	4a26      	ldr	r2, [pc, #152]	@ (8001dcc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d124      	bne.n	8001d80 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00a      	beq.n	8001d56 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	015a      	lsls	r2, r3, #5
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	4413      	add	r3, r2
 8001d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d52:	6093      	str	r3, [r2, #8]
 8001d54:	e032      	b.n	8001dbc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	f003 0320 	and.w	r3, r3, #32
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	015a      	lsls	r2, r3, #5
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	4413      	add	r3, r2
 8001d68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	2320      	movs	r3, #32
 8001d70:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	4619      	mov	r1, r3
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f004 feff 	bl	8006b7c <HAL_PCD_DataOutStageCallback>
 8001d7e:	e01d      	b.n	8001dbc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d114      	bne.n	8001db0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d108      	bne.n	8001db0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001da8:	461a      	mov	r2, r3
 8001daa:	2100      	movs	r1, #0
 8001dac:	f002 fc78 	bl	80046a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	4619      	mov	r1, r3
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f004 fee0 	bl	8006b7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3720      	adds	r7, #32
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	4f54300a 	.word	0x4f54300a
 8001dcc:	4f54310a 	.word	0x4f54310a

08001dd0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	333c      	adds	r3, #60	@ 0x3c
 8001de8:	3304      	adds	r3, #4
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	015a      	lsls	r2, r3, #5
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4413      	add	r3, r2
 8001df6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4a15      	ldr	r2, [pc, #84]	@ (8001e58 <PCD_EP_OutSetupPacket_int+0x88>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d90e      	bls.n	8001e24 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d009      	beq.n	8001e24 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	015a      	lsls	r2, r3, #5
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4413      	add	r3, r2
 8001e18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e22:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f004 fe97 	bl	8006b58 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e58 <PCD_EP_OutSetupPacket_int+0x88>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d90c      	bls.n	8001e4c <PCD_EP_OutSetupPacket_int+0x7c>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	799b      	ldrb	r3, [r3, #6]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d108      	bne.n	8001e4c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001e44:	461a      	mov	r2, r3
 8001e46:	2101      	movs	r1, #1
 8001e48:	f002 fc2a 	bl	80046a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	4f54300a 	.word	0x4f54300a

08001e5c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	70fb      	strb	r3, [r7, #3]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e72:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d107      	bne.n	8001e8a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001e7a:	883b      	ldrh	r3, [r7, #0]
 8001e7c:	0419      	lsls	r1, r3, #16
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e88:	e028      	b.n	8001edc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e90:	0c1b      	lsrs	r3, r3, #16
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	4413      	add	r3, r2
 8001e96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	73fb      	strb	r3, [r7, #15]
 8001e9c:	e00d      	b.n	8001eba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	3340      	adds	r3, #64	@ 0x40
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	0c1b      	lsrs	r3, r3, #16
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	73fb      	strb	r3, [r7, #15]
 8001eba:	7bfa      	ldrb	r2, [r7, #15]
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d3ec      	bcc.n	8001e9e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001ec4:	883b      	ldrh	r3, [r7, #0]
 8001ec6:	0418      	lsls	r0, r3, #16
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6819      	ldr	r1, [r3, #0]
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	4302      	orrs	r2, r0
 8001ed4:	3340      	adds	r3, #64	@ 0x40
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	887a      	ldrh	r2, [r7, #2]
 8001efc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f3a:	4b05      	ldr	r3, [pc, #20]	@ (8001f50 <HAL_PCDEx_ActivateLPM+0x44>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	10000003 	.word	0x10000003

08001f54 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBVoltageDetector(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Enable the USB voltage detector */
  SET_BIT(PWR->CSR2, PWR_CSR2_USB33DEN);
 8001f72:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb0 <HAL_PWREx_EnableUSBVoltageDetector+0x44>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	4a0e      	ldr	r2, [pc, #56]	@ (8001fb0 <HAL_PWREx_EnableUSBVoltageDetector+0x44>)
 8001f78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f7c:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f7e:	f7fe fbeb 	bl	8000758 <HAL_GetTick>
 8001f82:	6078      	str	r0, [r7, #4]

  /* Wait till the USB regulator ready flag is set */
  while ((PWR->CSR2 & PWR_CSR2_USB33RDY) == 0U)
 8001f84:	e009      	b.n	8001f9a <HAL_PWREx_EnableUSBVoltageDetector+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001f86:	f7fe fbe7 	bl	8000758 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f94:	d901      	bls.n	8001f9a <HAL_PWREx_EnableUSBVoltageDetector+0x2e>
    {
      return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e006      	b.n	8001fa8 <HAL_PWREx_EnableUSBVoltageDetector+0x3c>
  while ((PWR->CSR2 & PWR_CSR2_USB33RDY) == 0U)
 8001f9a:	4b05      	ldr	r3, [pc, #20]	@ (8001fb0 <HAL_PWREx_EnableUSBVoltageDetector+0x44>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0ef      	beq.n	8001f86 <HAL_PWREx_EnableUSBVoltageDetector+0x1a>
    }
  }
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	58024800 	.word	0x58024800

08001fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b08b      	sub	sp, #44	@ 0x2c
 8001fb8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t prescaler;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fba:	4baa      	ldr	r3, [pc, #680]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001fc2:	2b18      	cmp	r3, #24
 8001fc4:	f200 8136 	bhi.w	8002234 <HAL_RCC_GetSysClockFreq+0x280>
 8001fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8001fd0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fce:	bf00      	nop
 8001fd0:	08002035 	.word	0x08002035
 8001fd4:	08002235 	.word	0x08002235
 8001fd8:	08002235 	.word	0x08002235
 8001fdc:	08002235 	.word	0x08002235
 8001fe0:	08002235 	.word	0x08002235
 8001fe4:	08002235 	.word	0x08002235
 8001fe8:	08002235 	.word	0x08002235
 8001fec:	08002235 	.word	0x08002235
 8001ff0:	0800205b 	.word	0x0800205b
 8001ff4:	08002235 	.word	0x08002235
 8001ff8:	08002235 	.word	0x08002235
 8001ffc:	08002235 	.word	0x08002235
 8002000:	08002235 	.word	0x08002235
 8002004:	08002235 	.word	0x08002235
 8002008:	08002235 	.word	0x08002235
 800200c:	08002235 	.word	0x08002235
 8002010:	08002061 	.word	0x08002061
 8002014:	08002235 	.word	0x08002235
 8002018:	08002235 	.word	0x08002235
 800201c:	08002235 	.word	0x08002235
 8002020:	08002235 	.word	0x08002235
 8002024:	08002235 	.word	0x08002235
 8002028:	08002235 	.word	0x08002235
 800202c:	08002235 	.word	0x08002235
 8002030:	08002067 	.word	0x08002067
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */

      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8002034:	4b8b      	ldr	r3, [pc, #556]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0320 	and.w	r3, r3, #32
 800203c:	2b00      	cmp	r3, #0
 800203e:	d009      	beq.n	8002054 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002040:	4b88      	ldr	r3, [pc, #544]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	08db      	lsrs	r3, r3, #3
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	4a87      	ldr	r2, [pc, #540]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800204c:	fa22 f303 	lsr.w	r3, r2, r3
 8002050:	623b      	str	r3, [r7, #32]
      {
        /* Can't retrieve HSIDIV value */
        sysclockfreq = 0U;
      }

      break;
 8002052:	e0f2      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	623b      	str	r3, [r7, #32]
      break;
 8002058:	e0ef      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800205a:	4b84      	ldr	r3, [pc, #528]	@ (800226c <HAL_RCC_GetSysClockFreq+0x2b8>)
 800205c:	623b      	str	r3, [r7, #32]
      break;
 800205e:	e0ec      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002060:	4b83      	ldr	r3, [pc, #524]	@ (8002270 <HAL_RCC_GetSysClockFreq+0x2bc>)
 8002062:	623b      	str	r3, [r7, #32]
      break;
 8002064:	e0e9      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x286>
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002066:	4b7f      	ldr	r3, [pc, #508]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	61fb      	str	r3, [r7, #28]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos)  ;
 8002070:	4b7c      	ldr	r3, [pc, #496]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002074:	091b      	lsrs	r3, r3, #4
 8002076:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800207a:	61bb      	str	r3, [r7, #24]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800207c:	4b79      	ldr	r3, [pc, #484]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800207e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	617b      	str	r3, [r7, #20]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> 3));
 8002086:	4b77      	ldr	r3, [pc, #476]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800208a:	08db      	lsrs	r3, r3, #3
 800208c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	fb02 f303 	mul.w	r3, r2, r3
 8002096:	ee07 3a90 	vmov	s15, r3
 800209a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800209e:	edc7 7a04 	vstr	s15, [r7, #16]

      if (pllm != 0U)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 80c2 	beq.w	800222e <HAL_RCC_GetSysClockFreq+0x27a>
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d064      	beq.n	800217a <HAL_RCC_GetSysClockFreq+0x1c6>
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	f200 8083 	bhi.w	80021be <HAL_RCC_GetSysClockFreq+0x20a>
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_RCC_GetSysClockFreq+0x112>
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d038      	beq.n	8002136 <HAL_RCC_GetSysClockFreq+0x182>
 80020c4:	e07b      	b.n	80021be <HAL_RCC_GetSysClockFreq+0x20a>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 80020c6:	4b67      	ldr	r3, [pc, #412]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0320 	and.w	r3, r3, #32
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d02d      	beq.n	800212e <HAL_RCC_GetSysClockFreq+0x17a>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80020d2:	4b64      	ldr	r3, [pc, #400]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	08db      	lsrs	r3, r3, #3
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	4a62      	ldr	r2, [pc, #392]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80020de:	fa22 f303 	lsr.w	r3, r2, r3
 80020e2:	60fb      	str	r3, [r7, #12]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	ee07 3a90 	vmov	s15, r3
 80020ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	ee07 3a90 	vmov	s15, r3
 80020f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020fc:	4b59      	ldr	r3, [pc, #356]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80020fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002104:	ee07 3a90 	vmov	s15, r3
 8002108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800210c:	ed97 6a04 	vldr	s12, [r7, #16]
 8002110:	eddf 5a58 	vldr	s11, [pc, #352]	@ 8002274 <HAL_RCC_GetSysClockFreq+0x2c0>
 8002114:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002118:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800211c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002120:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002128:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            else
            {
              /* Can't retrieve HSIDIV value */
              pllvco = (float_t)0;
            }
            break;
 800212c:	e069      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0x24e>
              pllvco = (float_t)0;
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002134:	e065      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	ee07 3a90 	vmov	s15, r3
 800213c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002140:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8002278 <HAL_RCC_GetSysClockFreq+0x2c4>
 8002144:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002148:	4b46      	ldr	r3, [pc, #280]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800214a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002150:	ee07 3a90 	vmov	s15, r3
 8002154:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002158:	ed97 6a04 	vldr	s12, [r7, #16]
 800215c:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002274 <HAL_RCC_GetSysClockFreq+0x2c0>
 8002160:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002164:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002168:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800216c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002174:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8002178:	e043      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	ee07 3a90 	vmov	s15, r3
 8002180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002184:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800227c <HAL_RCC_GetSysClockFreq+0x2c8>
 8002188:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800218c:	4b35      	ldr	r3, [pc, #212]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800218e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002194:	ee07 3a90 	vmov	s15, r3
 8002198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800219c:	ed97 6a04 	vldr	s12, [r7, #16]
 80021a0:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002274 <HAL_RCC_GetSysClockFreq+0x2c0>
 80021a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80021b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 80021bc:	e021      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0x24e>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	ee07 3a90 	vmov	s15, r3
 80021c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021c8:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002278 <HAL_RCC_GetSysClockFreq+0x2c4>
 80021cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021d0:	4b24      	ldr	r3, [pc, #144]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80021d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021d8:	ee07 3a90 	vmov	s15, r3
 80021dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021e0:	ed97 6a04 	vldr	s12, [r7, #16]
 80021e4:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8002274 <HAL_RCC_GetSysClockFreq+0x2c0>
 80021e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80021f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8002200:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVP) >> RCC_PLL1DIVR1_DIVP_Pos) + 1U) ;
 8002202:	4b18      	ldr	r3, [pc, #96]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	0a5b      	lsrs	r3, r3, #9
 8002208:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800220c:	3301      	adds	r3, #1
 800220e:	60bb      	str	r3, [r7, #8]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	ee07 3a90 	vmov	s15, r3
 8002216:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800221a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800221e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002226:	ee17 3a90 	vmov	r3, s15
 800222a:	623b      	str	r3, [r7, #32]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800222c:	e005      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	623b      	str	r3, [r7, #32]
      break;
 8002232:	e002      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x286>

    default:
      sysclockfreq = CSI_VALUE;
 8002234:	4b0d      	ldr	r3, [pc, #52]	@ (800226c <HAL_RCC_GetSysClockFreq+0x2b8>)
 8002236:	623b      	str	r3, [r7, #32]
      break;
 8002238:	bf00      	nop
  }

  prescaler = RCC->CDCFGR & RCC_CDCFGR_CPRE;
 800223a:	4b0a      	ldr	r3, [pc, #40]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	607b      	str	r3, [r7, #4]
  if (prescaler >= 8U)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b07      	cmp	r3, #7
 8002248:	d905      	bls.n	8002256 <HAL_RCC_GetSysClockFreq+0x2a2>
  {
    sysclockfreq = sysclockfreq >> (prescaler - RCC_CDCFGR_CPRE_3 + 1U);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3b07      	subs	r3, #7
 800224e:	6a3a      	ldr	r2, [r7, #32]
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
 8002254:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8002256:	6a3b      	ldr	r3, [r7, #32]
}
 8002258:	4618      	mov	r0, r3
 800225a:	372c      	adds	r7, #44	@ 0x2c
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	58024400 	.word	0x58024400
 8002268:	03d09000 	.word	0x03d09000
 800226c:	003d0900 	.word	0x003d0900
 8002270:	016e3600 	.word	0x016e3600
 8002274:	46000000 	.word	0x46000000
 8002278:	4a742400 	.word	0x4a742400
 800227c:	4bb71b00 	.word	0x4bb71b00

08002280 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  const uint8_t AHBPrescTable[8] = {1U, 2U, 3U, 4U, 6U, 7U, 8U, 9U};
 8002286:	4a10      	ldr	r2, [pc, #64]	@ (80022c8 <HAL_RCC_GetHCLKFreq+0x48>)
 8002288:	463b      	mov	r3, r7
 800228a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800228e:	e883 0003 	stmia.w	r3, {r0, r1}

  /* SysClk */
  clock = HAL_RCC_GetSysClockFreq();
 8002292:	f7ff fe8f 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8002296:	60f8      	str	r0, [r7, #12]
  /* Bus matrix divider */
  prescaler = (RCC->BMCFGR & RCC_BMCFGR_BMPRE) >> RCC_BMCFGR_BMPRE_Pos;
 8002298:	4b0c      	ldr	r3, [pc, #48]	@ (80022cc <HAL_RCC_GetHCLKFreq+0x4c>)
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	f003 030f 	and.w	r3, r3, #15
 80022a0:	60bb      	str	r3, [r7, #8]
  if (prescaler >= 8U)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b07      	cmp	r3, #7
 80022a6:	d909      	bls.n	80022bc <HAL_RCC_GetHCLKFreq+0x3c>
  {
    clock = clock >> AHBPrescTable[prescaler - 8U];
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	3b08      	subs	r3, #8
 80022ac:	3310      	adds	r3, #16
 80022ae:	443b      	add	r3, r7
 80022b0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80022b4:	461a      	mov	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	40d3      	lsrs	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]
  }
  return (clock);
 80022bc:	68fb      	ldr	r3, [r7, #12]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	08007184 	.word	0x08007184
 80022cc:	58024400 	.word	0x58024400

080022d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022d8:	2300      	movs	r3, #0
 80022da:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022dc:	2300      	movs	r3, #0
 80022de:	75bb      	strb	r3, [r7, #22]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 8081 	beq.w	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022ee:	4b8c      	ldr	r3, [pc, #560]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80022f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022f6:	613b      	str	r3, [r7, #16]

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d029      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x82>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	429a      	cmp	r2, r3
 800230a:	d022      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800230c:	4b85      	ldr	r3, [pc, #532]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a84      	ldr	r2, [pc, #528]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002312:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002316:	6013      	str	r3, [r2, #0]

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002318:	4b82      	ldr	r3, [pc, #520]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d102      	bne.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      {
        ret = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	75fb      	strb	r3, [r7, #23]
 8002328:	e013      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x82>
      }
      else
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        /* excepted the RTC clock source selection that will be changed */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800232a:	4b7d      	ldr	r3, [pc, #500]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800232c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800232e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002332:	613b      	str	r3, [r7, #16]
        __HAL_RCC_BACKUPRESET_FORCE();
 8002334:	4b7a      	ldr	r3, [pc, #488]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002338:	4a79      	ldr	r2, [pc, #484]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800233a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800233e:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002340:	4b77      	ldr	r3, [pc, #476]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002344:	4a76      	ldr	r2, [pc, #472]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800234a:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the content of BDCR register */
        WRITE_REG(RCC->BDCR, tmpreg);
 800234c:	4a74      	ldr	r2, [pc, #464]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	6713      	str	r3, [r2, #112]	@ 0x70
      }
    }

    if (ret == HAL_OK)
 8002352:	7dfb      	ldrb	r3, [r7, #23]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d149      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800235c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002360:	d115      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0xbe>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002362:	f7fe f9f9 	bl	8000758 <HAL_GetTick>
 8002366:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002368:	e00b      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236a:	f7fe f9f5 	bl	8000758 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002378:	4293      	cmp	r3, r2
 800237a:	d902      	bls.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0xb2>
          {
            ret = HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	75fb      	strb	r3, [r7, #23]
            break;
 8002380:	e005      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0xbe>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002382:	4b67      	ldr	r3, [pc, #412]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0ed      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x9a>
          }
        }
      }

      if (ret == HAL_OK)
 800238e:	7dfb      	ldrb	r3, [r7, #23]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d128      	bne.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002398:	f403 337c 	and.w	r3, r3, #258048	@ 0x3f000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00c      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0xea>
 80023a0:	4b5f      	ldr	r3, [pc, #380]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023ac:	0919      	lsrs	r1, r3, #4
 80023ae:	4b5e      	ldr	r3, [pc, #376]	@ (8002528 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023b0:	400b      	ands	r3, r1
 80023b2:	495b      	ldr	r1, [pc, #364]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	610b      	str	r3, [r1, #16]
 80023b8:	e005      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 80023ba:	4b59      	ldr	r3, [pc, #356]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	4a58      	ldr	r2, [pc, #352]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80023c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80023c4:	6113      	str	r3, [r2, #16]
 80023c6:	4b56      	ldr	r3, [pc, #344]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80023c8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023d2:	4953      	ldr	r1, [pc, #332]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	670b      	str	r3, [r1, #112]	@ 0x70
        __HAL_RCC_RTC_ENABLE();
 80023d8:	4b51      	ldr	r3, [pc, #324]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80023da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023dc:	4a50      	ldr	r2, [pc, #320]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80023de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80023e4:	e004      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023e6:	7dfb      	ldrb	r3, [r7, #23]
 80023e8:	75bb      	strb	r3, [r7, #22]
 80023ea:	e001      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023ec:	7dfb      	ldrb	r3, [r7, #23]
 80023ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d030      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b03      	cmp	r3, #3
 8002402:	d819      	bhi.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002404:	a201      	add	r2, pc, #4	@ (adr r2, 800240c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240a:	bf00      	nop
 800240c:	0800243f 	.word	0x0800243f
 8002410:	0800241d 	.word	0x0800241d
 8002414:	0800242b 	.word	0x0800242b
 8002418:	0800243f 	.word	0x0800243f
      case RCC_FMCCLKSOURCE_HCLK:   /* HCLK  clock selected as FMC kernel peripheral clock */
        break;

      case RCC_FMCCLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for FMC kernel */
        /* Enable FMC kernel clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 800241c:	4b40      	ldr	r3, [pc, #256]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800241e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002420:	4a3f      	ldr	r2, [pc, #252]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002422:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002426:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
 8002428:	e00a      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x170>

      case RCC_FMCCLKSOURCE_PLL2R:  /* PLL2_R is used as clock source for FMC kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
 800242a:	4b3d      	ldr	r3, [pc, #244]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800242c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242e:	4a3c      	ldr	r2, [pc, #240]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002430:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002434:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
 8002436:	e003      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x170>
      case RCC_FMCCLKSOURCE_HSI:   /* HSI oscillator is used as clock source for FMC kernel */
        /* FMC kernel clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	75fb      	strb	r3, [r7, #23]
        break;
 800243c:	e000      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x170>
        break;
 800243e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002440:	7dfb      	ldrb	r3, [r7, #23]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d109      	bne.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Set the source of FMC kernel clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002446:	4b36      	ldr	r3, [pc, #216]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800244a:	f023 0203 	bic.w	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4933      	ldr	r1, [pc, #204]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002454:	4313      	orrs	r3, r2
 8002456:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002458:	e001      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x18e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800245a:	7dfb      	ldrb	r3, [r7, #23]
 800245c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d02a      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));

    switch (PeriphClkInit->Xspi1ClockSelection)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b20      	cmp	r3, #32
 8002470:	d00c      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
 8002472:	2b20      	cmp	r3, #32
 8002474:	d811      	bhi.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8002476:	2b00      	cmp	r3, #0
 8002478:	d012      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800247a:	2b10      	cmp	r3, #16
 800247c:	d10d      	bne.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      case RCC_XSPI1CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi1 */
        /* Nothing to do */
        break;

      case RCC_XSPI1CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 800247e:	4b28      	ldr	r3, [pc, #160]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002482:	4a27      	ldr	r2, [pc, #156]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002484:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002488:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
 800248a:	e00a      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      case RCC_XSPI1CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 800248c:	4b24      	ldr	r3, [pc, #144]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800248e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002490:	4a23      	ldr	r2, [pc, #140]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002492:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002496:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
 8002498:	e003      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      default:
        ret = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	75fb      	strb	r3, [r7, #23]
        break;
 800249e:	e000      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
        break;
 80024a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024a2:	7dfb      	ldrb	r3, [r7, #23]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d109      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      /* Configure the XSPI1 clock source */
      __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
 80024a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80024aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	491a      	ldr	r1, [pc, #104]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80024ba:	e001      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
 80024be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d031      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));

    switch (PeriphClkInit->Xspi2ClockSelection)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	2b80      	cmp	r3, #128	@ 0x80
 80024d2:	d00c      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80024d4:	2b80      	cmp	r3, #128	@ 0x80
 80024d6:	d811      	bhi.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x22c>
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d012      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x232>
 80024dc:	2b40      	cmp	r3, #64	@ 0x40
 80024de:	d10d      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x22c>
      case RCC_XSPI2CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi2 */
        /* Nothing to do */
        break;

      case RCC_XSPI2CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 80024e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80024e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80024e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80024ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
 80024ec:	e00a      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x234>

      case RCC_XSPI2CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 80024ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80024f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f2:	4a0b      	ldr	r2, [pc, #44]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80024f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
 80024fa:	e003      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x234>

      default:
        ret = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	75fb      	strb	r3, [r7, #23]
        break;
 8002500:	e000      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x234>
        break;
 8002502:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002504:	7dfb      	ldrb	r3, [r7, #23]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d110      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* Configure the XSPI2 clock source */
      __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
 800250a:	4b05      	ldr	r3, [pc, #20]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800250c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	4902      	ldr	r1, [pc, #8]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002518:	4313      	orrs	r3, r2
 800251a:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800251c:	e008      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x260>
 800251e:	bf00      	nop
 8002520:	58024400 	.word	0x58024400
 8002524:	58024800 	.word	0x58024800
 8002528:	0fffffcf 	.word	0x0fffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800252c:	7dfb      	ldrb	r3, [r7, #23]
 800252e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800253c:	4b93      	ldr	r3, [pc, #588]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800253e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002540:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	4990      	ldr	r1, [pc, #576]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800254a:	4313      	orrs	r3, r2
 800254c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*------------------------------------- SDMMC12 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC12) == RCC_PERIPHCLK_SDMMC12)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d026      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002562:	2b04      	cmp	r3, #4
 8002564:	d007      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002566:	e00d      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      case RCC_SDMMC12CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 8002568:	4b88      	ldr	r3, [pc, #544]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800256a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256c:	4a87      	ldr	r2, [pc, #540]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800256e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002572:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
 8002574:	e009      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      case RCC_SDMMC12CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 8002576:	4b85      	ldr	r3, [pc, #532]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257a:	4a84      	ldr	r2, [pc, #528]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800257c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002580:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
 8002582:	e002      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      default:
        ret = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	75fb      	strb	r3, [r7, #23]
        break;
 8002588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800258a:	7dfb      	ldrb	r3, [r7, #23]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d109      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
    {
      /* Set the source of SDMMC12 clock*/
      __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
 8002590:	4b7e      	ldr	r3, [pc, #504]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002594:	f023 0204 	bic.w	r2, r3, #4
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259c:	497b      	ldr	r1, [pc, #492]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80025a2:	e001      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025a4:	7dfb      	ldrb	r3, [r7, #23]
 80025a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d02e      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025bc:	d019      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x322>
 80025be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025c2:	d813      	bhi.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80025c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025cc:	d007      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x30e>
 80025ce:	e00d      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x31c>
    {

      case RCC_ADCCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for ADC */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 80025d0:	4b6e      	ldr	r3, [pc, #440]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80025d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d4:	4a6d      	ldr	r2, [pc, #436]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80025d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025da:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
 80025dc:	e00a      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x324>

      case RCC_ADCCLKSOURCE_PLL3R: /* PLL3_R is used as clock source for ADC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 80025de:	4b6b      	ldr	r3, [pc, #428]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80025e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e2:	4a6a      	ldr	r2, [pc, #424]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80025e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80025e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
 80025ea:	e003      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x324>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	75fb      	strb	r3, [r7, #23]
        break;
 80025f0:	e000      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x324>
        break;
 80025f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025fa:	4b64      	ldr	r3, [pc, #400]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80025fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	4961      	ldr	r1, [pc, #388]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002608:	4313      	orrs	r3, r2
 800260a:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800260c:	e001      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x342>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800260e:	7dfb      	ldrb	r3, [r7, #23]
 8002610:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0320 	and.w	r3, r3, #32
 800261a:	2b00      	cmp	r3, #0
 800261c:	d03f      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    switch (PeriphClkInit->Adf1ClockSelection)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8002626:	d02a      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002628:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800262c:	d824      	bhi.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800262e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002632:	d024      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002634:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002638:	d81e      	bhi.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800263a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800263e:	d01e      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002640:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002644:	d818      	bhi.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8002646:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800264a:	d00e      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 800264c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002650:	d812      	bhi.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8002652:	2b00      	cmp	r3, #0
 8002654:	d013      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002656:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800265a:	d10d      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      case RCC_ADF1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for ADF1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 800265c:	4b4b      	ldr	r3, [pc, #300]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800265e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002660:	4a4a      	ldr	r2, [pc, #296]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002662:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002666:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
 8002668:	e00a      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x3b0>

      case RCC_ADF1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for ADF1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 800266a:	4b48      	ldr	r3, [pc, #288]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800266c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266e:	4a47      	ldr	r2, [pc, #284]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002670:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002674:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
 8002676:	e003      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      case RCC_ADF1CLKSOURCE_HSI:    /* HSI is used as clock source for ADF1 */
        /* ADF1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	75fb      	strb	r3, [r7, #23]
        break;
 800267c:	e000      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        break;
 800267e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002680:	7dfb      	ldrb	r3, [r7, #23]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d109      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    {
      /* Set the source of ADF1 clock*/
      __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
 8002686:	4b41      	ldr	r3, [pc, #260]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800268a:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	493e      	ldr	r1, [pc, #248]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002694:	4313      	orrs	r3, r2
 8002696:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002698:	e001      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800269a:	7dfb      	ldrb	r3, [r7, #23]
 800269c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- CEC configuration ---------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d008      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80026aa:	4b38      	ldr	r3, [pc, #224]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80026ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026ae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	4935      	ldr	r1, [pc, #212]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	650b      	str	r3, [r1, #80]	@ 0x50
  }

  /*---------------------- ETH1 REF configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1REF) == RCC_PERIPHCLK_ETH1REF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d008      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1REFCLKSOURCE(PeriphClkInit->Eth1RefClockSelection));

    /* Configure the ETH1 REF clock source */
    __HAL_RCC_ETH1REF_CONFIG(PeriphClkInit->Eth1RefClockSelection);
 80026c8:	4b30      	ldr	r3, [pc, #192]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80026ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	492d      	ldr	r1, [pc, #180]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*---------------------- ETH1PHY configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d020      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYCLKSOURCE(PeriphClkInit->Eth1PhyClockSelection));

    switch (PeriphClkInit->Eth1PhyClockSelection)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00c      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x438>
 80026ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80026f2:	d106      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_ETH1PHYCLKSOURCE_HSE:    /* HSE is used as clock source for ETH PHY */
        /* ETH PHY clock source configuration done later after clock selection check */
        break;

      case RCC_ETH1PHYCLKSOURCE_PLL3S:  /* PLL3_S is used as clock source for ETH PHY */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_SCLK);
 80026f4:	4b25      	ldr	r3, [pc, #148]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80026f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f8:	4a24      	ldr	r2, [pc, #144]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80026fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80026fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ETH PHY clock source configuration done later after clock selection check */
        break;
 8002700:	e003      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x43a>

      default:
        ret = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	75fb      	strb	r3, [r7, #23]
        break;
 8002706:	e000      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x43a>
        break;
 8002708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800270a:	7dfb      	ldrb	r3, [r7, #23]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d109      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of ETH PHY clock*/
      __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyClockSelection);
 8002710:	4b1e      	ldr	r3, [pc, #120]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002714:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271c:	491b      	ldr	r1, [pc, #108]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800271e:	4313      	orrs	r3, r2
 8002720:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002722:	e001      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002724:	7dfb      	ldrb	r3, [r7, #23]
 8002726:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002730:	2b00      	cmp	r3, #0
 8002732:	d02f      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002738:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800273c:	d00e      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800273e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002742:	d812      	bhi.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8002744:	2b00      	cmp	r3, #0
 8002746:	d013      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002748:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800274c:	d10d      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x49a>
    {
      case RCC_FDCANCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for FDCAN kernel */
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 800274e:	4b0f      	ldr	r3, [pc, #60]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002752:	4a0e      	ldr	r2, [pc, #56]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002754:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002758:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800275a:	e00a      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x4a2>

      case RCC_FDCANCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for FDCAN kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 800275c:	4b0b      	ldr	r3, [pc, #44]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800275e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002760:	4a0a      	ldr	r2, [pc, #40]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002762:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002766:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002768:	e003      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      case RCC_FDCANCLKSOURCE_HSE:   /* HSE is used as clock source for FDCAN kernel */
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	75fb      	strb	r3, [r7, #23]
        break;
 800276e:	e000      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
        break;
 8002770:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002772:	7dfb      	ldrb	r3, [r7, #23]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10b      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002778:	4b04      	ldr	r3, [pc, #16]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800277a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800277c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002784:	4901      	ldr	r1, [pc, #4]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002786:	4313      	orrs	r3, r2
 8002788:	650b      	str	r3, [r1, #80]	@ 0x50
 800278a:	e003      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 800278c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002790:	7dfb      	ldrb	r3, [r7, #23]
 8002792:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1_I3C1) == RCC_PERIPHCLK_I2C1_I3C1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800279c:	2b00      	cmp	r3, #0
 800279e:	d02c      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1_I3C1CLKSOURCE(PeriphClkInit->I2c1_I3c1ClockSelection));

    switch (PeriphClkInit->I2c1_I3c1ClockSelection)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80027a8:	d017      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80027aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80027ae:	d811      	bhi.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80027b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027b4:	d011      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80027b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027ba:	d80b      	bhi.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00c      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80027c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027c4:	d106      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      case RCC_I2C1_I3C1CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C1/I3C1*/
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 80027c6:	4b97      	ldr	r3, [pc, #604]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80027c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ca:	4a96      	ldr	r2, [pc, #600]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80027cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80027d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;
 80027d2:	e003      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_I2C1_I3C1CLKSOURCE_CSI:     /* CSI is used as clock source for I2C1/I3C1*/
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	75fb      	strb	r3, [r7, #23]
        break;
 80027d8:	e000      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80027da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x526>
    {
      /* Set the source of I2C1/I3C1 clock*/
      __HAL_RCC_I2C1_I3C1_CONFIG(PeriphClkInit->I2c1_I3c1ClockSelection);
 80027e2:	4b90      	ldr	r3, [pc, #576]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80027e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027e6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ee:	498d      	ldr	r1, [pc, #564]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	650b      	str	r3, [r1, #80]	@ 0x50
 80027f4:	e001      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x52a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027f6:	7dfb      	ldrb	r3, [r7, #23]
 80027f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C2/I2C3 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C23) == RCC_PERIPHCLK_I2C23)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002802:	2b00      	cmp	r3, #0
 8002804:	d02c      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C23CLKSOURCE(PeriphClkInit->I2c23ClockSelection));

    switch (PeriphClkInit->I2c23ClockSelection)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800280e:	d017      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002810:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002814:	d811      	bhi.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8002816:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800281a:	d011      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800281c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002820:	d80b      	bhi.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00c      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002826:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800282a:	d106      	bne.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x56a>
    {
      case RCC_I2C23CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C2/I2C3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 800282c:	4b7d      	ldr	r3, [pc, #500]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800282e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002830:	4a7c      	ldr	r2, [pc, #496]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002832:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002836:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;
 8002838:	e003      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x572>
      case RCC_I2C23CLKSOURCE_CSI:     /* CSI is used as clock source for I2C2/I2C3 */
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	75fb      	strb	r3, [r7, #23]
        break;
 800283e:	e000      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x572>
        break;
 8002840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002842:	7dfb      	ldrb	r3, [r7, #23]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d109      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Set the source of I2C2/I2C3 clock*/
      __HAL_RCC_I2C23_CONFIG(PeriphClkInit->I2c23ClockSelection);
 8002848:	4b76      	ldr	r3, [pc, #472]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800284a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800284c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002854:	4973      	ldr	r1, [pc, #460]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002856:	4313      	orrs	r3, r2
 8002858:	650b      	str	r3, [r1, #80]	@ 0x50
 800285a:	e001      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x590>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800285c:	7dfb      	ldrb	r3, [r7, #23]
 800285e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d045      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002870:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002874:	d02a      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8002876:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800287a:	d824      	bhi.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800287c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002880:	d026      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8002882:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002886:	d81e      	bhi.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8002888:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800288c:	d022      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800288e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002892:	d818      	bhi.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8002894:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002898:	d00e      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 800289a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800289e:	d812      	bhi.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d019      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80028a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028a8:	d10d      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      case RCC_LPTIM1CLKSOURCE_PCLK1: /* PCLK1 as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 80028aa:	4b5e      	ldr	r3, [pc, #376]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80028ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ae:	4a5d      	ldr	r2, [pc, #372]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80028b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80028b6:	e010      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x60a>

      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for LPTIM1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 80028b8:	4b5a      	ldr	r3, [pc, #360]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80028ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028bc:	4a59      	ldr	r2, [pc, #356]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80028be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80028c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80028c4:	e009      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x60a>
        /* HSI, HSE, or CSI oscillator is used as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	75fb      	strb	r3, [r7, #23]
        break;
 80028ca:	e006      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 80028cc:	bf00      	nop
 80028ce:	e004      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 80028d0:	bf00      	nop
 80028d2:	e002      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 80028d4:	bf00      	nop
 80028d6:	e000      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 80028d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028da:	7dfb      	ldrb	r3, [r7, #23]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d109      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x624>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028e0:	4b50      	ldr	r3, [pc, #320]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80028e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028e4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ec:	494d      	ldr	r1, [pc, #308]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	650b      	str	r3, [r1, #80]	@ 0x50
 80028f2:	e001      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x628>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f4:	7dfb      	ldrb	r3, [r7, #23]
 80028f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2/LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM23) == RCC_PERIPHCLK_LPTIM23)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d045      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
  {
    switch (PeriphClkInit->Lptim23ClockSelection)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002908:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800290c:	d02a      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x694>
 800290e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002912:	d824      	bhi.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8002914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002918:	d026      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x698>
 800291a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800291e:	d81e      	bhi.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8002920:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002924:	d022      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x69c>
 8002926:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800292a:	d818      	bhi.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800292c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002930:	d00e      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8002932:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002936:	d812      	bhi.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8002938:	2b00      	cmp	r3, #0
 800293a:	d019      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 800293c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002940:	d10d      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_LPTIM23CLKSOURCE_PCLK4: /* PCLK4 as clock source for LPTIM2/LPTIM3 */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM23CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002942:	4b38      	ldr	r3, [pc, #224]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002946:	4a37      	ldr	r2, [pc, #220]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800294c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
 800294e:	e010      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x6a2>

      case RCC_LPTIM23CLKSOURCE_PLL3R: /* PLL3_R is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002950:	4b34      	ldr	r3, [pc, #208]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002954:	4a33      	ldr	r2, [pc, #204]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002956:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800295a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
 800295c:	e009      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	75fb      	strb	r3, [r7, #23]
        break;
 8002962:	e006      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8002964:	bf00      	nop
 8002966:	e004      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8002968:	bf00      	nop
 800296a:	e002      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 800296c:	bf00      	nop
 800296e:	e000      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8002970:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002972:	7dfb      	ldrb	r3, [r7, #23]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d109      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      /* Set the source of LPTIM2/LPTIM3 clock*/
      __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
 8002978:	4b2a      	ldr	r3, [pc, #168]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800297a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002984:	4927      	ldr	r1, [pc, #156]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002986:	4313      	orrs	r3, r2
 8002988:	658b      	str	r3, [r1, #88]	@ 0x58
 800298a:	e001      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800298c:	7dfb      	ldrb	r3, [r7, #23]
 800298e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM4/LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM45) == RCC_PERIPHCLK_LPTIM45)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d047      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x75c>
  {
    switch (PeriphClkInit->Lptim45ClockSelection)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80029a4:	d02a      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80029a6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80029aa:	d824      	bhi.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x726>
 80029ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029b0:	d026      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x730>
 80029b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029b6:	d81e      	bhi.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x726>
 80029b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80029bc:	d022      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x734>
 80029be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80029c2:	d818      	bhi.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x726>
 80029c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029c8:	d00e      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x718>
 80029ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029ce:	d812      	bhi.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x726>
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d019      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x738>
 80029d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029d8:	d10d      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x726>
      case RCC_LPTIM45CLKSOURCE_PCLK4:  /* PCLK4 as clock source for LPTIM4/LPTIM5 */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM45CLKSOURCE_PLL2P: /* PLL2 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 80029da:	4b12      	ldr	r3, [pc, #72]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80029dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029de:	4a11      	ldr	r2, [pc, #68]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
 80029e6:	e010      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x73a>

      case RCC_LPTIM45CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 80029e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80029ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80029ee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80029f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
 80029f4:	e009      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x73a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM4/LPTIM5 clock */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	75fb      	strb	r3, [r7, #23]
        break;
 80029fa:	e006      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 80029fc:	bf00      	nop
 80029fe:	e004      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8002a00:	bf00      	nop
 8002a02:	e002      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8002a04:	bf00      	nop
 8002a06:	e000      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8002a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a0a:	7dfb      	ldrb	r3, [r7, #23]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10b      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x758>
    {
      /* Set the source of LPTIM4/LPTIM5 clock */
      __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
 8002a10:	4b04      	ldr	r3, [pc, #16]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a14:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a1c:	4901      	ldr	r1, [pc, #4]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	658b      	str	r3, [r1, #88]	@ 0x58
 8002a22:	e003      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8002a24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
 8002a2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d034      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3c:	2b05      	cmp	r3, #5
 8002a3e:	d81d      	bhi.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8002a40:	a201      	add	r2, pc, #4	@ (adr r2, 8002a48 <HAL_RCCEx_PeriphCLKConfig+0x778>)
 8002a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a46:	bf00      	nop
 8002a48:	08002a83 	.word	0x08002a83
 8002a4c:	08002a61 	.word	0x08002a61
 8002a50:	08002a6f 	.word	0x08002a6f
 8002a54:	08002a83 	.word	0x08002a83
 8002a58:	08002a83 	.word	0x08002a83
 8002a5c:	08002a83 	.word	0x08002a83
      case RCC_LPUART1CLKSOURCE_PCLK4: /* PCLK4 selected as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002a60:	4b91      	ldr	r3, [pc, #580]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a64:	4a90      	ldr	r2, [pc, #576]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002a66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002a6c:	e00a      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x7b4>

      case RCC_LPUART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002a6e:	4b8e      	ldr	r3, [pc, #568]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a72:	4a8d      	ldr	r2, [pc, #564]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a78:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002a7a:	e003      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	75fb      	strb	r3, [r7, #23]
        break;
 8002a80:	e000      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        break;
 8002a82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a84:	7dfb      	ldrb	r3, [r7, #23]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d109      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a8a:	4b87      	ldr	r3, [pc, #540]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8e:	f023 0207 	bic.w	r2, r3, #7
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	4984      	ldr	r1, [pc, #528]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	658b      	str	r3, [r1, #88]	@ 0x58
 8002a9c:	e001      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a9e:	7dfb      	ldrb	r3, [r7, #23]
 8002aa0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x7ea>
  {
    /* LTDC internally connected to PLL3_R output clock */
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002aae:	4b7e      	ldr	r3, [pc, #504]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab2:	4a7d      	ldr	r2, [pc, #500]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002ab4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002ab8:	62d3      	str	r3, [r2, #44]	@ 0x2c
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d021      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x83a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));

    switch (PeriphClkInit->PssiClockSelection)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x806>
 8002ace:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ad2:	d00a      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8002ad4:	e006      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      case RCC_PSSICLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for PSSI */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002ad6:	4b74      	ldr	r3, [pc, #464]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ada:	4a73      	ldr	r2, [pc, #460]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002adc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002ae0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* PSSI clock source configuration done later after clock selection check */
        break;
 8002ae2:	e003      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x81c>
        /* HSI, HSE, or CSI oscillator is used as source of PSSI clock */
        /* PSSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	75fb      	strb	r3, [r7, #23]
        break;
 8002ae8:	e000      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8002aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aec:	7dfb      	ldrb	r3, [r7, #23]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d109      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x836>
    {
      /* Set the source of PSSI clock*/
      __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
 8002af2:	4b6d      	ldr	r3, [pc, #436]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af6:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002afe:	496a      	ldr	r1, [pc, #424]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002b04:	e001      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x83a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b06:	7dfb      	ldrb	r3, [r7, #23]
 8002b08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d043      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x8ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b1e:	d02c      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 8002b20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b24:	d826      	bhi.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8002b26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b2a:	d028      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 8002b2c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b30:	d820      	bhi.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8002b32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b36:	d016      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x896>
 8002b38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b3c:	d81a      	bhi.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8002b42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b46:	d007      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8002b48:	e014      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI1 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002b4a:	4b57      	ldr	r3, [pc, #348]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4e:	4a56      	ldr	r2, [pc, #344]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002b50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b54:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b56:	e013      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002b58:	4b53      	ldr	r3, [pc, #332]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5c:	4a52      	ldr	r2, [pc, #328]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b62:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b64:	e00c      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002b66:	4b50      	ldr	r3, [pc, #320]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6a:	4a4f      	ldr	r2, [pc, #316]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002b6c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002b70:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b72:	e005      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	75fb      	strb	r3, [r7, #23]
        break;
 8002b78:	e002      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
 8002b7a:	bf00      	nop
 8002b7c:	e000      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
 8002b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b80:	7dfb      	ldrb	r3, [r7, #23]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b86:	4b48      	ldr	r3, [pc, #288]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b92:	4945      	ldr	r1, [pc, #276]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	654b      	str	r3, [r1, #84]	@ 0x54
 8002b98:	e001      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x8ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b9a:	7dfb      	ldrb	r3, [r7, #23]
 8002b9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d04b      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x972>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bae:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8002bb2:	d032      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8002bb4:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8002bb8:	d82c      	bhi.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8002bba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bbe:	d02e      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8002bc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bc4:	d826      	bhi.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8002bc6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002bca:	d02a      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8002bcc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002bd0:	d820      	bhi.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8002bd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bd6:	d016      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x936>
 8002bd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bdc:	d81a      	bhi.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x91a>
 8002be2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002be6:	d007      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x928>
 8002be8:	e014      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x944>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI2 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002bea:	4b2f      	ldr	r3, [pc, #188]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bee:	4a2e      	ldr	r2, [pc, #184]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002bf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bf4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002bf6:	e015      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfc:	4a2a      	ldr	r2, [pc, #168]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002bfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c02:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002c04:	e00e      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI2 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002c06:	4b28      	ldr	r3, [pc, #160]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0a:	4a27      	ldr	r2, [pc, #156]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002c0c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002c10:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002c12:	e007      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x954>
      case RCC_SAI2CLKSOURCE_SPDIF: /* SPDIF clock is used as source of SAI2 clock */
        /* SAI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	75fb      	strb	r3, [r7, #23]
        break;
 8002c18:	e004      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 8002c1a:	bf00      	nop
 8002c1c:	e002      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 8002c1e:	bf00      	nop
 8002c20:	e000      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 8002c22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c24:	7dfb      	ldrb	r3, [r7, #23]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d109      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x96e>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c2e:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c36:	491c      	ldr	r1, [pc, #112]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	654b      	str	r3, [r1, #84]	@ 0x54
 8002c3c:	e001      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x972>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c3e:	7dfb      	ldrb	r3, [r7, #23]
 8002c40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPDIFRX configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d03e      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c52:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002c56:	d029      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 8002c58:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002c5c:	d820      	bhi.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002c5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c62:	d016      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8002c64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c68:	d81a      	bhi.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8002c6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c72:	d007      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 8002c74:	e014      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for SPDIFRX */
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002c76:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7a:	4a0b      	ldr	r2, [pc, #44]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002c7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c80:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c82:	e014      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL2R: /* PLL2_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002c84:	4b08      	ldr	r3, [pc, #32]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c88:	4a07      	ldr	r2, [pc, #28]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002c8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c90:	e00d      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8002c92:	4b05      	ldr	r3, [pc, #20]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c96:	4a04      	ldr	r2, [pc, #16]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8002c98:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002c9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c9e:	e006      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x9de>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	75fb      	strb	r3, [r7, #23]
        break;
 8002ca4:	e003      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002ca6:	bf00      	nop
 8002ca8:	58024400 	.word	0x58024400
        break;
 8002cac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cae:	7dfb      	ldrb	r3, [r7, #23]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d109      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
    {
      /* Set the source of SPDIFRX clock */
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002cb4:	4b8e      	ldr	r3, [pc, #568]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cb8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cc0:	498b      	ldr	r1, [pc, #556]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	650b      	str	r3, [r1, #80]	@ 0x50
 8002cc6:	e001      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
 8002cca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d043      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xa90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ce0:	d02c      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8002ce2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ce6:	d826      	bhi.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8002ce8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cec:	d028      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002cee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cf2:	d820      	bhi.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8002cf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cf8:	d016      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8002cfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cfe:	d81a      	bhi.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 8002d04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d08:	d007      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xa4a>
 8002d0a:	e014      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI1 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002d0c:	4b78      	ldr	r3, [pc, #480]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d10:	4a77      	ldr	r2, [pc, #476]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d16:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8002d18:	e013      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002d1a:	4b75      	ldr	r3, [pc, #468]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1e:	4a74      	ldr	r2, [pc, #464]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d24:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8002d26:	e00c      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002d28:	4b71      	ldr	r3, [pc, #452]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2c:	4a70      	ldr	r2, [pc, #448]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002d2e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002d32:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8002d34:	e005      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0xa72>
      case RCC_SPI1CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	75fb      	strb	r3, [r7, #23]
        break;
 8002d3a:	e002      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
 8002d3c:	bf00      	nop
 8002d3e:	e000      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
 8002d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d42:	7dfb      	ldrb	r3, [r7, #23]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d109      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
      /* Set the source of SPI1 clock*/
      __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 8002d48:	4b69      	ldr	r3, [pc, #420]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d54:	4966      	ldr	r1, [pc, #408]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	654b      	str	r3, [r1, #84]	@ 0x54
 8002d5a:	e001      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xa90>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d5c:	7dfb      	ldrb	r3, [r7, #23]
 8002d5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI2/SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI23) == RCC_PERIPHCLK_SPI23)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d03c      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d70:	2b40      	cmp	r3, #64	@ 0x40
 8002d72:	d026      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8002d74:	2b40      	cmp	r3, #64	@ 0x40
 8002d76:	d821      	bhi.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8002d78:	2b30      	cmp	r3, #48	@ 0x30
 8002d7a:	d024      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8002d7c:	2b30      	cmp	r3, #48	@ 0x30
 8002d7e:	d81d      	bhi.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d014      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0xade>
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	d819      	bhi.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0xac2>
 8002d8c:	2b10      	cmp	r3, #16
 8002d8e:	d007      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8002d90:	e014      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xaec>
    {
      case RCC_SPI23CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI2/SPI3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002d92:	4b57      	ldr	r3, [pc, #348]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d96:	4a56      	ldr	r2, [pc, #344]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002d98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 8002d9e:	e013      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002da0:	4b53      	ldr	r3, [pc, #332]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da4:	4a52      	ldr	r2, [pc, #328]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002da6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002daa:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 8002dac:	e00c      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8002dae:	4b50      	ldr	r3, [pc, #320]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db2:	4a4f      	ldr	r2, [pc, #316]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002db4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002db8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 8002dba:	e005      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
      case RCC_SPI23CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI2/SPI3 clock */
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	75fb      	strb	r3, [r7, #23]
        break;
 8002dc0:	e002      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8002dc2:	bf00      	nop
 8002dc4:	e000      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8002dc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dc8:	7dfb      	ldrb	r3, [r7, #23]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0xb12>
    {
      /* Set the source of SPI2/SPI3 clock*/
      __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
 8002dce:	4b48      	ldr	r3, [pc, #288]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002dd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dd2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dda:	4945      	ldr	r1, [pc, #276]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	650b      	str	r3, [r1, #80]	@ 0x50
 8002de0:	e001      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de2:	7dfb      	ldrb	r3, [r7, #23]
 8002de4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d03c      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    switch (PeriphClkInit->Spi45ClockSelection)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002df6:	2b50      	cmp	r3, #80	@ 0x50
 8002df8:	d022      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8002dfa:	2b50      	cmp	r3, #80	@ 0x50
 8002dfc:	d81d      	bhi.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8002dfe:	2b40      	cmp	r3, #64	@ 0x40
 8002e00:	d020      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002e02:	2b40      	cmp	r3, #64	@ 0x40
 8002e04:	d819      	bhi.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8002e06:	2b30      	cmp	r3, #48	@ 0x30
 8002e08:	d01e      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8002e0a:	2b30      	cmp	r3, #48	@ 0x30
 8002e0c:	d815      	bhi.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	d00c      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	d811      	bhi.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d018      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8002e1a:	2b10      	cmp	r3, #16
 8002e1c:	d10d      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xb6a>
      case RCC_SPI45CLKSOURCE_PCLK2:  /* PCLK2 as clock source for SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002e1e:	4b34      	ldr	r3, [pc, #208]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e22:	4a33      	ldr	r2, [pc, #204]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e28:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
 8002e2a:	e010      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_SPI45CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002e2c:	4b30      	ldr	r3, [pc, #192]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e30:	4a2f      	ldr	r2, [pc, #188]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002e32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e36:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
 8002e38:	e009      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
      case RCC_SPI45CLKSOURCE_HSE: /* HSE oscillator clock is used as source of SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	75fb      	strb	r3, [r7, #23]
        break;
 8002e3e:	e006      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002e40:	bf00      	nop
 8002e42:	e004      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002e44:	bf00      	nop
 8002e46:	e002      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002e48:	bf00      	nop
 8002e4a:	e000      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e4e:	7dfb      	ldrb	r3, [r7, #23]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d109      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xb98>
    {
      /* Set the source of SPI4/SPI5 clock */
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002e54:	4b26      	ldr	r3, [pc, #152]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e60:	4923      	ldr	r1, [pc, #140]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	654b      	str	r3, [r1, #84]	@ 0x54
 8002e66:	e001      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e68:	7dfb      	ldrb	r3, [r7, #23]
 8002e6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d03f      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e7c:	2b50      	cmp	r3, #80	@ 0x50
 8002e7e:	d022      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8002e80:	2b50      	cmp	r3, #80	@ 0x50
 8002e82:	d81d      	bhi.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 8002e84:	2b40      	cmp	r3, #64	@ 0x40
 8002e86:	d020      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8002e88:	2b40      	cmp	r3, #64	@ 0x40
 8002e8a:	d819      	bhi.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 8002e8c:	2b30      	cmp	r3, #48	@ 0x30
 8002e8e:	d01e      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8002e90:	2b30      	cmp	r3, #48	@ 0x30
 8002e92:	d815      	bhi.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 8002e94:	2b20      	cmp	r3, #32
 8002e96:	d00c      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d811      	bhi.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d018      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8002ea0:	2b10      	cmp	r3, #16
 8002ea2:	d10d      	bne.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
      case RCC_SPI6CLKSOURCE_PCLK4: /* PCLK4 as clock source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002ea4:	4b12      	ldr	r3, [pc, #72]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea8:	4a11      	ldr	r2, [pc, #68]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eae:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002eb0:	e010      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xc04>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb6:	4a0e      	ldr	r2, [pc, #56]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002eb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ebc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002ebe:	e009      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xc04>
      case RCC_SPI6CLKSOURCE_HSE: /* HSE oscillator is used as source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	75fb      	strb	r3, [r7, #23]
        break;
 8002ec4:	e006      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8002ec6:	bf00      	nop
 8002ec8:	e004      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8002eca:	bf00      	nop
 8002ecc:	e002      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8002ece:	bf00      	nop
 8002ed0:	e000      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8002ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ed4:	7dfb      	ldrb	r3, [r7, #23]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002eda:	4b05      	ldr	r3, [pc, #20]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ede:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ee6:	4902      	ldr	r1, [pc, #8]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	658b      	str	r3, [r1, #88]	@ 0x58
 8002eec:	e004      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8002eee:	bf00      	nop
 8002ef0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef4:	7dfb      	ldrb	r3, [r7, #23]
 8002ef6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d034      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f08:	2b05      	cmp	r3, #5
 8002f0a:	d81d      	bhi.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8002f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f14 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f12:	bf00      	nop
 8002f14:	08002f4f 	.word	0x08002f4f
 8002f18:	08002f2d 	.word	0x08002f2d
 8002f1c:	08002f3b 	.word	0x08002f3b
 8002f20:	08002f4f 	.word	0x08002f4f
 8002f24:	08002f4f 	.word	0x08002f4f
 8002f28:	08002f4f 	.word	0x08002f4f
      case RCC_USART1CLKSOURCE_PCLK2: /* PCLK2 as clock source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002f2c:	4b69      	ldr	r3, [pc, #420]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8002f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f30:	4a68      	ldr	r2, [pc, #416]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8002f32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f36:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
 8002f38:	e00a      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0xc80>

      case RCC_USART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002f3a:	4b66      	ldr	r3, [pc, #408]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8002f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3e:	4a65      	ldr	r2, [pc, #404]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8002f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f44:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
 8002f46:	e003      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0xc80>
      case RCC_USART1CLKSOURCE_LSE: /* LSE oscillator is used as source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	75fb      	strb	r3, [r7, #23]
        break;
 8002f4c:	e000      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0xc80>
        break;
 8002f4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    {
      /* Set the source of USART1 clock */
      __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f56:	4b5f      	ldr	r3, [pc, #380]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8002f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5a:	f023 0207 	bic.w	r2, r3, #7
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f62:	495c      	ldr	r1, [pc, #368]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	654b      	str	r3, [r1, #84]	@ 0x54
 8002f68:	e001      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6a:	7dfb      	ldrb	r3, [r7, #23]
 8002f6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------- USART2/USART3/UART4/UART5/UART7/UART8 Configuration --------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d033      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0xd12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART234578CLKSOURCE(PeriphClkInit->Usart234578ClockSelection));

    switch (PeriphClkInit->Usart234578ClockSelection)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7e:	2b05      	cmp	r3, #5
 8002f80:	d81c      	bhi.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8002f82:	a201      	add	r2, pc, #4	@ (adr r2, 8002f88 <HAL_RCCEx_PeriphCLKConfig+0xcb8>)
 8002f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f88:	08002fc3 	.word	0x08002fc3
 8002f8c:	08002fa1 	.word	0x08002fa1
 8002f90:	08002faf 	.word	0x08002faf
 8002f94:	08002fc3 	.word	0x08002fc3
 8002f98:	08002fc3 	.word	0x08002fc3
 8002f9c:	08002fc3 	.word	0x08002fc3
      case RCC_USART234578CLKSOURCE_PCLK1: /* PCLK1 as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002fa0:	4b4c      	ldr	r3, [pc, #304]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8002fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa4:	4a4b      	ldr	r2, [pc, #300]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8002fa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002faa:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
 8002fac:	e00a      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xcf4>

      case RCC_USART234578CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8002fae:	4b49      	ldr	r3, [pc, #292]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8002fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb2:	4a48      	ldr	r2, [pc, #288]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8002fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
 8002fba:	e003      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        /* LSE,  oscillator is used as source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	75fb      	strb	r3, [r7, #23]
        break;
 8002fc0:	e000      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        break;
 8002fc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d109      	bne.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
      /* Set the source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002fca:	4b42      	ldr	r3, [pc, #264]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8002fcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fce:	f023 0207 	bic.w	r2, r3, #7
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd6:	493f      	ldr	r1, [pc, #252]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	650b      	str	r3, [r1, #80]	@ 0x50
 8002fdc:	e001      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fde:	7dfb      	ldrb	r3, [r7, #23]
 8002fe0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBPHYC Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHYC) == RCC_PERIPHCLK_USBPHYC)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d027      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCCLKSOURCE(PeriphClkInit->UsbPhycClockSelection));

    switch (PeriphClkInit->UsbPhycClockSelection)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ff2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ff6:	d008      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8002ff8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ffc:	d80c      	bhi.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xd48>
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00d      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003006:	d00a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003008:	e006      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      case RCC_USBPHYCCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USBPHYC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 800300a:	4b32      	ldr	r3, [pc, #200]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800300c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300e:	4a31      	ldr	r2, [pc, #196]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003014:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USBPHYC clock source configuration done later after clock selection check */
        break;
 8003016:	e003      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xd50>
      case RCC_USBPHYCCLKSOURCE_HSE_DIV2: /* HSE divided by 2 is used as clock source for USBPHYC */
        /* USBPHYC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	75fb      	strb	r3, [r7, #23]
        break;
 800301c:	e000      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800301e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003020:	7dfb      	ldrb	r3, [r7, #23]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBPHYC_CONFIG(PeriphClkInit->UsbPhycClockSelection);
 8003026:	4b2b      	ldr	r3, [pc, #172]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800302a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003032:	4928      	ldr	r1, [pc, #160]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003034:	4313      	orrs	r3, r2
 8003036:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003038:	e001      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800303a:	7dfb      	ldrb	r3, [r7, #23]
 800303c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBOTGFS Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGFS) == RCC_PERIPHCLK_USBOTGFS)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	da2c      	bge.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGFSCLKSOURCE(PeriphClkInit->UsbOtgFsClockSelection));

    switch (PeriphClkInit->UsbOtgFsClockSelection)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800304a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800304e:	d017      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8003050:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003054:	d811      	bhi.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 8003056:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800305a:	d011      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 800305c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003060:	d80b      	bhi.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00c      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8003066:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800306a:	d106      	bne.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    {
      case RCC_USBOTGFSCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USB OTG FS */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 800306c:	4b19      	ldr	r3, [pc, #100]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800306e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003070:	4a18      	ldr	r2, [pc, #96]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003076:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;
 8003078:	e003      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
      case RCC_USBOTGFSCLKSOURCE_CLK48: /* USBPHYC CLK48 is used as clock source for USB OTG FS */
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	75fb      	strb	r3, [r7, #23]
        break;
 800307e:	e000      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
 8003080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003082:	7dfb      	ldrb	r3, [r7, #23]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d109      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xdcc>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBOTGFS_CONFIG(PeriphClkInit->UsbOtgFsClockSelection);
 8003088:	4b12      	ldr	r3, [pc, #72]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800308a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800308c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003094:	490f      	ldr	r1, [pc, #60]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003096:	4313      	orrs	r3, r2
 8003098:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800309a:	e001      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800309c:	7dfb      	ldrb	r3, [r7, #23]
 800309e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d009      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
 80030ac:	4b09      	ldr	r3, [pc, #36]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030ba:	4906      	ldr	r1, [pc, #24]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	610b      	str	r3, [r1, #16]
  }

  if (status == HAL_OK)
 80030c0:	7dbb      	ldrb	r3, [r7, #22]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xdfa>
  {
    return HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	e000      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xdfc>
  }
  return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	58024400 	.word	0x58024400

080030d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80030d8:	b084      	sub	sp, #16
 80030da:	b580      	push	{r7, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	f107 001c 	add.w	r0, r7, #28
 80030e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a22      	ldr	r2, [pc, #136]	@ (8003178 <USB_CoreInit+0xa0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d11e      	bne.n	8003130 <USB_CoreInit+0x58>
  {
    if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80030f2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d105      	bne.n	8003106 <USB_CoreInit+0x2e>
    {
      /* Init The UTMI Interface */
      USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f001 fb28 	bl	800475c <USB_CoreReset>
 800310c:	4603      	mov	r3, r0
 800310e:	73fb      	strb	r3, [r7, #15]

    if (cfg.dma_enable == 1U)
 8003110:	7fbb      	ldrb	r3, [r7, #30]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d128      	bne.n	8003168 <USB_CoreInit+0x90>
    {
      USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f043 0208 	orr.w	r2, r3, #8
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	609a      	str	r2, [r3, #8]
      USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f043 0220 	orr.w	r2, r3, #32
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	609a      	str	r2, [r3, #8]
 800312e:	e01b      	b.n	8003168 <USB_CoreInit+0x90>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f001 fb0d 	bl	800475c <USB_CoreReset>
 8003142:	4603      	mov	r3, r0
 8003144:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003146:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800314a:	2b00      	cmp	r3, #0
 800314c:	d106      	bne.n	800315c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003152:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	639a      	str	r2, [r3, #56]	@ 0x38
 800315a:	e005      	b.n	8003168 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003160:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  return ret;
 8003168:	7bfb      	ldrb	r3, [r7, #15]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003174:	b004      	add	sp, #16
 8003176:	4770      	bx	lr
 8003178:	40040000 	.word	0x40040000

0800317c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	4613      	mov	r3, r2
 8003188:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	2b02      	cmp	r3, #2
 800318e:	d165      	bne.n	800325c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4a41      	ldr	r2, [pc, #260]	@ (8003298 <USB_SetTurnaroundTime+0x11c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d906      	bls.n	80031a6 <USB_SetTurnaroundTime+0x2a>
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	4a40      	ldr	r2, [pc, #256]	@ (800329c <USB_SetTurnaroundTime+0x120>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d202      	bcs.n	80031a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80031a0:	230f      	movs	r3, #15
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	e062      	b.n	800326c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	4a3c      	ldr	r2, [pc, #240]	@ (800329c <USB_SetTurnaroundTime+0x120>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d306      	bcc.n	80031bc <USB_SetTurnaroundTime+0x40>
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	4a3b      	ldr	r2, [pc, #236]	@ (80032a0 <USB_SetTurnaroundTime+0x124>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d202      	bcs.n	80031bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80031b6:	230e      	movs	r3, #14
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	e057      	b.n	800326c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	4a38      	ldr	r2, [pc, #224]	@ (80032a0 <USB_SetTurnaroundTime+0x124>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d306      	bcc.n	80031d2 <USB_SetTurnaroundTime+0x56>
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4a37      	ldr	r2, [pc, #220]	@ (80032a4 <USB_SetTurnaroundTime+0x128>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d202      	bcs.n	80031d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80031cc:	230d      	movs	r3, #13
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	e04c      	b.n	800326c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	4a33      	ldr	r2, [pc, #204]	@ (80032a4 <USB_SetTurnaroundTime+0x128>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d306      	bcc.n	80031e8 <USB_SetTurnaroundTime+0x6c>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	4a32      	ldr	r2, [pc, #200]	@ (80032a8 <USB_SetTurnaroundTime+0x12c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d802      	bhi.n	80031e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80031e2:	230c      	movs	r3, #12
 80031e4:	617b      	str	r3, [r7, #20]
 80031e6:	e041      	b.n	800326c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4a2f      	ldr	r2, [pc, #188]	@ (80032a8 <USB_SetTurnaroundTime+0x12c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d906      	bls.n	80031fe <USB_SetTurnaroundTime+0x82>
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	4a2e      	ldr	r2, [pc, #184]	@ (80032ac <USB_SetTurnaroundTime+0x130>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d802      	bhi.n	80031fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80031f8:	230b      	movs	r3, #11
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	e036      	b.n	800326c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	4a2a      	ldr	r2, [pc, #168]	@ (80032ac <USB_SetTurnaroundTime+0x130>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d906      	bls.n	8003214 <USB_SetTurnaroundTime+0x98>
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	4a29      	ldr	r2, [pc, #164]	@ (80032b0 <USB_SetTurnaroundTime+0x134>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d802      	bhi.n	8003214 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800320e:	230a      	movs	r3, #10
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	e02b      	b.n	800326c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4a26      	ldr	r2, [pc, #152]	@ (80032b0 <USB_SetTurnaroundTime+0x134>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d906      	bls.n	800322a <USB_SetTurnaroundTime+0xae>
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	4a25      	ldr	r2, [pc, #148]	@ (80032b4 <USB_SetTurnaroundTime+0x138>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d202      	bcs.n	800322a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003224:	2309      	movs	r3, #9
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	e020      	b.n	800326c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	4a21      	ldr	r2, [pc, #132]	@ (80032b4 <USB_SetTurnaroundTime+0x138>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d306      	bcc.n	8003240 <USB_SetTurnaroundTime+0xc4>
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	4a20      	ldr	r2, [pc, #128]	@ (80032b8 <USB_SetTurnaroundTime+0x13c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d802      	bhi.n	8003240 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800323a:	2308      	movs	r3, #8
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	e015      	b.n	800326c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	4a1d      	ldr	r2, [pc, #116]	@ (80032b8 <USB_SetTurnaroundTime+0x13c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d906      	bls.n	8003256 <USB_SetTurnaroundTime+0xda>
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4a1c      	ldr	r2, [pc, #112]	@ (80032bc <USB_SetTurnaroundTime+0x140>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d202      	bcs.n	8003256 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003250:	2307      	movs	r3, #7
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	e00a      	b.n	800326c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003256:	2306      	movs	r3, #6
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	e007      	b.n	800326c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d102      	bne.n	8003268 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003262:	2309      	movs	r3, #9
 8003264:	617b      	str	r3, [r7, #20]
 8003266:	e001      	b.n	800326c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003268:	2309      	movs	r3, #9
 800326a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	029b      	lsls	r3, r3, #10
 8003280:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003284:	431a      	orrs	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	371c      	adds	r7, #28
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	00d8acbf 	.word	0x00d8acbf
 800329c:	00e4e1c0 	.word	0x00e4e1c0
 80032a0:	00f42400 	.word	0x00f42400
 80032a4:	01067380 	.word	0x01067380
 80032a8:	011a499f 	.word	0x011a499f
 80032ac:	01312cff 	.word	0x01312cff
 80032b0:	014ca43f 	.word	0x014ca43f
 80032b4:	016e3600 	.word	0x016e3600
 80032b8:	01a6ab1f 	.word	0x01a6ab1f
 80032bc:	01e84800 	.word	0x01e84800

080032c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f043 0201 	orr.w	r2, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f023 0201 	bic.w	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d115      	bne.n	8003352 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003332:	200a      	movs	r0, #10
 8003334:	f7fd fa1c 	bl	8000770 <HAL_Delay>
      ms += 10U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	330a      	adds	r3, #10
 800333c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f001 f97b 	bl	800463a <USB_GetMode>
 8003344:	4603      	mov	r3, r0
 8003346:	2b01      	cmp	r3, #1
 8003348:	d01e      	beq.n	8003388 <USB_SetCurrentMode+0x84>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2bc7      	cmp	r3, #199	@ 0xc7
 800334e:	d9f0      	bls.n	8003332 <USB_SetCurrentMode+0x2e>
 8003350:	e01a      	b.n	8003388 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003352:	78fb      	ldrb	r3, [r7, #3]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d115      	bne.n	8003384 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003364:	200a      	movs	r0, #10
 8003366:	f7fd fa03 	bl	8000770 <HAL_Delay>
      ms += 10U;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	330a      	adds	r3, #10
 800336e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f001 f962 	bl	800463a <USB_GetMode>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <USB_SetCurrentMode+0x84>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003380:	d9f0      	bls.n	8003364 <USB_SetCurrentMode+0x60>
 8003382:	e001      	b.n	8003388 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e005      	b.n	8003394 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2bc8      	cmp	r3, #200	@ 0xc8
 800338c:	d101      	bne.n	8003392 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800339c:	b084      	sub	sp, #16
 800339e:	b580      	push	{r7, lr}
 80033a0:	b086      	sub	sp, #24
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80033aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80033b6:	2300      	movs	r3, #0
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	e009      	b.n	80033d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	3340      	adds	r3, #64	@ 0x40
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	2200      	movs	r2, #0
 80033c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	3301      	adds	r3, #1
 80033ce:	613b      	str	r3, [r7, #16]
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	2b0e      	cmp	r3, #14
 80033d4:	d9f2      	bls.n	80033bc <USB_DevInit+0x20>
  }

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d105      	bne.n	80033ee <USB_DevInit+0x52>
  {
    /* Disable USB PHY pulldown resistors */
    USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80033ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d12f      	bne.n	8003456 <USB_DevInit+0xba>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003404:	f043 0302 	orr.w	r3, r3, #2
 8003408:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800340e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10c      	bne.n	800343c <USB_DevInit+0xa0>
    {
      USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003426:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	639a      	str	r2, [r3, #56]	@ 0x38
      USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003432:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	639a      	str	r2, [r3, #56]	@ 0x38
 800343a:	e031      	b.n	80034a0 <USB_DevInit+0x104>
    }
    else
    {
      USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	601a      	str	r2, [r3, #0]
      USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	e024      	b.n	80034a0 <USB_DevInit+0x104>
    }
  }
  else
  {
    /* B-peripheral session valid override disable */
    if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10c      	bne.n	800347c <USB_DevInit+0xe0>
    {
      USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003466:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	639a      	str	r2, [r3, #56]	@ 0x38
      USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003472:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	639a      	str	r2, [r3, #56]	@ 0x38
 800347a:	e00b      	b.n	8003494 <USB_DevInit+0xf8>
    }
    else
    {
      USBx->GOTGCTL &= ~USB_OTG_GOTGCTL_BVALOEN;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	601a      	str	r2, [r3, #0]
      USBx->GOTGCTL &= ~USB_OTG_GOTGCTL_BVALOVAL;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	601a      	str	r2, [r3, #0]
    }

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003498:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80034a6:	461a      	mov	r2, r3
 80034a8:	2300      	movs	r3, #0
 80034aa:	6013      	str	r3, [r2, #0]

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10d      	bne.n	80034d4 <USB_DevInit+0x138>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80034b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d104      	bne.n	80034ca <USB_DevInit+0x12e>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80034c0:	2100      	movs	r1, #0
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f968 	bl	8003798 <USB_SetDevSpeed>
 80034c8:	e008      	b.n	80034dc <USB_DevInit+0x140>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80034ca:	2101      	movs	r1, #1
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f963 	bl	8003798 <USB_SetDevSpeed>
 80034d2:	e003      	b.n	80034dc <USB_DevInit+0x140>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80034d4:	2103      	movs	r1, #3
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f95e 	bl	8003798 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80034dc:	2110      	movs	r1, #16
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f8fa 	bl	80036d8 <USB_FlushTxFifo>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <USB_DevInit+0x152>
  {
    ret = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f924 	bl	800373c <USB_FlushRxFifo>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <USB_DevInit+0x162>
  {
    ret = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003504:	461a      	mov	r2, r3
 8003506:	2300      	movs	r3, #0
 8003508:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003510:	461a      	mov	r2, r3
 8003512:	2300      	movs	r3, #0
 8003514:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800351c:	461a      	mov	r2, r3
 800351e:	2300      	movs	r3, #0
 8003520:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003522:	2300      	movs	r3, #0
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	e043      	b.n	80035b0 <USB_DevInit+0x214>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4413      	add	r3, r2
 8003530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800353a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800353e:	d118      	bne.n	8003572 <USB_DevInit+0x1d6>
    {
      if (i == 0U)
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10a      	bne.n	800355c <USB_DevInit+0x1c0>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4413      	add	r3, r2
 800354e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003552:	461a      	mov	r2, r3
 8003554:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e013      	b.n	8003584 <USB_DevInit+0x1e8>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4413      	add	r3, r2
 8003564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003568:	461a      	mov	r2, r3
 800356a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	e008      	b.n	8003584 <USB_DevInit+0x1e8>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4413      	add	r3, r2
 800357a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800357e:	461a      	mov	r2, r3
 8003580:	2300      	movs	r3, #0
 8003582:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003590:	461a      	mov	r2, r3
 8003592:	2300      	movs	r3, #0
 8003594:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035a2:	461a      	mov	r2, r3
 80035a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80035a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	3301      	adds	r3, #1
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80035b4:	461a      	mov	r2, r3
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d3b5      	bcc.n	8003528 <USB_DevInit+0x18c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035bc:	2300      	movs	r3, #0
 80035be:	613b      	str	r3, [r7, #16]
 80035c0:	e043      	b.n	800364a <USB_DevInit+0x2ae>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80035d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80035d8:	d118      	bne.n	800360c <USB_DevInit+0x270>
    {
      if (i == 0U)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10a      	bne.n	80035f6 <USB_DevInit+0x25a>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ec:	461a      	mov	r2, r3
 80035ee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80035f2:	6013      	str	r3, [r2, #0]
 80035f4:	e013      	b.n	800361e <USB_DevInit+0x282>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003602:	461a      	mov	r2, r3
 8003604:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	e008      	b.n	800361e <USB_DevInit+0x282>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4413      	add	r3, r2
 8003614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003618:	461a      	mov	r2, r3
 800361a:	2300      	movs	r3, #0
 800361c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4413      	add	r3, r2
 8003626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800362a:	461a      	mov	r2, r3
 800362c:	2300      	movs	r3, #0
 800362e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4413      	add	r3, r2
 8003638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800363c:	461a      	mov	r2, r3
 800363e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003642:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	3301      	adds	r3, #1
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800364e:	461a      	mov	r2, r3
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4293      	cmp	r3, r2
 8003654:	d3b5      	bcc.n	80035c2 <USB_DevInit+0x226>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003664:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003668:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003676:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003678:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800367c:	2b00      	cmp	r3, #0
 800367e:	d105      	bne.n	800368c <USB_DevInit+0x2f0>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	f043 0210 	orr.w	r2, r3, #16
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699a      	ldr	r2, [r3, #24]
 8003690:	4b0f      	ldr	r3, [pc, #60]	@ (80036d0 <USB_DevInit+0x334>)
 8003692:	4313      	orrs	r3, r2
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003698:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <USB_DevInit+0x310>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	f043 0208 	orr.w	r2, r3, #8
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80036ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d105      	bne.n	80036c0 <USB_DevInit+0x324>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699a      	ldr	r2, [r3, #24]
 80036b8:	4b06      	ldr	r3, [pc, #24]	@ (80036d4 <USB_DevInit+0x338>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80036c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036cc:	b004      	add	sp, #16
 80036ce:	4770      	bx	lr
 80036d0:	803c3800 	.word	0x803c3800
 80036d4:	40000004 	.word	0x40000004

080036d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	3301      	adds	r3, #1
 80036ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80036f2:	d901      	bls.n	80036f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e01b      	b.n	8003730 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	daf2      	bge.n	80036e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	019b      	lsls	r3, r3, #6
 8003708:	f043 0220 	orr.w	r2, r3, #32
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3301      	adds	r3, #1
 8003714:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800371c:	d901      	bls.n	8003722 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e006      	b.n	8003730 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b20      	cmp	r3, #32
 800372c:	d0f0      	beq.n	8003710 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	3301      	adds	r3, #1
 800374c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003754:	d901      	bls.n	800375a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e018      	b.n	800378c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	2b00      	cmp	r3, #0
 8003760:	daf2      	bge.n	8003748 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2210      	movs	r2, #16
 800376a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	3301      	adds	r3, #1
 8003770:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003778:	d901      	bls.n	800377e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e006      	b.n	800378c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	2b10      	cmp	r3, #16
 8003788:	d0f0      	beq.n	800376c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	78fb      	ldrb	r3, [r7, #3]
 80037b2:	68f9      	ldr	r1, [r7, #12]
 80037b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80037b8:	4313      	orrs	r3, r2
 80037ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b087      	sub	sp, #28
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 0306 	and.w	r3, r3, #6
 80037e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d102      	bne.n	80037f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80037ea:	2300      	movs	r3, #0
 80037ec:	75fb      	strb	r3, [r7, #23]
 80037ee:	e00a      	b.n	8003806 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d002      	beq.n	80037fc <USB_GetDevSpeed+0x32>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2b06      	cmp	r3, #6
 80037fa:	d102      	bne.n	8003802 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80037fc:	2302      	movs	r3, #2
 80037fe:	75fb      	strb	r3, [r7, #23]
 8003800:	e001      	b.n	8003806 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003802:	230f      	movs	r3, #15
 8003804:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003806:	7dfb      	ldrb	r3, [r7, #23]
}
 8003808:	4618      	mov	r0, r3
 800380a:	371c      	adds	r7, #28
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	785b      	ldrb	r3, [r3, #1]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d139      	bne.n	80038a4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003836:	69da      	ldr	r2, [r3, #28]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	2101      	movs	r1, #1
 8003842:	fa01 f303 	lsl.w	r3, r1, r3
 8003846:	b29b      	uxth	r3, r3
 8003848:	68f9      	ldr	r1, [r7, #12]
 800384a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800384e:	4313      	orrs	r3, r2
 8003850:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d153      	bne.n	8003910 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4413      	add	r3, r2
 8003870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	791b      	ldrb	r3, [r3, #4]
 8003882:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003884:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	059b      	lsls	r3, r3, #22
 800388a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800388c:	431a      	orrs	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	0159      	lsls	r1, r3, #5
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	440b      	add	r3, r1
 8003896:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800389a:	4619      	mov	r1, r3
 800389c:	4b20      	ldr	r3, [pc, #128]	@ (8003920 <USB_ActivateEndpoint+0x10c>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	600b      	str	r3, [r1, #0]
 80038a2:	e035      	b.n	8003910 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038aa:	69da      	ldr	r2, [r3, #28]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	f003 030f 	and.w	r3, r3, #15
 80038b4:	2101      	movs	r1, #1
 80038b6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ba:	041b      	lsls	r3, r3, #16
 80038bc:	68f9      	ldr	r1, [r7, #12]
 80038be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d119      	bne.n	8003910 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	791b      	ldrb	r3, [r3, #4]
 80038f6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80038f8:	430b      	orrs	r3, r1
 80038fa:	431a      	orrs	r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	0159      	lsls	r1, r3, #5
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	440b      	add	r3, r1
 8003904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003908:	4619      	mov	r1, r3
 800390a:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <USB_ActivateEndpoint+0x10c>)
 800390c:	4313      	orrs	r3, r2
 800390e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	10008000 	.word	0x10008000

08003924 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	785b      	ldrb	r3, [r3, #1]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d161      	bne.n	8003a04 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4413      	add	r3, r2
 8003948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003952:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003956:	d11f      	bne.n	8003998 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4413      	add	r3, r2
 8003960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	0151      	lsls	r1, r2, #5
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	440a      	add	r2, r1
 800396e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003972:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003976:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4413      	add	r3, r2
 8003980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	0151      	lsls	r1, r2, #5
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	440a      	add	r2, r1
 800398e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003992:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003996:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800399e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	2101      	movs	r1, #1
 80039aa:	fa01 f303 	lsl.w	r3, r1, r3
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	68f9      	ldr	r1, [r7, #12]
 80039b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80039b8:	4013      	ands	r3, r2
 80039ba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039c2:	69da      	ldr	r2, [r3, #28]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	2101      	movs	r1, #1
 80039ce:	fa01 f303 	lsl.w	r3, r1, r3
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	43db      	mvns	r3, r3
 80039d6:	68f9      	ldr	r1, [r7, #12]
 80039d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80039dc:	4013      	ands	r3, r2
 80039de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	0159      	lsls	r1, r3, #5
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	440b      	add	r3, r1
 80039f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039fa:	4619      	mov	r1, r3
 80039fc:	4b35      	ldr	r3, [pc, #212]	@ (8003ad4 <USB_DeactivateEndpoint+0x1b0>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	600b      	str	r3, [r1, #0]
 8003a02:	e060      	b.n	8003ac6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a1a:	d11f      	bne.n	8003a5c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	0151      	lsls	r1, r2, #5
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	440a      	add	r2, r1
 8003a32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a36:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003a3a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	0151      	lsls	r1, r2, #5
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	440a      	add	r2, r1
 8003a52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a56:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a72:	041b      	lsls	r3, r3, #16
 8003a74:	43db      	mvns	r3, r3
 8003a76:	68f9      	ldr	r1, [r7, #12]
 8003a78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a86:	69da      	ldr	r2, [r3, #28]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	f003 030f 	and.w	r3, r3, #15
 8003a90:	2101      	movs	r1, #1
 8003a92:	fa01 f303 	lsl.w	r3, r1, r3
 8003a96:	041b      	lsls	r3, r3, #16
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	68f9      	ldr	r1, [r7, #12]
 8003a9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	0159      	lsls	r1, r3, #5
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	440b      	add	r3, r1
 8003aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4b05      	ldr	r3, [pc, #20]	@ (8003ad8 <USB_DeactivateEndpoint+0x1b4>)
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	ec337800 	.word	0xec337800
 8003ad8:	eff37800 	.word	0xeff37800

08003adc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08a      	sub	sp, #40	@ 0x28
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	785b      	ldrb	r3, [r3, #1]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	f040 8181 	bne.w	8003e00 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d132      	bne.n	8003b6c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	0159      	lsls	r1, r3, #5
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	440b      	add	r3, r1
 8003b1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b20:	4619      	mov	r1, r3
 8003b22:	4ba5      	ldr	r3, [pc, #660]	@ (8003db8 <USB_EPStartXfer+0x2dc>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	0151      	lsls	r1, r2, #5
 8003b3a:	69fa      	ldr	r2, [r7, #28]
 8003b3c:	440a      	add	r2, r1
 8003b3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b42:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003b46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b54:	691a      	ldr	r2, [r3, #16]
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	0159      	lsls	r1, r3, #5
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	440b      	add	r3, r1
 8003b5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b62:	4619      	mov	r1, r3
 8003b64:	4b95      	ldr	r3, [pc, #596]	@ (8003dbc <USB_EPStartXfer+0x2e0>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	610b      	str	r3, [r1, #16]
 8003b6a:	e092      	b.n	8003c92 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	0159      	lsls	r1, r3, #5
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	440b      	add	r3, r1
 8003b82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b86:	4619      	mov	r1, r3
 8003b88:	4b8c      	ldr	r3, [pc, #560]	@ (8003dbc <USB_EPStartXfer+0x2e0>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	0159      	lsls	r1, r3, #5
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	440b      	add	r3, r1
 8003ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4b83      	ldr	r3, [pc, #524]	@ (8003db8 <USB_EPStartXfer+0x2dc>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d11a      	bne.n	8003bec <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	691a      	ldr	r2, [r3, #16]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d903      	bls.n	8003bca <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	0151      	lsls	r1, r2, #5
 8003bdc:	69fa      	ldr	r2, [r7, #28]
 8003bde:	440a      	add	r2, r1
 8003be0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003be4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003be8:	6113      	str	r3, [r2, #16]
 8003bea:	e01b      	b.n	8003c24 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bf8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	6919      	ldr	r1, [r3, #16]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	440b      	add	r3, r1
 8003c04:	1e59      	subs	r1, r3, #1
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c0e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003c10:	4b6b      	ldr	r3, [pc, #428]	@ (8003dc0 <USB_EPStartXfer+0x2e4>)
 8003c12:	400b      	ands	r3, r1
 8003c14:	69b9      	ldr	r1, [r7, #24]
 8003c16:	0148      	lsls	r0, r1, #5
 8003c18:	69f9      	ldr	r1, [r7, #28]
 8003c1a:	4401      	add	r1, r0
 8003c1c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003c20:	4313      	orrs	r3, r2
 8003c22:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c30:	691a      	ldr	r2, [r3, #16]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c3a:	69b9      	ldr	r1, [r7, #24]
 8003c3c:	0148      	lsls	r0, r1, #5
 8003c3e:	69f9      	ldr	r1, [r7, #28]
 8003c40:	4401      	add	r1, r0
 8003c42:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003c46:	4313      	orrs	r3, r2
 8003c48:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	791b      	ldrb	r3, [r3, #4]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d11f      	bne.n	8003c92 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	0151      	lsls	r1, r2, #5
 8003c64:	69fa      	ldr	r2, [r7, #28]
 8003c66:	440a      	add	r2, r1
 8003c68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c6c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003c70:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	015a      	lsls	r2, r3, #5
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	0151      	lsls	r1, r2, #5
 8003c84:	69fa      	ldr	r2, [r7, #28]
 8003c86:	440a      	add	r2, r1
 8003c88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c8c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003c90:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d14b      	bne.n	8003d30 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d009      	beq.n	8003cb4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cac:	461a      	mov	r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	791b      	ldrb	r3, [r3, #4]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d128      	bne.n	8003d0e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d110      	bne.n	8003cee <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	015a      	lsls	r2, r3, #5
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	0151      	lsls	r1, r2, #5
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	440a      	add	r2, r1
 8003ce2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ce6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	e00f      	b.n	8003d0e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	0151      	lsls	r1, r2, #5
 8003d00:	69fa      	ldr	r2, [r7, #28]
 8003d02:	440a      	add	r2, r1
 8003d04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d0c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	0151      	lsls	r1, r2, #5
 8003d20:	69fa      	ldr	r2, [r7, #28]
 8003d22:	440a      	add	r2, r1
 8003d24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d28:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	e16a      	b.n	8004006 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	0151      	lsls	r1, r2, #5
 8003d42:	69fa      	ldr	r2, [r7, #28]
 8003d44:	440a      	add	r2, r1
 8003d46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d4a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003d4e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	791b      	ldrb	r3, [r3, #4]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d015      	beq.n	8003d84 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 8152 	beq.w	8004006 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	2101      	movs	r1, #1
 8003d74:	fa01 f303 	lsl.w	r3, r1, r3
 8003d78:	69f9      	ldr	r1, [r7, #28]
 8003d7a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	634b      	str	r3, [r1, #52]	@ 0x34
 8003d82:	e140      	b.n	8004006 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d117      	bne.n	8003dc4 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	0151      	lsls	r1, r2, #5
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	440a      	add	r2, r1
 8003daa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003dae:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	e016      	b.n	8003de4 <USB_EPStartXfer+0x308>
 8003db6:	bf00      	nop
 8003db8:	e007ffff 	.word	0xe007ffff
 8003dbc:	fff80000 	.word	0xfff80000
 8003dc0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	0151      	lsls	r1, r2, #5
 8003dd6:	69fa      	ldr	r2, [r7, #28]
 8003dd8:	440a      	add	r2, r1
 8003dda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003dde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003de2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	68d9      	ldr	r1, [r3, #12]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	781a      	ldrb	r2, [r3, #0]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	b298      	uxth	r0, r3
 8003df2:	79fb      	ldrb	r3, [r7, #7]
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	4603      	mov	r3, r0
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 f9b9 	bl	8004170 <USB_WritePacket>
 8003dfe:	e102      	b.n	8004006 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e0c:	691a      	ldr	r2, [r3, #16]
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	0159      	lsls	r1, r3, #5
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	440b      	add	r3, r1
 8003e16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4b7c      	ldr	r3, [pc, #496]	@ (8004010 <USB_EPStartXfer+0x534>)
 8003e1e:	4013      	ands	r3, r2
 8003e20:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	015a      	lsls	r2, r3, #5
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	0159      	lsls	r1, r3, #5
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	440b      	add	r3, r1
 8003e38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4b75      	ldr	r3, [pc, #468]	@ (8004014 <USB_EPStartXfer+0x538>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d12f      	bne.n	8003eaa <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e78:	69b9      	ldr	r1, [r7, #24]
 8003e7a:	0148      	lsls	r0, r1, #5
 8003e7c:	69f9      	ldr	r1, [r7, #28]
 8003e7e:	4401      	add	r1, r0
 8003e80:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003e84:	4313      	orrs	r3, r2
 8003e86:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	0151      	lsls	r1, r2, #5
 8003e9a:	69fa      	ldr	r2, [r7, #28]
 8003e9c:	440a      	add	r2, r1
 8003e9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ea2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003ea6:	6113      	str	r3, [r2, #16]
 8003ea8:	e05f      	b.n	8003f6a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d123      	bne.n	8003efa <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ebe:	691a      	ldr	r2, [r3, #16]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec8:	69b9      	ldr	r1, [r7, #24]
 8003eca:	0148      	lsls	r0, r1, #5
 8003ecc:	69f9      	ldr	r1, [r7, #28]
 8003ece:	4401      	add	r1, r0
 8003ed0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	0151      	lsls	r1, r2, #5
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	440a      	add	r2, r1
 8003eee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ef2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003ef6:	6113      	str	r3, [r2, #16]
 8003ef8:	e037      	b.n	8003f6a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	4413      	add	r3, r2
 8003f04:	1e5a      	subs	r2, r3, #1
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	8afa      	ldrh	r2, [r7, #22]
 8003f16:	fb03 f202 	mul.w	r2, r3, r2
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	8afb      	ldrh	r3, [r7, #22]
 8003f2e:	04d9      	lsls	r1, r3, #19
 8003f30:	4b39      	ldr	r3, [pc, #228]	@ (8004018 <USB_EPStartXfer+0x53c>)
 8003f32:	400b      	ands	r3, r1
 8003f34:	69b9      	ldr	r1, [r7, #24]
 8003f36:	0148      	lsls	r0, r1, #5
 8003f38:	69f9      	ldr	r1, [r7, #28]
 8003f3a:	4401      	add	r1, r0
 8003f3c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003f40:	4313      	orrs	r3, r2
 8003f42:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f50:	691a      	ldr	r2, [r3, #16]
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f5a:	69b9      	ldr	r1, [r7, #24]
 8003f5c:	0148      	lsls	r0, r1, #5
 8003f5e:	69f9      	ldr	r1, [r7, #28]
 8003f60:	4401      	add	r1, r0
 8003f62:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003f66:	4313      	orrs	r3, r2
 8003f68:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d10d      	bne.n	8003f8c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d009      	beq.n	8003f8c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	68d9      	ldr	r1, [r3, #12]
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f88:	460a      	mov	r2, r1
 8003f8a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	791b      	ldrb	r3, [r3, #4]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d128      	bne.n	8003fe6 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d110      	bne.n	8003fc6 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	0151      	lsls	r1, r2, #5
 8003fb6:	69fa      	ldr	r2, [r7, #28]
 8003fb8:	440a      	add	r2, r1
 8003fba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003fbe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003fc2:	6013      	str	r3, [r2, #0]
 8003fc4:	e00f      	b.n	8003fe6 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	0151      	lsls	r1, r2, #5
 8003fd8:	69fa      	ldr	r2, [r7, #28]
 8003fda:	440a      	add	r2, r1
 8003fdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fe4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	0151      	lsls	r1, r2, #5
 8003ff8:	69fa      	ldr	r2, [r7, #28]
 8003ffa:	440a      	add	r2, r1
 8003ffc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004000:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004004:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3720      	adds	r7, #32
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	fff80000 	.word	0xfff80000
 8004014:	e007ffff 	.word	0xe007ffff
 8004018:	1ff80000 	.word	0x1ff80000

0800401c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	785b      	ldrb	r3, [r3, #1]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d14a      	bne.n	80040d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800404e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004052:	f040 8086 	bne.w	8004162 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	7812      	ldrb	r2, [r2, #0]
 800406a:	0151      	lsls	r1, r2, #5
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	440a      	add	r2, r1
 8004070:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004074:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004078:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	7812      	ldrb	r2, [r2, #0]
 800408e:	0151      	lsls	r1, r2, #5
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	440a      	add	r2, r1
 8004094:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004098:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800409c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	3301      	adds	r3, #1
 80040a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d902      	bls.n	80040b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	75fb      	strb	r3, [r7, #23]
          break;
 80040b2:	e056      	b.n	8004162 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	015a      	lsls	r2, r3, #5
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4413      	add	r3, r2
 80040be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040cc:	d0e7      	beq.n	800409e <USB_EPStopXfer+0x82>
 80040ce:	e048      	b.n	8004162 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040e8:	d13b      	bne.n	8004162 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	7812      	ldrb	r2, [r2, #0]
 80040fe:	0151      	lsls	r1, r2, #5
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	440a      	add	r2, r1
 8004104:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004108:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800410c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	7812      	ldrb	r2, [r2, #0]
 8004122:	0151      	lsls	r1, r2, #5
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	440a      	add	r2, r1
 8004128:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800412c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004130:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3301      	adds	r3, #1
 8004136:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800413e:	4293      	cmp	r3, r2
 8004140:	d902      	bls.n	8004148 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	75fb      	strb	r3, [r7, #23]
          break;
 8004146:	e00c      	b.n	8004162 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	4413      	add	r3, r2
 8004152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800415c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004160:	d0e7      	beq.n	8004132 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004162:	7dfb      	ldrb	r3, [r7, #23]
}
 8004164:	4618      	mov	r0, r3
 8004166:	371c      	adds	r7, #28
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004170:	b480      	push	{r7}
 8004172:	b089      	sub	sp, #36	@ 0x24
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	4611      	mov	r1, r2
 800417c:	461a      	mov	r2, r3
 800417e:	460b      	mov	r3, r1
 8004180:	71fb      	strb	r3, [r7, #7]
 8004182:	4613      	mov	r3, r2
 8004184:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800418e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004192:	2b00      	cmp	r3, #0
 8004194:	d123      	bne.n	80041de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004196:	88bb      	ldrh	r3, [r7, #4]
 8004198:	3303      	adds	r3, #3
 800419a:	089b      	lsrs	r3, r3, #2
 800419c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800419e:	2300      	movs	r3, #0
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	e018      	b.n	80041d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80041a4:	79fb      	ldrb	r3, [r7, #7]
 80041a6:	031a      	lsls	r2, r3, #12
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041b0:	461a      	mov	r2, r3
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	3301      	adds	r3, #1
 80041bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	3301      	adds	r3, #1
 80041c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	3301      	adds	r3, #1
 80041c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	3301      	adds	r3, #1
 80041ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	3301      	adds	r3, #1
 80041d4:	61bb      	str	r3, [r7, #24]
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d3e2      	bcc.n	80041a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3724      	adds	r7, #36	@ 0x24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b08b      	sub	sp, #44	@ 0x2c
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	4613      	mov	r3, r2
 80041f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	089b      	lsrs	r3, r3, #2
 8004206:	b29b      	uxth	r3, r3
 8004208:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800420a:	88fb      	ldrh	r3, [r7, #6]
 800420c:	f003 0303 	and.w	r3, r3, #3
 8004210:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004212:	2300      	movs	r3, #0
 8004214:	623b      	str	r3, [r7, #32]
 8004216:	e014      	b.n	8004242 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004222:	601a      	str	r2, [r3, #0]
    pDest++;
 8004224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004226:	3301      	adds	r3, #1
 8004228:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800422a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422c:	3301      	adds	r3, #1
 800422e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004232:	3301      	adds	r3, #1
 8004234:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004238:	3301      	adds	r3, #1
 800423a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	3301      	adds	r3, #1
 8004240:	623b      	str	r3, [r7, #32]
 8004242:	6a3a      	ldr	r2, [r7, #32]
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	429a      	cmp	r2, r3
 8004248:	d3e6      	bcc.n	8004218 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800424a:	8bfb      	ldrh	r3, [r7, #30]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d01e      	beq.n	800428e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800425a:	461a      	mov	r2, r3
 800425c:	f107 0310 	add.w	r3, r7, #16
 8004260:	6812      	ldr	r2, [r2, #0]
 8004262:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	b2db      	uxtb	r3, r3
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	fa22 f303 	lsr.w	r3, r2, r3
 8004270:	b2da      	uxtb	r2, r3
 8004272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004274:	701a      	strb	r2, [r3, #0]
      i++;
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	3301      	adds	r3, #1
 800427a:	623b      	str	r3, [r7, #32]
      pDest++;
 800427c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427e:	3301      	adds	r3, #1
 8004280:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004282:	8bfb      	ldrh	r3, [r7, #30]
 8004284:	3b01      	subs	r3, #1
 8004286:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004288:	8bfb      	ldrh	r3, [r7, #30]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1ea      	bne.n	8004264 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800428e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004290:	4618      	mov	r0, r3
 8004292:	372c      	adds	r7, #44	@ 0x2c
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	785b      	ldrb	r3, [r3, #1]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d12c      	bne.n	8004312 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	db12      	blt.n	80042f0 <USB_EPSetStall+0x54>
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00f      	beq.n	80042f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	0151      	lsls	r1, r2, #5
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	440a      	add	r2, r1
 80042e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80042ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	0151      	lsls	r1, r2, #5
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	440a      	add	r2, r1
 8004306:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800430a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	e02b      	b.n	800436a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	db12      	blt.n	800434a <USB_EPSetStall+0xae>
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00f      	beq.n	800434a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	0151      	lsls	r1, r2, #5
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	440a      	add	r2, r1
 8004340:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004344:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004348:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	0151      	lsls	r1, r2, #5
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	440a      	add	r2, r1
 8004360:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004364:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004368:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	785b      	ldrb	r3, [r3, #1]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d128      	bne.n	80043e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	0151      	lsls	r1, r2, #5
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	440a      	add	r2, r1
 80043aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80043b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	791b      	ldrb	r3, [r3, #4]
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d003      	beq.n	80043c4 <USB_EPClearStall+0x4c>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	791b      	ldrb	r3, [r3, #4]
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d138      	bne.n	8004436 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	0151      	lsls	r1, r2, #5
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	440a      	add	r2, r1
 80043da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	e027      	b.n	8004436 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	0151      	lsls	r1, r2, #5
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	440a      	add	r2, r1
 80043fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004400:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004404:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	791b      	ldrb	r3, [r3, #4]
 800440a:	2b03      	cmp	r3, #3
 800440c:	d003      	beq.n	8004416 <USB_EPClearStall+0x9e>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	791b      	ldrb	r3, [r3, #4]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d10f      	bne.n	8004436 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	0151      	lsls	r1, r2, #5
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	440a      	add	r2, r1
 800442c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004434:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	460b      	mov	r3, r1
 800444e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004462:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004466:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	78fb      	ldrb	r3, [r7, #3]
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004478:	68f9      	ldr	r1, [r7, #12]
 800447a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800447e:	4313      	orrs	r3, r2
 8004480:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80044aa:	f023 0303 	bic.w	r3, r3, #3
 80044ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044be:	f023 0302 	bic.w	r3, r3, #2
 80044c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b085      	sub	sp, #20
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80044ec:	f023 0303 	bic.w	r3, r3, #3
 80044f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004500:	f043 0302 	orr.w	r3, r3, #2
 8004504:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4013      	ands	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800452c:	68fb      	ldr	r3, [r7, #12]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800453a:	b480      	push	{r7}
 800453c:	b085      	sub	sp, #20
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	4013      	ands	r3, r2
 800455c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	0c1b      	lsrs	r3, r3, #16
}
 8004562:	4618      	mov	r0, r3
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800456e:	b480      	push	{r7}
 8004570:	b085      	sub	sp, #20
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	4013      	ands	r3, r2
 8004590:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	b29b      	uxth	r3, r3
}
 8004596:	4618      	mov	r0, r3
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b085      	sub	sp, #20
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	460b      	mov	r3, r1
 80045ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80045b2:	78fb      	ldrb	r3, [r7, #3]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	4013      	ands	r3, r2
 80045ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80045d0:	68bb      	ldr	r3, [r7, #8]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80045de:	b480      	push	{r7}
 80045e0:	b087      	sub	sp, #28
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	460b      	mov	r3, r1
 80045e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004600:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004602:	78fb      	ldrb	r3, [r7, #3]
 8004604:	f003 030f 	and.w	r3, r3, #15
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	fa22 f303 	lsr.w	r3, r2, r3
 800460e:	01db      	lsls	r3, r3, #7
 8004610:	b2db      	uxtb	r3, r3
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	4313      	orrs	r3, r2
 8004616:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004618:	78fb      	ldrb	r3, [r7, #3]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	4013      	ands	r3, r2
 800462a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800462c:	68bb      	ldr	r3, [r7, #8]
}
 800462e:	4618      	mov	r0, r3
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	f003 0301 	and.w	r3, r3, #1
}
 800464a:	4618      	mov	r0, r3
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
	...

08004658 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004672:	4619      	mov	r1, r3
 8004674:	4b09      	ldr	r3, [pc, #36]	@ (800469c <USB_ActivateSetup+0x44>)
 8004676:	4013      	ands	r3, r2
 8004678:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800468c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	fffff800 	.word	0xfffff800

080046a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	460b      	mov	r3, r1
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	333c      	adds	r3, #60	@ 0x3c
 80046b6:	3304      	adds	r3, #4
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	4a26      	ldr	r2, [pc, #152]	@ (8004758 <USB_EP0_OutStart+0xb8>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d90a      	bls.n	80046da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046d4:	d101      	bne.n	80046da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	e037      	b.n	800474a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e0:	461a      	mov	r2, r3
 80046e2:	2300      	movs	r3, #0
 80046e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80046f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004708:	f043 0318 	orr.w	r3, r3, #24
 800470c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800471c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004720:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004722:	7afb      	ldrb	r3, [r7, #11]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d10f      	bne.n	8004748 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800472e:	461a      	mov	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004742:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004746:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	371c      	adds	r7, #28
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	4f54300a 	.word	0x4f54300a

0800475c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	3301      	adds	r3, #1
 800476c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004774:	d901      	bls.n	800477a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e01b      	b.n	80047b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b00      	cmp	r3, #0
 8004780:	daf2      	bge.n	8004768 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f043 0201 	orr.w	r2, r3, #1
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	3301      	adds	r3, #1
 8004796:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800479e:	d901      	bls.n	80047a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e006      	b.n	80047b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d0f0      	beq.n	8004792 <USB_CoreReset+0x36>

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
	...

080047c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80047cc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80047d0:	f002 fc5c 	bl	800708c <USBD_static_malloc>
 80047d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d109      	bne.n	80047f0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	32b0      	adds	r2, #176	@ 0xb0
 80047e6:	2100      	movs	r1, #0
 80047e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80047ec:	2302      	movs	r3, #2
 80047ee:	e0d4      	b.n	800499a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80047f0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80047f4:	2100      	movs	r1, #0
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f002 fc8c 	bl	8007114 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	32b0      	adds	r2, #176	@ 0xb0
 8004806:	68f9      	ldr	r1, [r7, #12]
 8004808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	32b0      	adds	r2, #176	@ 0xb0
 8004816:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	7c1b      	ldrb	r3, [r3, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d138      	bne.n	800489a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004828:	4b5e      	ldr	r3, [pc, #376]	@ (80049a4 <USBD_CDC_Init+0x1e4>)
 800482a:	7819      	ldrb	r1, [r3, #0]
 800482c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004830:	2202      	movs	r2, #2
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f002 fb07 	bl	8006e46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004838:	4b5a      	ldr	r3, [pc, #360]	@ (80049a4 <USBD_CDC_Init+0x1e4>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	f003 020f 	and.w	r2, r3, #15
 8004840:	6879      	ldr	r1, [r7, #4]
 8004842:	4613      	mov	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	440b      	add	r3, r1
 800484c:	3324      	adds	r3, #36	@ 0x24
 800484e:	2201      	movs	r2, #1
 8004850:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004852:	4b55      	ldr	r3, [pc, #340]	@ (80049a8 <USBD_CDC_Init+0x1e8>)
 8004854:	7819      	ldrb	r1, [r3, #0]
 8004856:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800485a:	2202      	movs	r2, #2
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f002 faf2 	bl	8006e46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004862:	4b51      	ldr	r3, [pc, #324]	@ (80049a8 <USBD_CDC_Init+0x1e8>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	f003 020f 	and.w	r2, r3, #15
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	4613      	mov	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	440b      	add	r3, r1
 8004876:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800487a:	2201      	movs	r2, #1
 800487c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800487e:	4b4b      	ldr	r3, [pc, #300]	@ (80049ac <USBD_CDC_Init+0x1ec>)
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	f003 020f 	and.w	r2, r3, #15
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	4613      	mov	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	440b      	add	r3, r1
 8004892:	3326      	adds	r3, #38	@ 0x26
 8004894:	2210      	movs	r2, #16
 8004896:	801a      	strh	r2, [r3, #0]
 8004898:	e035      	b.n	8004906 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800489a:	4b42      	ldr	r3, [pc, #264]	@ (80049a4 <USBD_CDC_Init+0x1e4>)
 800489c:	7819      	ldrb	r1, [r3, #0]
 800489e:	2340      	movs	r3, #64	@ 0x40
 80048a0:	2202      	movs	r2, #2
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f002 facf 	bl	8006e46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80048a8:	4b3e      	ldr	r3, [pc, #248]	@ (80049a4 <USBD_CDC_Init+0x1e4>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	f003 020f 	and.w	r2, r3, #15
 80048b0:	6879      	ldr	r1, [r7, #4]
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	440b      	add	r3, r1
 80048bc:	3324      	adds	r3, #36	@ 0x24
 80048be:	2201      	movs	r2, #1
 80048c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80048c2:	4b39      	ldr	r3, [pc, #228]	@ (80049a8 <USBD_CDC_Init+0x1e8>)
 80048c4:	7819      	ldrb	r1, [r3, #0]
 80048c6:	2340      	movs	r3, #64	@ 0x40
 80048c8:	2202      	movs	r2, #2
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f002 fabb 	bl	8006e46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80048d0:	4b35      	ldr	r3, [pc, #212]	@ (80049a8 <USBD_CDC_Init+0x1e8>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	f003 020f 	and.w	r2, r3, #15
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	440b      	add	r3, r1
 80048e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80048e8:	2201      	movs	r2, #1
 80048ea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80048ec:	4b2f      	ldr	r3, [pc, #188]	@ (80049ac <USBD_CDC_Init+0x1ec>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	f003 020f 	and.w	r2, r3, #15
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	440b      	add	r3, r1
 8004900:	3326      	adds	r3, #38	@ 0x26
 8004902:	2210      	movs	r2, #16
 8004904:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004906:	4b29      	ldr	r3, [pc, #164]	@ (80049ac <USBD_CDC_Init+0x1ec>)
 8004908:	7819      	ldrb	r1, [r3, #0]
 800490a:	2308      	movs	r3, #8
 800490c:	2203      	movs	r2, #3
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f002 fa99 	bl	8006e46 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004914:	4b25      	ldr	r3, [pc, #148]	@ (80049ac <USBD_CDC_Init+0x1ec>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	f003 020f 	and.w	r2, r3, #15
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	4613      	mov	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	440b      	add	r3, r1
 8004928:	3324      	adds	r3, #36	@ 0x24
 800492a:	2201      	movs	r2, #1
 800492c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	33b0      	adds	r3, #176	@ 0xb0
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004964:	2302      	movs	r3, #2
 8004966:	e018      	b.n	800499a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	7c1b      	ldrb	r3, [r3, #16]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10a      	bne.n	8004986 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004970:	4b0d      	ldr	r3, [pc, #52]	@ (80049a8 <USBD_CDC_Init+0x1e8>)
 8004972:	7819      	ldrb	r1, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800497a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f002 fb50 	bl	8007024 <USBD_LL_PrepareReceive>
 8004984:	e008      	b.n	8004998 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004986:	4b08      	ldr	r3, [pc, #32]	@ (80049a8 <USBD_CDC_Init+0x1e8>)
 8004988:	7819      	ldrb	r1, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004990:	2340      	movs	r3, #64	@ 0x40
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f002 fb46 	bl	8007024 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	24000093 	.word	0x24000093
 80049a8:	24000094 	.word	0x24000094
 80049ac:	24000095 	.word	0x24000095

080049b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80049bc:	4b3a      	ldr	r3, [pc, #232]	@ (8004aa8 <USBD_CDC_DeInit+0xf8>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	4619      	mov	r1, r3
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f002 fa65 	bl	8006e92 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80049c8:	4b37      	ldr	r3, [pc, #220]	@ (8004aa8 <USBD_CDC_DeInit+0xf8>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	f003 020f 	and.w	r2, r3, #15
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	4613      	mov	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	440b      	add	r3, r1
 80049dc:	3324      	adds	r3, #36	@ 0x24
 80049de:	2200      	movs	r2, #0
 80049e0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80049e2:	4b32      	ldr	r3, [pc, #200]	@ (8004aac <USBD_CDC_DeInit+0xfc>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	4619      	mov	r1, r3
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f002 fa52 	bl	8006e92 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80049ee:	4b2f      	ldr	r3, [pc, #188]	@ (8004aac <USBD_CDC_DeInit+0xfc>)
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	f003 020f 	and.w	r2, r3, #15
 80049f6:	6879      	ldr	r1, [r7, #4]
 80049f8:	4613      	mov	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	440b      	add	r3, r1
 8004a02:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004a06:	2200      	movs	r2, #0
 8004a08:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004a0a:	4b29      	ldr	r3, [pc, #164]	@ (8004ab0 <USBD_CDC_DeInit+0x100>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f002 fa3e 	bl	8006e92 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004a16:	4b26      	ldr	r3, [pc, #152]	@ (8004ab0 <USBD_CDC_DeInit+0x100>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	f003 020f 	and.w	r2, r3, #15
 8004a1e:	6879      	ldr	r1, [r7, #4]
 8004a20:	4613      	mov	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	440b      	add	r3, r1
 8004a2a:	3324      	adds	r3, #36	@ 0x24
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004a30:	4b1f      	ldr	r3, [pc, #124]	@ (8004ab0 <USBD_CDC_DeInit+0x100>)
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	f003 020f 	and.w	r2, r3, #15
 8004a38:	6879      	ldr	r1, [r7, #4]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	440b      	add	r3, r1
 8004a44:	3326      	adds	r3, #38	@ 0x26
 8004a46:	2200      	movs	r2, #0
 8004a48:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	32b0      	adds	r2, #176	@ 0xb0
 8004a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d01f      	beq.n	8004a9c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	33b0      	adds	r3, #176	@ 0xb0
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	32b0      	adds	r2, #176	@ 0xb0
 8004a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f002 fb12 	bl	80070a8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	32b0      	adds	r2, #176	@ 0xb0
 8004a8e:	2100      	movs	r1, #0
 8004a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	24000093 	.word	0x24000093
 8004aac:	24000094 	.word	0x24000094
 8004ab0:	24000095 	.word	0x24000095

08004ab4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	32b0      	adds	r2, #176	@ 0xb0
 8004ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004acc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e0bf      	b.n	8004c64 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d050      	beq.n	8004b92 <USBD_CDC_Setup+0xde>
 8004af0:	2b20      	cmp	r3, #32
 8004af2:	f040 80af 	bne.w	8004c54 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	88db      	ldrh	r3, [r3, #6]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d03a      	beq.n	8004b74 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	b25b      	sxtb	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	da1b      	bge.n	8004b40 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	33b0      	adds	r3, #176	@ 0xb0
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004b1e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	88d2      	ldrh	r2, [r2, #6]
 8004b24:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	88db      	ldrh	r3, [r3, #6]
 8004b2a:	2b07      	cmp	r3, #7
 8004b2c:	bf28      	it	cs
 8004b2e:	2307      	movcs	r3, #7
 8004b30:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	89fa      	ldrh	r2, [r7, #14]
 8004b36:	4619      	mov	r1, r3
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f001 fd7d 	bl	8006638 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004b3e:	e090      	b.n	8004c62 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	785a      	ldrb	r2, [r3, #1]
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	88db      	ldrh	r3, [r3, #6]
 8004b4e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004b50:	d803      	bhi.n	8004b5a <USBD_CDC_Setup+0xa6>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	88db      	ldrh	r3, [r3, #6]
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	e000      	b.n	8004b5c <USBD_CDC_Setup+0xa8>
 8004b5a:	2240      	movs	r2, #64	@ 0x40
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004b62:	6939      	ldr	r1, [r7, #16]
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f001 fd8f 	bl	8006690 <USBD_CtlPrepareRx>
      break;
 8004b72:	e076      	b.n	8004c62 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	33b0      	adds	r3, #176	@ 0xb0
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	7850      	ldrb	r0, [r2, #1]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	6839      	ldr	r1, [r7, #0]
 8004b8e:	4798      	blx	r3
      break;
 8004b90:	e067      	b.n	8004c62 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	785b      	ldrb	r3, [r3, #1]
 8004b96:	2b0b      	cmp	r3, #11
 8004b98:	d851      	bhi.n	8004c3e <USBD_CDC_Setup+0x18a>
 8004b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004ba0 <USBD_CDC_Setup+0xec>)
 8004b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba0:	08004bd1 	.word	0x08004bd1
 8004ba4:	08004c4d 	.word	0x08004c4d
 8004ba8:	08004c3f 	.word	0x08004c3f
 8004bac:	08004c3f 	.word	0x08004c3f
 8004bb0:	08004c3f 	.word	0x08004c3f
 8004bb4:	08004c3f 	.word	0x08004c3f
 8004bb8:	08004c3f 	.word	0x08004c3f
 8004bbc:	08004c3f 	.word	0x08004c3f
 8004bc0:	08004c3f 	.word	0x08004c3f
 8004bc4:	08004c3f 	.word	0x08004c3f
 8004bc8:	08004bfb 	.word	0x08004bfb
 8004bcc:	08004c25 	.word	0x08004c25
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	d107      	bne.n	8004bec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004bdc:	f107 030a 	add.w	r3, r7, #10
 8004be0:	2202      	movs	r2, #2
 8004be2:	4619      	mov	r1, r3
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f001 fd27 	bl	8006638 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004bea:	e032      	b.n	8004c52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004bec:	6839      	ldr	r1, [r7, #0]
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f001 fca5 	bl	800653e <USBD_CtlError>
            ret = USBD_FAIL;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	75fb      	strb	r3, [r7, #23]
          break;
 8004bf8:	e02b      	b.n	8004c52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	d107      	bne.n	8004c16 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004c06:	f107 030d 	add.w	r3, r7, #13
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f001 fd12 	bl	8006638 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004c14:	e01d      	b.n	8004c52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004c16:	6839      	ldr	r1, [r7, #0]
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f001 fc90 	bl	800653e <USBD_CtlError>
            ret = USBD_FAIL;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	75fb      	strb	r3, [r7, #23]
          break;
 8004c22:	e016      	b.n	8004c52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b03      	cmp	r3, #3
 8004c2e:	d00f      	beq.n	8004c50 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004c30:	6839      	ldr	r1, [r7, #0]
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f001 fc83 	bl	800653e <USBD_CtlError>
            ret = USBD_FAIL;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004c3c:	e008      	b.n	8004c50 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004c3e:	6839      	ldr	r1, [r7, #0]
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f001 fc7c 	bl	800653e <USBD_CtlError>
          ret = USBD_FAIL;
 8004c46:	2303      	movs	r3, #3
 8004c48:	75fb      	strb	r3, [r7, #23]
          break;
 8004c4a:	e002      	b.n	8004c52 <USBD_CDC_Setup+0x19e>
          break;
 8004c4c:	bf00      	nop
 8004c4e:	e008      	b.n	8004c62 <USBD_CDC_Setup+0x1ae>
          break;
 8004c50:	bf00      	nop
      }
      break;
 8004c52:	e006      	b.n	8004c62 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004c54:	6839      	ldr	r1, [r7, #0]
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f001 fc71 	bl	800653e <USBD_CtlError>
      ret = USBD_FAIL;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c60:	bf00      	nop
  }

  return (uint8_t)ret;
 8004c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	460b      	mov	r3, r1
 8004c76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8004c7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	32b0      	adds	r2, #176	@ 0xb0
 8004c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e065      	b.n	8004d62 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	32b0      	adds	r2, #176	@ 0xb0
 8004ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ca4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004ca6:	78fb      	ldrb	r3, [r7, #3]
 8004ca8:	f003 020f 	and.w	r2, r3, #15
 8004cac:	6879      	ldr	r1, [r7, #4]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	440b      	add	r3, r1
 8004cb8:	3318      	adds	r3, #24
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d02f      	beq.n	8004d20 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004cc0:	78fb      	ldrb	r3, [r7, #3]
 8004cc2:	f003 020f 	and.w	r2, r3, #15
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	3318      	adds	r3, #24
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	f003 010f 	and.w	r1, r3, #15
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	460b      	mov	r3, r1
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	440b      	add	r3, r1
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4403      	add	r3, r0
 8004ce8:	331c      	adds	r3, #28
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	fbb2 f1f3 	udiv	r1, r2, r3
 8004cf0:	fb01 f303 	mul.w	r3, r1, r3
 8004cf4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d112      	bne.n	8004d20 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004cfa:	78fb      	ldrb	r3, [r7, #3]
 8004cfc:	f003 020f 	and.w	r2, r3, #15
 8004d00:	6879      	ldr	r1, [r7, #4]
 8004d02:	4613      	mov	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	440b      	add	r3, r1
 8004d0c:	3318      	adds	r3, #24
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004d12:	78f9      	ldrb	r1, [r7, #3]
 8004d14:	2300      	movs	r3, #0
 8004d16:	2200      	movs	r2, #0
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f002 f962 	bl	8006fe2 <USBD_LL_Transmit>
 8004d1e:	e01f      	b.n	8004d60 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	33b0      	adds	r3, #176	@ 0xb0
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d010      	beq.n	8004d60 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	33b0      	adds	r3, #176	@ 0xb0
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8004d5c:	78fa      	ldrb	r2, [r7, #3]
 8004d5e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	460b      	mov	r3, r1
 8004d74:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	32b0      	adds	r2, #176	@ 0xb0
 8004d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d84:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	32b0      	adds	r2, #176	@ 0xb0
 8004d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e01a      	b.n	8004dd2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004d9c:	78fb      	ldrb	r3, [r7, #3]
 8004d9e:	4619      	mov	r1, r3
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f002 f960 	bl	8007066 <USBD_LL_GetRxDataSize>
 8004da6:	4602      	mov	r2, r0
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	33b0      	adds	r3, #176	@ 0xb0
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8004dcc:	4611      	mov	r1, r2
 8004dce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b084      	sub	sp, #16
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	32b0      	adds	r2, #176	@ 0xb0
 8004dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004df0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e024      	b.n	8004e46 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	33b0      	adds	r3, #176	@ 0xb0
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d019      	beq.n	8004e44 <USBD_CDC_EP0_RxReady+0x6a>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004e16:	2bff      	cmp	r3, #255	@ 0xff
 8004e18:	d014      	beq.n	8004e44 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	33b0      	adds	r3, #176	@ 0xb0
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8004e32:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004e3a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	22ff      	movs	r2, #255	@ 0xff
 8004e40:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
	...

08004e50 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004e58:	2182      	movs	r1, #130	@ 0x82
 8004e5a:	4818      	ldr	r0, [pc, #96]	@ (8004ebc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004e5c:	f000 fd0f 	bl	800587e <USBD_GetEpDesc>
 8004e60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004e62:	2101      	movs	r1, #1
 8004e64:	4815      	ldr	r0, [pc, #84]	@ (8004ebc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004e66:	f000 fd0a 	bl	800587e <USBD_GetEpDesc>
 8004e6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004e6c:	2181      	movs	r1, #129	@ 0x81
 8004e6e:	4813      	ldr	r0, [pc, #76]	@ (8004ebc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004e70:	f000 fd05 	bl	800587e <USBD_GetEpDesc>
 8004e74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2210      	movs	r2, #16
 8004e80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d006      	beq.n	8004e96 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e90:	711a      	strb	r2, [r3, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d006      	beq.n	8004eaa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ea4:	711a      	strb	r2, [r3, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2243      	movs	r2, #67	@ 0x43
 8004eae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004eb0:	4b02      	ldr	r3, [pc, #8]	@ (8004ebc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	24000050 	.word	0x24000050

08004ec0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004ec8:	2182      	movs	r1, #130	@ 0x82
 8004eca:	4818      	ldr	r0, [pc, #96]	@ (8004f2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004ecc:	f000 fcd7 	bl	800587e <USBD_GetEpDesc>
 8004ed0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	4815      	ldr	r0, [pc, #84]	@ (8004f2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004ed6:	f000 fcd2 	bl	800587e <USBD_GetEpDesc>
 8004eda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004edc:	2181      	movs	r1, #129	@ 0x81
 8004ede:	4813      	ldr	r0, [pc, #76]	@ (8004f2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004ee0:	f000 fccd 	bl	800587e <USBD_GetEpDesc>
 8004ee4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d002      	beq.n	8004ef2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	2210      	movs	r2, #16
 8004ef0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d006      	beq.n	8004f06 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	2200      	movs	r2, #0
 8004efc:	711a      	strb	r2, [r3, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f042 0202 	orr.w	r2, r2, #2
 8004f04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d006      	beq.n	8004f1a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	711a      	strb	r2, [r3, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f042 0202 	orr.w	r2, r2, #2
 8004f18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2243      	movs	r2, #67	@ 0x43
 8004f1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004f20:	4b02      	ldr	r3, [pc, #8]	@ (8004f2c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	24000050 	.word	0x24000050

08004f30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004f38:	2182      	movs	r1, #130	@ 0x82
 8004f3a:	4818      	ldr	r0, [pc, #96]	@ (8004f9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004f3c:	f000 fc9f 	bl	800587e <USBD_GetEpDesc>
 8004f40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004f42:	2101      	movs	r1, #1
 8004f44:	4815      	ldr	r0, [pc, #84]	@ (8004f9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004f46:	f000 fc9a 	bl	800587e <USBD_GetEpDesc>
 8004f4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004f4c:	2181      	movs	r1, #129	@ 0x81
 8004f4e:	4813      	ldr	r0, [pc, #76]	@ (8004f9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004f50:	f000 fc95 	bl	800587e <USBD_GetEpDesc>
 8004f54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2210      	movs	r2, #16
 8004f60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d006      	beq.n	8004f76 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f70:	711a      	strb	r2, [r3, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d006      	beq.n	8004f8a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f84:	711a      	strb	r2, [r3, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2243      	movs	r2, #67	@ 0x43
 8004f8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004f90:	4b02      	ldr	r3, [pc, #8]	@ (8004f9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	24000050 	.word	0x24000050

08004fa0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	220a      	movs	r2, #10
 8004fac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004fae:	4b03      	ldr	r3, [pc, #12]	@ (8004fbc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	2400000c 	.word	0x2400000c

08004fc0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e009      	b.n	8004fe8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	33b0      	adds	r3, #176	@ 0xb0
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	32b0      	adds	r2, #176	@ 0xb0
 800500a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800500e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005016:	2303      	movs	r3, #3
 8005018:	e008      	b.n	800502c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	371c      	adds	r7, #28
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	32b0      	adds	r2, #176	@ 0xb0
 800504c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005050:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005058:	2303      	movs	r3, #3
 800505a:	e004      	b.n	8005066 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
	...

08005074 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	32b0      	adds	r2, #176	@ 0xb0
 8005086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800508a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	32b0      	adds	r2, #176	@ 0xb0
 8005096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800509e:	2303      	movs	r3, #3
 80050a0:	e018      	b.n	80050d4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	7c1b      	ldrb	r3, [r3, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10a      	bne.n	80050c0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80050aa:	4b0c      	ldr	r3, [pc, #48]	@ (80050dc <USBD_CDC_ReceivePacket+0x68>)
 80050ac:	7819      	ldrb	r1, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80050b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f001 ffb3 	bl	8007024 <USBD_LL_PrepareReceive>
 80050be:	e008      	b.n	80050d2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80050c0:	4b06      	ldr	r3, [pc, #24]	@ (80050dc <USBD_CDC_ReceivePacket+0x68>)
 80050c2:	7819      	ldrb	r1, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80050ca:	2340      	movs	r3, #64	@ 0x40
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f001 ffa9 	bl	8007024 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	24000094 	.word	0x24000094

080050e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	4613      	mov	r3, r2
 80050ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e01f      	b.n	8005138 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	79fa      	ldrb	r2, [r7, #7]
 800512a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f001 fe21 	bl	8006d74 <USBD_LL_Init>
 8005132:	4603      	mov	r3, r0
 8005134:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005136:	7dfb      	ldrb	r3, [r7, #23]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3718      	adds	r7, #24
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800514a:	2300      	movs	r3, #0
 800514c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005154:	2303      	movs	r3, #3
 8005156:	e025      	b.n	80051a4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	32ae      	adds	r2, #174	@ 0xae
 800516a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800516e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00f      	beq.n	8005194 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	32ae      	adds	r2, #174	@ 0xae
 800517e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005184:	f107 020e 	add.w	r2, r7, #14
 8005188:	4610      	mov	r0, r2
 800518a:	4798      	blx	r3
 800518c:	4602      	mov	r2, r0
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800519a:	1c5a      	adds	r2, r3, #1
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f001 fe2b 	bl	8006e10 <USBD_LL_Start>
 80051ba:	4603      	mov	r3, r0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80051cc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b084      	sub	sp, #16
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	460b      	mov	r3, r1
 80051e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d009      	beq.n	8005208 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	78fa      	ldrb	r2, [r7, #3]
 80051fe:	4611      	mov	r1, r2
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	4798      	blx	r3
 8005204:	4603      	mov	r3, r0
 8005206:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005208:	7bfb      	ldrb	r3, [r7, #15]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b084      	sub	sp, #16
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	460b      	mov	r3, r1
 800521c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	78fa      	ldrb	r2, [r7, #3]
 800522c:	4611      	mov	r1, r2
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	4798      	blx	r3
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005238:	2303      	movs	r3, #3
 800523a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800523c:	7bfb      	ldrb	r3, [r7, #15]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b084      	sub	sp, #16
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
 800524e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005256:	6839      	ldr	r1, [r7, #0]
 8005258:	4618      	mov	r0, r3
 800525a:	f001 f936 	bl	80064ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800526c:	461a      	mov	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800527a:	f003 031f 	and.w	r3, r3, #31
 800527e:	2b02      	cmp	r3, #2
 8005280:	d01a      	beq.n	80052b8 <USBD_LL_SetupStage+0x72>
 8005282:	2b02      	cmp	r3, #2
 8005284:	d822      	bhi.n	80052cc <USBD_LL_SetupStage+0x86>
 8005286:	2b00      	cmp	r3, #0
 8005288:	d002      	beq.n	8005290 <USBD_LL_SetupStage+0x4a>
 800528a:	2b01      	cmp	r3, #1
 800528c:	d00a      	beq.n	80052a4 <USBD_LL_SetupStage+0x5e>
 800528e:	e01d      	b.n	80052cc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005296:	4619      	mov	r1, r3
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fb63 	bl	8005964 <USBD_StdDevReq>
 800529e:	4603      	mov	r3, r0
 80052a0:	73fb      	strb	r3, [r7, #15]
      break;
 80052a2:	e020      	b.n	80052e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80052aa:	4619      	mov	r1, r3
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 fbcb 	bl	8005a48 <USBD_StdItfReq>
 80052b2:	4603      	mov	r3, r0
 80052b4:	73fb      	strb	r3, [r7, #15]
      break;
 80052b6:	e016      	b.n	80052e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80052be:	4619      	mov	r1, r3
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fc2d 	bl	8005b20 <USBD_StdEPReq>
 80052c6:	4603      	mov	r3, r0
 80052c8:	73fb      	strb	r3, [r7, #15]
      break;
 80052ca:	e00c      	b.n	80052e6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80052d2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	4619      	mov	r1, r3
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f001 fdf8 	bl	8006ed0 <USBD_LL_StallEP>
 80052e0:	4603      	mov	r3, r0
 80052e2:	73fb      	strb	r3, [r7, #15]
      break;
 80052e4:	bf00      	nop
  }

  return ret;
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	460b      	mov	r3, r1
 80052fa:	607a      	str	r2, [r7, #4]
 80052fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005302:	7afb      	ldrb	r3, [r7, #11]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d16e      	bne.n	80053e6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800530e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005316:	2b03      	cmp	r3, #3
 8005318:	f040 8098 	bne.w	800544c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	429a      	cmp	r2, r3
 8005326:	d913      	bls.n	8005350 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	1ad2      	subs	r2, r2, r3
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	68da      	ldr	r2, [r3, #12]
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	4293      	cmp	r3, r2
 8005340:	bf28      	it	cs
 8005342:	4613      	movcs	r3, r2
 8005344:	461a      	mov	r2, r3
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f001 f9be 	bl	80066ca <USBD_CtlContinueRx>
 800534e:	e07d      	b.n	800544c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005356:	f003 031f 	and.w	r3, r3, #31
 800535a:	2b02      	cmp	r3, #2
 800535c:	d014      	beq.n	8005388 <USBD_LL_DataOutStage+0x98>
 800535e:	2b02      	cmp	r3, #2
 8005360:	d81d      	bhi.n	800539e <USBD_LL_DataOutStage+0xae>
 8005362:	2b00      	cmp	r3, #0
 8005364:	d002      	beq.n	800536c <USBD_LL_DataOutStage+0x7c>
 8005366:	2b01      	cmp	r3, #1
 8005368:	d003      	beq.n	8005372 <USBD_LL_DataOutStage+0x82>
 800536a:	e018      	b.n	800539e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	75bb      	strb	r3, [r7, #22]
            break;
 8005370:	e018      	b.n	80053a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005378:	b2db      	uxtb	r3, r3
 800537a:	4619      	mov	r1, r3
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 fa64 	bl	800584a <USBD_CoreFindIF>
 8005382:	4603      	mov	r3, r0
 8005384:	75bb      	strb	r3, [r7, #22]
            break;
 8005386:	e00d      	b.n	80053a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800538e:	b2db      	uxtb	r3, r3
 8005390:	4619      	mov	r1, r3
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 fa66 	bl	8005864 <USBD_CoreFindEP>
 8005398:	4603      	mov	r3, r0
 800539a:	75bb      	strb	r3, [r7, #22]
            break;
 800539c:	e002      	b.n	80053a4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800539e:	2300      	movs	r3, #0
 80053a0:	75bb      	strb	r3, [r7, #22]
            break;
 80053a2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80053a4:	7dbb      	ldrb	r3, [r7, #22]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d119      	bne.n	80053de <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d113      	bne.n	80053de <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80053b6:	7dba      	ldrb	r2, [r7, #22]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	32ae      	adds	r2, #174	@ 0xae
 80053bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00b      	beq.n	80053de <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80053c6:	7dba      	ldrb	r2, [r7, #22]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80053ce:	7dba      	ldrb	r2, [r7, #22]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	32ae      	adds	r2, #174	@ 0xae
 80053d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f001 f984 	bl	80066ec <USBD_CtlSendStatus>
 80053e4:	e032      	b.n	800544c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80053e6:	7afb      	ldrb	r3, [r7, #11]
 80053e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	4619      	mov	r1, r3
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 fa37 	bl	8005864 <USBD_CoreFindEP>
 80053f6:	4603      	mov	r3, r0
 80053f8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80053fa:	7dbb      	ldrb	r3, [r7, #22]
 80053fc:	2bff      	cmp	r3, #255	@ 0xff
 80053fe:	d025      	beq.n	800544c <USBD_LL_DataOutStage+0x15c>
 8005400:	7dbb      	ldrb	r3, [r7, #22]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d122      	bne.n	800544c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b03      	cmp	r3, #3
 8005410:	d117      	bne.n	8005442 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005412:	7dba      	ldrb	r2, [r7, #22]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	32ae      	adds	r2, #174	@ 0xae
 8005418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00f      	beq.n	8005442 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005422:	7dba      	ldrb	r2, [r7, #22]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800542a:	7dba      	ldrb	r2, [r7, #22]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	32ae      	adds	r2, #174	@ 0xae
 8005430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	7afa      	ldrb	r2, [r7, #11]
 8005438:	4611      	mov	r1, r2
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	4798      	blx	r3
 800543e:	4603      	mov	r3, r0
 8005440:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005442:	7dfb      	ldrb	r3, [r7, #23]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005448:	7dfb      	ldrb	r3, [r7, #23]
 800544a:	e000      	b.n	800544e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b086      	sub	sp, #24
 800545a:	af00      	add	r7, sp, #0
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	460b      	mov	r3, r1
 8005460:	607a      	str	r2, [r7, #4]
 8005462:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005464:	7afb      	ldrb	r3, [r7, #11]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d16f      	bne.n	800554a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3314      	adds	r3, #20
 800546e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005476:	2b02      	cmp	r3, #2
 8005478:	d15a      	bne.n	8005530 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	429a      	cmp	r2, r3
 8005484:	d914      	bls.n	80054b0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	1ad2      	subs	r2, r2, r3
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	461a      	mov	r2, r3
 800549a:	6879      	ldr	r1, [r7, #4]
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f001 f8e6 	bl	800666e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80054a2:	2300      	movs	r3, #0
 80054a4:	2200      	movs	r2, #0
 80054a6:	2100      	movs	r1, #0
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f001 fdbb 	bl	8007024 <USBD_LL_PrepareReceive>
 80054ae:	e03f      	b.n	8005530 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d11c      	bne.n	80054f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d316      	bcc.n	80054f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d20f      	bcs.n	80054f6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80054d6:	2200      	movs	r2, #0
 80054d8:	2100      	movs	r1, #0
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f001 f8c7 	bl	800666e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80054e8:	2300      	movs	r3, #0
 80054ea:	2200      	movs	r2, #0
 80054ec:	2100      	movs	r1, #0
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f001 fd98 	bl	8007024 <USBD_LL_PrepareReceive>
 80054f4:	e01c      	b.n	8005530 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b03      	cmp	r3, #3
 8005500:	d10f      	bne.n	8005522 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d009      	beq.n	8005522 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005522:	2180      	movs	r1, #128	@ 0x80
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f001 fcd3 	bl	8006ed0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f001 f8f1 	bl	8006712 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d03a      	beq.n	80055b0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f7ff fe42 	bl	80051c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005548:	e032      	b.n	80055b0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800554a:	7afb      	ldrb	r3, [r7, #11]
 800554c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005550:	b2db      	uxtb	r3, r3
 8005552:	4619      	mov	r1, r3
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f000 f985 	bl	8005864 <USBD_CoreFindEP>
 800555a:	4603      	mov	r3, r0
 800555c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800555e:	7dfb      	ldrb	r3, [r7, #23]
 8005560:	2bff      	cmp	r3, #255	@ 0xff
 8005562:	d025      	beq.n	80055b0 <USBD_LL_DataInStage+0x15a>
 8005564:	7dfb      	ldrb	r3, [r7, #23]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d122      	bne.n	80055b0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b03      	cmp	r3, #3
 8005574:	d11c      	bne.n	80055b0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005576:	7dfa      	ldrb	r2, [r7, #23]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	32ae      	adds	r2, #174	@ 0xae
 800557c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d014      	beq.n	80055b0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005586:	7dfa      	ldrb	r2, [r7, #23]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800558e:	7dfa      	ldrb	r2, [r7, #23]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	32ae      	adds	r2, #174	@ 0xae
 8005594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	7afa      	ldrb	r2, [r7, #11]
 800559c:	4611      	mov	r1, r2
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	4798      	blx	r3
 80055a2:	4603      	mov	r3, r0
 80055a4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80055a6:	7dbb      	ldrb	r3, [r7, #22]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80055ac:	7dbb      	ldrb	r3, [r7, #22]
 80055ae:	e000      	b.n	80055b2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3718      	adds	r7, #24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b084      	sub	sp, #16
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d014      	beq.n	8005620 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00e      	beq.n	8005620 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	6852      	ldr	r2, [r2, #4]
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	4611      	mov	r1, r2
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	4798      	blx	r3
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800561c:	2303      	movs	r3, #3
 800561e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005620:	2340      	movs	r3, #64	@ 0x40
 8005622:	2200      	movs	r2, #0
 8005624:	2100      	movs	r1, #0
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f001 fc0d 	bl	8006e46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2240      	movs	r2, #64	@ 0x40
 8005638:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800563c:	2340      	movs	r3, #64	@ 0x40
 800563e:	2200      	movs	r2, #0
 8005640:	2180      	movs	r1, #128	@ 0x80
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f001 fbff 	bl	8006e46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2240      	movs	r2, #64	@ 0x40
 8005652:	621a      	str	r2, [r3, #32]

  return ret;
 8005654:	7bfb      	ldrb	r3, [r7, #15]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	460b      	mov	r3, r1
 8005668:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	78fa      	ldrb	r2, [r7, #3]
 800566e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b04      	cmp	r3, #4
 8005690:	d006      	beq.n	80056a0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005698:	b2da      	uxtb	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2204      	movs	r2, #4
 80056a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	d106      	bne.n	80056d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b082      	sub	sp, #8
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b03      	cmp	r3, #3
 80056f8:	d110      	bne.n	800571c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00b      	beq.n	800571c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d005      	beq.n	800571c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	460b      	mov	r3, r1
 8005730:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	32ae      	adds	r2, #174	@ 0xae
 800573c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005744:	2303      	movs	r3, #3
 8005746:	e01c      	b.n	8005782 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b03      	cmp	r3, #3
 8005752:	d115      	bne.n	8005780 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	32ae      	adds	r2, #174	@ 0xae
 800575e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00b      	beq.n	8005780 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	32ae      	adds	r2, #174	@ 0xae
 8005772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	78fa      	ldrb	r2, [r7, #3]
 800577a:	4611      	mov	r1, r2
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b082      	sub	sp, #8
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	460b      	mov	r3, r1
 8005794:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	32ae      	adds	r2, #174	@ 0xae
 80057a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e01c      	b.n	80057e6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d115      	bne.n	80057e4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	32ae      	adds	r2, #174	@ 0xae
 80057c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00b      	beq.n	80057e4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	32ae      	adds	r2, #174	@ 0xae
 80057d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057dc:	78fa      	ldrb	r2, [r7, #3]
 80057de:	4611      	mov	r1, r2
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00e      	beq.n	8005840 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6852      	ldr	r2, [r2, #4]
 800582e:	b2d2      	uxtb	r2, r2
 8005830:	4611      	mov	r1, r2
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	4798      	blx	r3
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800583c:	2303      	movs	r3, #3
 800583e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005840:	7bfb      	ldrb	r3, [r7, #15]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	460b      	mov	r3, r1
 8005854:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005856:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005858:	4618      	mov	r0, r3
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005870:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005872:	4618      	mov	r0, r3
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b086      	sub	sp, #24
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	460b      	mov	r3, r1
 8005888:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005892:	2300      	movs	r3, #0
 8005894:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	885b      	ldrh	r3, [r3, #2]
 800589a:	b29b      	uxth	r3, r3
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	7812      	ldrb	r2, [r2, #0]
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d91f      	bls.n	80058e4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80058aa:	e013      	b.n	80058d4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80058ac:	f107 030a 	add.w	r3, r7, #10
 80058b0:	4619      	mov	r1, r3
 80058b2:	6978      	ldr	r0, [r7, #20]
 80058b4:	f000 f81b 	bl	80058ee <USBD_GetNextDesc>
 80058b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	785b      	ldrb	r3, [r3, #1]
 80058be:	2b05      	cmp	r3, #5
 80058c0:	d108      	bne.n	80058d4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	789b      	ldrb	r3, [r3, #2]
 80058ca:	78fa      	ldrb	r2, [r7, #3]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d008      	beq.n	80058e2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80058d0:	2300      	movs	r3, #0
 80058d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	885b      	ldrh	r3, [r3, #2]
 80058d8:	b29a      	uxth	r2, r3
 80058da:	897b      	ldrh	r3, [r7, #10]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d8e5      	bhi.n	80058ac <USBD_GetEpDesc+0x2e>
 80058e0:	e000      	b.n	80058e4 <USBD_GetEpDesc+0x66>
          break;
 80058e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80058e4:	693b      	ldr	r3, [r7, #16]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b085      	sub	sp, #20
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	881b      	ldrh	r3, [r3, #0]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	7812      	ldrb	r2, [r2, #0]
 8005904:	4413      	add	r3, r2
 8005906:	b29a      	uxth	r2, r3
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4413      	add	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005918:	68fb      	ldr	r3, [r7, #12]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005926:	b480      	push	{r7}
 8005928:	b087      	sub	sp, #28
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	3301      	adds	r3, #1
 800593c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005944:	8a3b      	ldrh	r3, [r7, #16]
 8005946:	021b      	lsls	r3, r3, #8
 8005948:	b21a      	sxth	r2, r3
 800594a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800594e:	4313      	orrs	r3, r2
 8005950:	b21b      	sxth	r3, r3
 8005952:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005954:	89fb      	ldrh	r3, [r7, #14]
}
 8005956:	4618      	mov	r0, r3
 8005958:	371c      	adds	r7, #28
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
	...

08005964 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800596e:	2300      	movs	r3, #0
 8005970:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800597a:	2b40      	cmp	r3, #64	@ 0x40
 800597c:	d005      	beq.n	800598a <USBD_StdDevReq+0x26>
 800597e:	2b40      	cmp	r3, #64	@ 0x40
 8005980:	d857      	bhi.n	8005a32 <USBD_StdDevReq+0xce>
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00f      	beq.n	80059a6 <USBD_StdDevReq+0x42>
 8005986:	2b20      	cmp	r3, #32
 8005988:	d153      	bne.n	8005a32 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	32ae      	adds	r2, #174	@ 0xae
 8005994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	6839      	ldr	r1, [r7, #0]
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	4798      	blx	r3
 80059a0:	4603      	mov	r3, r0
 80059a2:	73fb      	strb	r3, [r7, #15]
      break;
 80059a4:	e04a      	b.n	8005a3c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	785b      	ldrb	r3, [r3, #1]
 80059aa:	2b09      	cmp	r3, #9
 80059ac:	d83b      	bhi.n	8005a26 <USBD_StdDevReq+0xc2>
 80059ae:	a201      	add	r2, pc, #4	@ (adr r2, 80059b4 <USBD_StdDevReq+0x50>)
 80059b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b4:	08005a09 	.word	0x08005a09
 80059b8:	08005a1d 	.word	0x08005a1d
 80059bc:	08005a27 	.word	0x08005a27
 80059c0:	08005a13 	.word	0x08005a13
 80059c4:	08005a27 	.word	0x08005a27
 80059c8:	080059e7 	.word	0x080059e7
 80059cc:	080059dd 	.word	0x080059dd
 80059d0:	08005a27 	.word	0x08005a27
 80059d4:	080059ff 	.word	0x080059ff
 80059d8:	080059f1 	.word	0x080059f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80059dc:	6839      	ldr	r1, [r7, #0]
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fa3c 	bl	8005e5c <USBD_GetDescriptor>
          break;
 80059e4:	e024      	b.n	8005a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80059e6:	6839      	ldr	r1, [r7, #0]
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fbcb 	bl	8006184 <USBD_SetAddress>
          break;
 80059ee:	e01f      	b.n	8005a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80059f0:	6839      	ldr	r1, [r7, #0]
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fc0a 	bl	800620c <USBD_SetConfig>
 80059f8:	4603      	mov	r3, r0
 80059fa:	73fb      	strb	r3, [r7, #15]
          break;
 80059fc:	e018      	b.n	8005a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80059fe:	6839      	ldr	r1, [r7, #0]
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fcad 	bl	8006360 <USBD_GetConfig>
          break;
 8005a06:	e013      	b.n	8005a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005a08:	6839      	ldr	r1, [r7, #0]
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fcde 	bl	80063cc <USBD_GetStatus>
          break;
 8005a10:	e00e      	b.n	8005a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005a12:	6839      	ldr	r1, [r7, #0]
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fd0d 	bl	8006434 <USBD_SetFeature>
          break;
 8005a1a:	e009      	b.n	8005a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005a1c:	6839      	ldr	r1, [r7, #0]
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fd31 	bl	8006486 <USBD_ClrFeature>
          break;
 8005a24:	e004      	b.n	8005a30 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005a26:	6839      	ldr	r1, [r7, #0]
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fd88 	bl	800653e <USBD_CtlError>
          break;
 8005a2e:	bf00      	nop
      }
      break;
 8005a30:	e004      	b.n	8005a3c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005a32:	6839      	ldr	r1, [r7, #0]
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fd82 	bl	800653e <USBD_CtlError>
      break;
 8005a3a:	bf00      	nop
  }

  return ret;
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop

08005a48 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005a5e:	2b40      	cmp	r3, #64	@ 0x40
 8005a60:	d005      	beq.n	8005a6e <USBD_StdItfReq+0x26>
 8005a62:	2b40      	cmp	r3, #64	@ 0x40
 8005a64:	d852      	bhi.n	8005b0c <USBD_StdItfReq+0xc4>
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <USBD_StdItfReq+0x26>
 8005a6a:	2b20      	cmp	r3, #32
 8005a6c:	d14e      	bne.n	8005b0c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	3b01      	subs	r3, #1
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d840      	bhi.n	8005afe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	889b      	ldrh	r3, [r3, #4]
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d836      	bhi.n	8005af4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	889b      	ldrh	r3, [r3, #4]
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7ff fedb 	bl	800584a <USBD_CoreFindIF>
 8005a94:	4603      	mov	r3, r0
 8005a96:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a98:	7bbb      	ldrb	r3, [r7, #14]
 8005a9a:	2bff      	cmp	r3, #255	@ 0xff
 8005a9c:	d01d      	beq.n	8005ada <USBD_StdItfReq+0x92>
 8005a9e:	7bbb      	ldrb	r3, [r7, #14]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d11a      	bne.n	8005ada <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005aa4:	7bba      	ldrb	r2, [r7, #14]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	32ae      	adds	r2, #174	@ 0xae
 8005aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00f      	beq.n	8005ad4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005ab4:	7bba      	ldrb	r2, [r7, #14]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005abc:	7bba      	ldrb	r2, [r7, #14]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	32ae      	adds	r2, #174	@ 0xae
 8005ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	6839      	ldr	r1, [r7, #0]
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	4798      	blx	r3
 8005ace:	4603      	mov	r3, r0
 8005ad0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005ad2:	e004      	b.n	8005ade <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005ad8:	e001      	b.n	8005ade <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005ada:	2303      	movs	r3, #3
 8005adc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	88db      	ldrh	r3, [r3, #6]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d110      	bne.n	8005b08 <USBD_StdItfReq+0xc0>
 8005ae6:	7bfb      	ldrb	r3, [r7, #15]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10d      	bne.n	8005b08 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fdfd 	bl	80066ec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005af2:	e009      	b.n	8005b08 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005af4:	6839      	ldr	r1, [r7, #0]
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fd21 	bl	800653e <USBD_CtlError>
          break;
 8005afc:	e004      	b.n	8005b08 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005afe:	6839      	ldr	r1, [r7, #0]
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 fd1c 	bl	800653e <USBD_CtlError>
          break;
 8005b06:	e000      	b.n	8005b0a <USBD_StdItfReq+0xc2>
          break;
 8005b08:	bf00      	nop
      }
      break;
 8005b0a:	e004      	b.n	8005b16 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005b0c:	6839      	ldr	r1, [r7, #0]
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fd15 	bl	800653e <USBD_CtlError>
      break;
 8005b14:	bf00      	nop
  }

  return ret;
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	889b      	ldrh	r3, [r3, #4]
 8005b32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005b3c:	2b40      	cmp	r3, #64	@ 0x40
 8005b3e:	d007      	beq.n	8005b50 <USBD_StdEPReq+0x30>
 8005b40:	2b40      	cmp	r3, #64	@ 0x40
 8005b42:	f200 817f 	bhi.w	8005e44 <USBD_StdEPReq+0x324>
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d02a      	beq.n	8005ba0 <USBD_StdEPReq+0x80>
 8005b4a:	2b20      	cmp	r3, #32
 8005b4c:	f040 817a 	bne.w	8005e44 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005b50:	7bbb      	ldrb	r3, [r7, #14]
 8005b52:	4619      	mov	r1, r3
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7ff fe85 	bl	8005864 <USBD_CoreFindEP>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b5e:	7b7b      	ldrb	r3, [r7, #13]
 8005b60:	2bff      	cmp	r3, #255	@ 0xff
 8005b62:	f000 8174 	beq.w	8005e4e <USBD_StdEPReq+0x32e>
 8005b66:	7b7b      	ldrb	r3, [r7, #13]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f040 8170 	bne.w	8005e4e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005b6e:	7b7a      	ldrb	r2, [r7, #13]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005b76:	7b7a      	ldrb	r2, [r7, #13]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	32ae      	adds	r2, #174	@ 0xae
 8005b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 8163 	beq.w	8005e4e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005b88:	7b7a      	ldrb	r2, [r7, #13]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	32ae      	adds	r2, #174	@ 0xae
 8005b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	6839      	ldr	r1, [r7, #0]
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	4798      	blx	r3
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b9e:	e156      	b.n	8005e4e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	785b      	ldrb	r3, [r3, #1]
 8005ba4:	2b03      	cmp	r3, #3
 8005ba6:	d008      	beq.n	8005bba <USBD_StdEPReq+0x9a>
 8005ba8:	2b03      	cmp	r3, #3
 8005baa:	f300 8145 	bgt.w	8005e38 <USBD_StdEPReq+0x318>
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f000 809b 	beq.w	8005cea <USBD_StdEPReq+0x1ca>
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d03c      	beq.n	8005c32 <USBD_StdEPReq+0x112>
 8005bb8:	e13e      	b.n	8005e38 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d002      	beq.n	8005bcc <USBD_StdEPReq+0xac>
 8005bc6:	2b03      	cmp	r3, #3
 8005bc8:	d016      	beq.n	8005bf8 <USBD_StdEPReq+0xd8>
 8005bca:	e02c      	b.n	8005c26 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bcc:	7bbb      	ldrb	r3, [r7, #14]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00d      	beq.n	8005bee <USBD_StdEPReq+0xce>
 8005bd2:	7bbb      	ldrb	r3, [r7, #14]
 8005bd4:	2b80      	cmp	r3, #128	@ 0x80
 8005bd6:	d00a      	beq.n	8005bee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005bd8:	7bbb      	ldrb	r3, [r7, #14]
 8005bda:	4619      	mov	r1, r3
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f001 f977 	bl	8006ed0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005be2:	2180      	movs	r1, #128	@ 0x80
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f001 f973 	bl	8006ed0 <USBD_LL_StallEP>
 8005bea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005bec:	e020      	b.n	8005c30 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005bee:	6839      	ldr	r1, [r7, #0]
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fca4 	bl	800653e <USBD_CtlError>
              break;
 8005bf6:	e01b      	b.n	8005c30 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	885b      	ldrh	r3, [r3, #2]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10e      	bne.n	8005c1e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005c00:	7bbb      	ldrb	r3, [r7, #14]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00b      	beq.n	8005c1e <USBD_StdEPReq+0xfe>
 8005c06:	7bbb      	ldrb	r3, [r7, #14]
 8005c08:	2b80      	cmp	r3, #128	@ 0x80
 8005c0a:	d008      	beq.n	8005c1e <USBD_StdEPReq+0xfe>
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	88db      	ldrh	r3, [r3, #6]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d104      	bne.n	8005c1e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c14:	7bbb      	ldrb	r3, [r7, #14]
 8005c16:	4619      	mov	r1, r3
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f001 f959 	bl	8006ed0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fd64 	bl	80066ec <USBD_CtlSendStatus>

              break;
 8005c24:	e004      	b.n	8005c30 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005c26:	6839      	ldr	r1, [r7, #0]
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 fc88 	bl	800653e <USBD_CtlError>
              break;
 8005c2e:	bf00      	nop
          }
          break;
 8005c30:	e107      	b.n	8005e42 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d002      	beq.n	8005c44 <USBD_StdEPReq+0x124>
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d016      	beq.n	8005c70 <USBD_StdEPReq+0x150>
 8005c42:	e04b      	b.n	8005cdc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c44:	7bbb      	ldrb	r3, [r7, #14]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00d      	beq.n	8005c66 <USBD_StdEPReq+0x146>
 8005c4a:	7bbb      	ldrb	r3, [r7, #14]
 8005c4c:	2b80      	cmp	r3, #128	@ 0x80
 8005c4e:	d00a      	beq.n	8005c66 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c50:	7bbb      	ldrb	r3, [r7, #14]
 8005c52:	4619      	mov	r1, r3
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f001 f93b 	bl	8006ed0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c5a:	2180      	movs	r1, #128	@ 0x80
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f001 f937 	bl	8006ed0 <USBD_LL_StallEP>
 8005c62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c64:	e040      	b.n	8005ce8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005c66:	6839      	ldr	r1, [r7, #0]
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 fc68 	bl	800653e <USBD_CtlError>
              break;
 8005c6e:	e03b      	b.n	8005ce8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	885b      	ldrh	r3, [r3, #2]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d136      	bne.n	8005ce6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005c78:	7bbb      	ldrb	r3, [r7, #14]
 8005c7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d004      	beq.n	8005c8c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005c82:	7bbb      	ldrb	r3, [r7, #14]
 8005c84:	4619      	mov	r1, r3
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f001 f941 	bl	8006f0e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fd2d 	bl	80066ec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005c92:	7bbb      	ldrb	r3, [r7, #14]
 8005c94:	4619      	mov	r1, r3
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7ff fde4 	bl	8005864 <USBD_CoreFindEP>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ca0:	7b7b      	ldrb	r3, [r7, #13]
 8005ca2:	2bff      	cmp	r3, #255	@ 0xff
 8005ca4:	d01f      	beq.n	8005ce6 <USBD_StdEPReq+0x1c6>
 8005ca6:	7b7b      	ldrb	r3, [r7, #13]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d11c      	bne.n	8005ce6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005cac:	7b7a      	ldrb	r2, [r7, #13]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005cb4:	7b7a      	ldrb	r2, [r7, #13]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	32ae      	adds	r2, #174	@ 0xae
 8005cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d010      	beq.n	8005ce6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005cc4:	7b7a      	ldrb	r2, [r7, #13]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	32ae      	adds	r2, #174	@ 0xae
 8005cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	6839      	ldr	r1, [r7, #0]
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	4798      	blx	r3
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005cda:	e004      	b.n	8005ce6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005cdc:	6839      	ldr	r1, [r7, #0]
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fc2d 	bl	800653e <USBD_CtlError>
              break;
 8005ce4:	e000      	b.n	8005ce8 <USBD_StdEPReq+0x1c8>
              break;
 8005ce6:	bf00      	nop
          }
          break;
 8005ce8:	e0ab      	b.n	8005e42 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d002      	beq.n	8005cfc <USBD_StdEPReq+0x1dc>
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d032      	beq.n	8005d60 <USBD_StdEPReq+0x240>
 8005cfa:	e097      	b.n	8005e2c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005cfc:	7bbb      	ldrb	r3, [r7, #14]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d007      	beq.n	8005d12 <USBD_StdEPReq+0x1f2>
 8005d02:	7bbb      	ldrb	r3, [r7, #14]
 8005d04:	2b80      	cmp	r3, #128	@ 0x80
 8005d06:	d004      	beq.n	8005d12 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005d08:	6839      	ldr	r1, [r7, #0]
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fc17 	bl	800653e <USBD_CtlError>
                break;
 8005d10:	e091      	b.n	8005e36 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	da0b      	bge.n	8005d32 <USBD_StdEPReq+0x212>
 8005d1a:	7bbb      	ldrb	r3, [r7, #14]
 8005d1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005d20:	4613      	mov	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	3310      	adds	r3, #16
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	3304      	adds	r3, #4
 8005d30:	e00b      	b.n	8005d4a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d32:	7bbb      	ldrb	r3, [r7, #14]
 8005d34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d38:	4613      	mov	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	4413      	add	r3, r2
 8005d48:	3304      	adds	r3, #4
 8005d4a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2202      	movs	r2, #2
 8005d56:	4619      	mov	r1, r3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fc6d 	bl	8006638 <USBD_CtlSendData>
              break;
 8005d5e:	e06a      	b.n	8005e36 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005d60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	da11      	bge.n	8005d8c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005d68:	7bbb      	ldrb	r3, [r7, #14]
 8005d6a:	f003 020f 	and.w	r2, r3, #15
 8005d6e:	6879      	ldr	r1, [r7, #4]
 8005d70:	4613      	mov	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	440b      	add	r3, r1
 8005d7a:	3324      	adds	r3, #36	@ 0x24
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d117      	bne.n	8005db2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005d82:	6839      	ldr	r1, [r7, #0]
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fbda 	bl	800653e <USBD_CtlError>
                  break;
 8005d8a:	e054      	b.n	8005e36 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005d8c:	7bbb      	ldrb	r3, [r7, #14]
 8005d8e:	f003 020f 	and.w	r2, r3, #15
 8005d92:	6879      	ldr	r1, [r7, #4]
 8005d94:	4613      	mov	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	440b      	add	r3, r1
 8005d9e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d104      	bne.n	8005db2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005da8:	6839      	ldr	r1, [r7, #0]
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fbc7 	bl	800653e <USBD_CtlError>
                  break;
 8005db0:	e041      	b.n	8005e36 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005db2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	da0b      	bge.n	8005dd2 <USBD_StdEPReq+0x2b2>
 8005dba:	7bbb      	ldrb	r3, [r7, #14]
 8005dbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	3310      	adds	r3, #16
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	4413      	add	r3, r2
 8005dce:	3304      	adds	r3, #4
 8005dd0:	e00b      	b.n	8005dea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005dd2:	7bbb      	ldrb	r3, [r7, #14]
 8005dd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005dd8:	4613      	mov	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	4413      	add	r3, r2
 8005de8:	3304      	adds	r3, #4
 8005dea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005dec:	7bbb      	ldrb	r3, [r7, #14]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <USBD_StdEPReq+0x2d8>
 8005df2:	7bbb      	ldrb	r3, [r7, #14]
 8005df4:	2b80      	cmp	r3, #128	@ 0x80
 8005df6:	d103      	bne.n	8005e00 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	601a      	str	r2, [r3, #0]
 8005dfe:	e00e      	b.n	8005e1e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005e00:	7bbb      	ldrb	r3, [r7, #14]
 8005e02:	4619      	mov	r1, r3
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f001 f8a1 	bl	8006f4c <USBD_LL_IsStallEP>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2201      	movs	r2, #1
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	e002      	b.n	8005e1e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	2202      	movs	r2, #2
 8005e22:	4619      	mov	r1, r3
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fc07 	bl	8006638 <USBD_CtlSendData>
              break;
 8005e2a:	e004      	b.n	8005e36 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005e2c:	6839      	ldr	r1, [r7, #0]
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fb85 	bl	800653e <USBD_CtlError>
              break;
 8005e34:	bf00      	nop
          }
          break;
 8005e36:	e004      	b.n	8005e42 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fb7f 	bl	800653e <USBD_CtlError>
          break;
 8005e40:	bf00      	nop
      }
      break;
 8005e42:	e005      	b.n	8005e50 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005e44:	6839      	ldr	r1, [r7, #0]
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fb79 	bl	800653e <USBD_CtlError>
      break;
 8005e4c:	e000      	b.n	8005e50 <USBD_StdEPReq+0x330>
      break;
 8005e4e:	bf00      	nop
  }

  return ret;
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	885b      	ldrh	r3, [r3, #2]
 8005e76:	0a1b      	lsrs	r3, r3, #8
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	2b0e      	cmp	r3, #14
 8005e7e:	f200 8152 	bhi.w	8006126 <USBD_GetDescriptor+0x2ca>
 8005e82:	a201      	add	r2, pc, #4	@ (adr r2, 8005e88 <USBD_GetDescriptor+0x2c>)
 8005e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e88:	08005ef9 	.word	0x08005ef9
 8005e8c:	08005f11 	.word	0x08005f11
 8005e90:	08005f51 	.word	0x08005f51
 8005e94:	08006127 	.word	0x08006127
 8005e98:	08006127 	.word	0x08006127
 8005e9c:	080060c7 	.word	0x080060c7
 8005ea0:	080060f3 	.word	0x080060f3
 8005ea4:	08006127 	.word	0x08006127
 8005ea8:	08006127 	.word	0x08006127
 8005eac:	08006127 	.word	0x08006127
 8005eb0:	08006127 	.word	0x08006127
 8005eb4:	08006127 	.word	0x08006127
 8005eb8:	08006127 	.word	0x08006127
 8005ebc:	08006127 	.word	0x08006127
 8005ec0:	08005ec5 	.word	0x08005ec5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005eca:	69db      	ldr	r3, [r3, #28]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00b      	beq.n	8005ee8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ed6:	69db      	ldr	r3, [r3, #28]
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	7c12      	ldrb	r2, [r2, #16]
 8005edc:	f107 0108 	add.w	r1, r7, #8
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	4798      	blx	r3
 8005ee4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ee6:	e126      	b.n	8006136 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005ee8:	6839      	ldr	r1, [r7, #0]
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fb27 	bl	800653e <USBD_CtlError>
        err++;
 8005ef0:	7afb      	ldrb	r3, [r7, #11]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	72fb      	strb	r3, [r7, #11]
      break;
 8005ef6:	e11e      	b.n	8006136 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	7c12      	ldrb	r2, [r2, #16]
 8005f04:	f107 0108 	add.w	r1, r7, #8
 8005f08:	4610      	mov	r0, r2
 8005f0a:	4798      	blx	r3
 8005f0c:	60f8      	str	r0, [r7, #12]
      break;
 8005f0e:	e112      	b.n	8006136 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	7c1b      	ldrb	r3, [r3, #16]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10d      	bne.n	8005f34 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f20:	f107 0208 	add.w	r2, r7, #8
 8005f24:	4610      	mov	r0, r2
 8005f26:	4798      	blx	r3
 8005f28:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	2202      	movs	r2, #2
 8005f30:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005f32:	e100      	b.n	8006136 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f3c:	f107 0208 	add.w	r2, r7, #8
 8005f40:	4610      	mov	r0, r2
 8005f42:	4798      	blx	r3
 8005f44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	701a      	strb	r2, [r3, #0]
      break;
 8005f4e:	e0f2      	b.n	8006136 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	885b      	ldrh	r3, [r3, #2]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b05      	cmp	r3, #5
 8005f58:	f200 80ac 	bhi.w	80060b4 <USBD_GetDescriptor+0x258>
 8005f5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f64 <USBD_GetDescriptor+0x108>)
 8005f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f62:	bf00      	nop
 8005f64:	08005f7d 	.word	0x08005f7d
 8005f68:	08005fb1 	.word	0x08005fb1
 8005f6c:	08005fe5 	.word	0x08005fe5
 8005f70:	08006019 	.word	0x08006019
 8005f74:	0800604d 	.word	0x0800604d
 8005f78:	08006081 	.word	0x08006081
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00b      	beq.n	8005fa0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	7c12      	ldrb	r2, [r2, #16]
 8005f94:	f107 0108 	add.w	r1, r7, #8
 8005f98:	4610      	mov	r0, r2
 8005f9a:	4798      	blx	r3
 8005f9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f9e:	e091      	b.n	80060c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005fa0:	6839      	ldr	r1, [r7, #0]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 facb 	bl	800653e <USBD_CtlError>
            err++;
 8005fa8:	7afb      	ldrb	r3, [r7, #11]
 8005faa:	3301      	adds	r3, #1
 8005fac:	72fb      	strb	r3, [r7, #11]
          break;
 8005fae:	e089      	b.n	80060c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00b      	beq.n	8005fd4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	7c12      	ldrb	r2, [r2, #16]
 8005fc8:	f107 0108 	add.w	r1, r7, #8
 8005fcc:	4610      	mov	r0, r2
 8005fce:	4798      	blx	r3
 8005fd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fd2:	e077      	b.n	80060c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005fd4:	6839      	ldr	r1, [r7, #0]
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fab1 	bl	800653e <USBD_CtlError>
            err++;
 8005fdc:	7afb      	ldrb	r3, [r7, #11]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	72fb      	strb	r3, [r7, #11]
          break;
 8005fe2:	e06f      	b.n	80060c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00b      	beq.n	8006008 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	7c12      	ldrb	r2, [r2, #16]
 8005ffc:	f107 0108 	add.w	r1, r7, #8
 8006000:	4610      	mov	r0, r2
 8006002:	4798      	blx	r3
 8006004:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006006:	e05d      	b.n	80060c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006008:	6839      	ldr	r1, [r7, #0]
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fa97 	bl	800653e <USBD_CtlError>
            err++;
 8006010:	7afb      	ldrb	r3, [r7, #11]
 8006012:	3301      	adds	r3, #1
 8006014:	72fb      	strb	r3, [r7, #11]
          break;
 8006016:	e055      	b.n	80060c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00b      	beq.n	800603c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	7c12      	ldrb	r2, [r2, #16]
 8006030:	f107 0108 	add.w	r1, r7, #8
 8006034:	4610      	mov	r0, r2
 8006036:	4798      	blx	r3
 8006038:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800603a:	e043      	b.n	80060c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800603c:	6839      	ldr	r1, [r7, #0]
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fa7d 	bl	800653e <USBD_CtlError>
            err++;
 8006044:	7afb      	ldrb	r3, [r7, #11]
 8006046:	3301      	adds	r3, #1
 8006048:	72fb      	strb	r3, [r7, #11]
          break;
 800604a:	e03b      	b.n	80060c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00b      	beq.n	8006070 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	7c12      	ldrb	r2, [r2, #16]
 8006064:	f107 0108 	add.w	r1, r7, #8
 8006068:	4610      	mov	r0, r2
 800606a:	4798      	blx	r3
 800606c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800606e:	e029      	b.n	80060c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006070:	6839      	ldr	r1, [r7, #0]
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 fa63 	bl	800653e <USBD_CtlError>
            err++;
 8006078:	7afb      	ldrb	r3, [r7, #11]
 800607a:	3301      	adds	r3, #1
 800607c:	72fb      	strb	r3, [r7, #11]
          break;
 800607e:	e021      	b.n	80060c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00b      	beq.n	80060a4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	7c12      	ldrb	r2, [r2, #16]
 8006098:	f107 0108 	add.w	r1, r7, #8
 800609c:	4610      	mov	r0, r2
 800609e:	4798      	blx	r3
 80060a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80060a2:	e00f      	b.n	80060c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80060a4:	6839      	ldr	r1, [r7, #0]
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fa49 	bl	800653e <USBD_CtlError>
            err++;
 80060ac:	7afb      	ldrb	r3, [r7, #11]
 80060ae:	3301      	adds	r3, #1
 80060b0:	72fb      	strb	r3, [r7, #11]
          break;
 80060b2:	e007      	b.n	80060c4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80060b4:	6839      	ldr	r1, [r7, #0]
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fa41 	bl	800653e <USBD_CtlError>
          err++;
 80060bc:	7afb      	ldrb	r3, [r7, #11]
 80060be:	3301      	adds	r3, #1
 80060c0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80060c2:	bf00      	nop
      }
      break;
 80060c4:	e037      	b.n	8006136 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	7c1b      	ldrb	r3, [r3, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d109      	bne.n	80060e2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060d6:	f107 0208 	add.w	r2, r7, #8
 80060da:	4610      	mov	r0, r2
 80060dc:	4798      	blx	r3
 80060de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80060e0:	e029      	b.n	8006136 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80060e2:	6839      	ldr	r1, [r7, #0]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fa2a 	bl	800653e <USBD_CtlError>
        err++;
 80060ea:	7afb      	ldrb	r3, [r7, #11]
 80060ec:	3301      	adds	r3, #1
 80060ee:	72fb      	strb	r3, [r7, #11]
      break;
 80060f0:	e021      	b.n	8006136 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	7c1b      	ldrb	r3, [r3, #16]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10d      	bne.n	8006116 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006102:	f107 0208 	add.w	r2, r7, #8
 8006106:	4610      	mov	r0, r2
 8006108:	4798      	blx	r3
 800610a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	3301      	adds	r3, #1
 8006110:	2207      	movs	r2, #7
 8006112:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006114:	e00f      	b.n	8006136 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006116:	6839      	ldr	r1, [r7, #0]
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fa10 	bl	800653e <USBD_CtlError>
        err++;
 800611e:	7afb      	ldrb	r3, [r7, #11]
 8006120:	3301      	adds	r3, #1
 8006122:	72fb      	strb	r3, [r7, #11]
      break;
 8006124:	e007      	b.n	8006136 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006126:	6839      	ldr	r1, [r7, #0]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fa08 	bl	800653e <USBD_CtlError>
      err++;
 800612e:	7afb      	ldrb	r3, [r7, #11]
 8006130:	3301      	adds	r3, #1
 8006132:	72fb      	strb	r3, [r7, #11]
      break;
 8006134:	bf00      	nop
  }

  if (err != 0U)
 8006136:	7afb      	ldrb	r3, [r7, #11]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d11e      	bne.n	800617a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	88db      	ldrh	r3, [r3, #6]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d016      	beq.n	8006172 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006144:	893b      	ldrh	r3, [r7, #8]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00e      	beq.n	8006168 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	88da      	ldrh	r2, [r3, #6]
 800614e:	893b      	ldrh	r3, [r7, #8]
 8006150:	4293      	cmp	r3, r2
 8006152:	bf28      	it	cs
 8006154:	4613      	movcs	r3, r2
 8006156:	b29b      	uxth	r3, r3
 8006158:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800615a:	893b      	ldrh	r3, [r7, #8]
 800615c:	461a      	mov	r2, r3
 800615e:	68f9      	ldr	r1, [r7, #12]
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fa69 	bl	8006638 <USBD_CtlSendData>
 8006166:	e009      	b.n	800617c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f9e7 	bl	800653e <USBD_CtlError>
 8006170:	e004      	b.n	800617c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 faba 	bl	80066ec <USBD_CtlSendStatus>
 8006178:	e000      	b.n	800617c <USBD_GetDescriptor+0x320>
    return;
 800617a:	bf00      	nop
  }
}
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop

08006184 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	889b      	ldrh	r3, [r3, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d131      	bne.n	80061fa <USBD_SetAddress+0x76>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	88db      	ldrh	r3, [r3, #6]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d12d      	bne.n	80061fa <USBD_SetAddress+0x76>
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	885b      	ldrh	r3, [r3, #2]
 80061a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80061a4:	d829      	bhi.n	80061fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	885b      	ldrh	r3, [r3, #2]
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d104      	bne.n	80061c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80061be:	6839      	ldr	r1, [r7, #0]
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f9bc 	bl	800653e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061c6:	e01d      	b.n	8006204 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	7bfa      	ldrb	r2, [r7, #15]
 80061cc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80061d0:	7bfb      	ldrb	r3, [r7, #15]
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fee5 	bl	8006fa4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fa86 	bl	80066ec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80061e0:	7bfb      	ldrb	r3, [r7, #15]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d004      	beq.n	80061f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2202      	movs	r2, #2
 80061ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ee:	e009      	b.n	8006204 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061f8:	e004      	b.n	8006204 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80061fa:	6839      	ldr	r1, [r7, #0]
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f99e 	bl	800653e <USBD_CtlError>
  }
}
 8006202:	bf00      	nop
 8006204:	bf00      	nop
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	885b      	ldrh	r3, [r3, #2]
 800621e:	b2da      	uxtb	r2, r3
 8006220:	4b4e      	ldr	r3, [pc, #312]	@ (800635c <USBD_SetConfig+0x150>)
 8006222:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006224:	4b4d      	ldr	r3, [pc, #308]	@ (800635c <USBD_SetConfig+0x150>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d905      	bls.n	8006238 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800622c:	6839      	ldr	r1, [r7, #0]
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f985 	bl	800653e <USBD_CtlError>
    return USBD_FAIL;
 8006234:	2303      	movs	r3, #3
 8006236:	e08c      	b.n	8006352 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b02      	cmp	r3, #2
 8006242:	d002      	beq.n	800624a <USBD_SetConfig+0x3e>
 8006244:	2b03      	cmp	r3, #3
 8006246:	d029      	beq.n	800629c <USBD_SetConfig+0x90>
 8006248:	e075      	b.n	8006336 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800624a:	4b44      	ldr	r3, [pc, #272]	@ (800635c <USBD_SetConfig+0x150>)
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d020      	beq.n	8006294 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006252:	4b42      	ldr	r3, [pc, #264]	@ (800635c <USBD_SetConfig+0x150>)
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	461a      	mov	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800625c:	4b3f      	ldr	r3, [pc, #252]	@ (800635c <USBD_SetConfig+0x150>)
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	4619      	mov	r1, r3
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7fe ffb9 	bl	80051da <USBD_SetClassConfig>
 8006268:	4603      	mov	r3, r0
 800626a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800626c:	7bfb      	ldrb	r3, [r7, #15]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d008      	beq.n	8006284 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006272:	6839      	ldr	r1, [r7, #0]
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f962 	bl	800653e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2202      	movs	r2, #2
 800627e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006282:	e065      	b.n	8006350 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fa31 	bl	80066ec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2203      	movs	r2, #3
 800628e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006292:	e05d      	b.n	8006350 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fa29 	bl	80066ec <USBD_CtlSendStatus>
      break;
 800629a:	e059      	b.n	8006350 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800629c:	4b2f      	ldr	r3, [pc, #188]	@ (800635c <USBD_SetConfig+0x150>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d112      	bne.n	80062ca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2202      	movs	r2, #2
 80062a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80062ac:	4b2b      	ldr	r3, [pc, #172]	@ (800635c <USBD_SetConfig+0x150>)
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	461a      	mov	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80062b6:	4b29      	ldr	r3, [pc, #164]	@ (800635c <USBD_SetConfig+0x150>)
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	4619      	mov	r1, r3
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7fe ffa8 	bl	8005212 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fa12 	bl	80066ec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80062c8:	e042      	b.n	8006350 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80062ca:	4b24      	ldr	r3, [pc, #144]	@ (800635c <USBD_SetConfig+0x150>)
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d02a      	beq.n	800632e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	4619      	mov	r1, r3
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7fe ff96 	bl	8005212 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80062e6:	4b1d      	ldr	r3, [pc, #116]	@ (800635c <USBD_SetConfig+0x150>)
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	461a      	mov	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80062f0:	4b1a      	ldr	r3, [pc, #104]	@ (800635c <USBD_SetConfig+0x150>)
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	4619      	mov	r1, r3
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7fe ff6f 	bl	80051da <USBD_SetClassConfig>
 80062fc:	4603      	mov	r3, r0
 80062fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006300:	7bfb      	ldrb	r3, [r7, #15]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00f      	beq.n	8006326 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f918 	bl	800653e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	b2db      	uxtb	r3, r3
 8006314:	4619      	mov	r1, r3
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7fe ff7b 	bl	8005212 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006324:	e014      	b.n	8006350 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f9e0 	bl	80066ec <USBD_CtlSendStatus>
      break;
 800632c:	e010      	b.n	8006350 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f9dc 	bl	80066ec <USBD_CtlSendStatus>
      break;
 8006334:	e00c      	b.n	8006350 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006336:	6839      	ldr	r1, [r7, #0]
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f900 	bl	800653e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800633e:	4b07      	ldr	r3, [pc, #28]	@ (800635c <USBD_SetConfig+0x150>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	4619      	mov	r1, r3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f7fe ff64 	bl	8005212 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800634a:	2303      	movs	r3, #3
 800634c:	73fb      	strb	r3, [r7, #15]
      break;
 800634e:	bf00      	nop
  }

  return ret;
 8006350:	7bfb      	ldrb	r3, [r7, #15]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	24000120 	.word	0x24000120

08006360 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	88db      	ldrh	r3, [r3, #6]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d004      	beq.n	800637c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f8e2 	bl	800653e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800637a:	e023      	b.n	80063c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b02      	cmp	r3, #2
 8006386:	dc02      	bgt.n	800638e <USBD_GetConfig+0x2e>
 8006388:	2b00      	cmp	r3, #0
 800638a:	dc03      	bgt.n	8006394 <USBD_GetConfig+0x34>
 800638c:	e015      	b.n	80063ba <USBD_GetConfig+0x5a>
 800638e:	2b03      	cmp	r3, #3
 8006390:	d00b      	beq.n	80063aa <USBD_GetConfig+0x4a>
 8006392:	e012      	b.n	80063ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	3308      	adds	r3, #8
 800639e:	2201      	movs	r2, #1
 80063a0:	4619      	mov	r1, r3
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f948 	bl	8006638 <USBD_CtlSendData>
        break;
 80063a8:	e00c      	b.n	80063c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	3304      	adds	r3, #4
 80063ae:	2201      	movs	r2, #1
 80063b0:	4619      	mov	r1, r3
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f940 	bl	8006638 <USBD_CtlSendData>
        break;
 80063b8:	e004      	b.n	80063c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80063ba:	6839      	ldr	r1, [r7, #0]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f8be 	bl	800653e <USBD_CtlError>
        break;
 80063c2:	bf00      	nop
}
 80063c4:	bf00      	nop
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	3b01      	subs	r3, #1
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d81e      	bhi.n	8006422 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	88db      	ldrh	r3, [r3, #6]
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d004      	beq.n	80063f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80063ec:	6839      	ldr	r1, [r7, #0]
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f8a5 	bl	800653e <USBD_CtlError>
        break;
 80063f4:	e01a      	b.n	800642c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006402:	2b00      	cmp	r3, #0
 8006404:	d005      	beq.n	8006412 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	f043 0202 	orr.w	r2, r3, #2
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	330c      	adds	r3, #12
 8006416:	2202      	movs	r2, #2
 8006418:	4619      	mov	r1, r3
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 f90c 	bl	8006638 <USBD_CtlSendData>
      break;
 8006420:	e004      	b.n	800642c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006422:	6839      	ldr	r1, [r7, #0]
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f88a 	bl	800653e <USBD_CtlError>
      break;
 800642a:	bf00      	nop
  }
}
 800642c:	bf00      	nop
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	885b      	ldrh	r3, [r3, #2]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d107      	bne.n	8006456 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f94c 	bl	80066ec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006454:	e013      	b.n	800647e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	885b      	ldrh	r3, [r3, #2]
 800645a:	2b02      	cmp	r3, #2
 800645c:	d10b      	bne.n	8006476 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	889b      	ldrh	r3, [r3, #4]
 8006462:	0a1b      	lsrs	r3, r3, #8
 8006464:	b29b      	uxth	r3, r3
 8006466:	b2da      	uxtb	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f93c 	bl	80066ec <USBD_CtlSendStatus>
}
 8006474:	e003      	b.n	800647e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f860 	bl	800653e <USBD_CtlError>
}
 800647e:	bf00      	nop
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b082      	sub	sp, #8
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006496:	b2db      	uxtb	r3, r3
 8006498:	3b01      	subs	r3, #1
 800649a:	2b02      	cmp	r3, #2
 800649c:	d80b      	bhi.n	80064b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	885b      	ldrh	r3, [r3, #2]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d10c      	bne.n	80064c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f91c 	bl	80066ec <USBD_CtlSendStatus>
      }
      break;
 80064b4:	e004      	b.n	80064c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f840 	bl	800653e <USBD_CtlError>
      break;
 80064be:	e000      	b.n	80064c2 <USBD_ClrFeature+0x3c>
      break;
 80064c0:	bf00      	nop
  }
}
 80064c2:	bf00      	nop
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b084      	sub	sp, #16
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
 80064d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	781a      	ldrb	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	3301      	adds	r3, #1
 80064e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	781a      	ldrb	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	3301      	adds	r3, #1
 80064f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f7ff fa16 	bl	8005926 <SWAPBYTE>
 80064fa:	4603      	mov	r3, r0
 80064fc:	461a      	mov	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	3301      	adds	r3, #1
 8006506:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	3301      	adds	r3, #1
 800650c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f7ff fa09 	bl	8005926 <SWAPBYTE>
 8006514:	4603      	mov	r3, r0
 8006516:	461a      	mov	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	3301      	adds	r3, #1
 8006520:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3301      	adds	r3, #1
 8006526:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f7ff f9fc 	bl	8005926 <SWAPBYTE>
 800652e:	4603      	mov	r3, r0
 8006530:	461a      	mov	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	80da      	strh	r2, [r3, #6]
}
 8006536:	bf00      	nop
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b082      	sub	sp, #8
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006548:	2180      	movs	r1, #128	@ 0x80
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fcc0 	bl	8006ed0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006550:	2100      	movs	r1, #0
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fcbc 	bl	8006ed0 <USBD_LL_StallEP>
}
 8006558:	bf00      	nop
 800655a:	3708      	adds	r7, #8
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800656c:	2300      	movs	r3, #0
 800656e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d042      	beq.n	80065fc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800657a:	6938      	ldr	r0, [r7, #16]
 800657c:	f000 f842 	bl	8006604 <USBD_GetLen>
 8006580:	4603      	mov	r3, r0
 8006582:	3301      	adds	r3, #1
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800658a:	d808      	bhi.n	800659e <USBD_GetString+0x3e>
 800658c:	6938      	ldr	r0, [r7, #16]
 800658e:	f000 f839 	bl	8006604 <USBD_GetLen>
 8006592:	4603      	mov	r3, r0
 8006594:	3301      	adds	r3, #1
 8006596:	b29b      	uxth	r3, r3
 8006598:	005b      	lsls	r3, r3, #1
 800659a:	b29a      	uxth	r2, r3
 800659c:	e001      	b.n	80065a2 <USBD_GetString+0x42>
 800659e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80065a6:	7dfb      	ldrb	r3, [r7, #23]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	4413      	add	r3, r2
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	7812      	ldrb	r2, [r2, #0]
 80065b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80065b2:	7dfb      	ldrb	r3, [r7, #23]
 80065b4:	3301      	adds	r3, #1
 80065b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80065b8:	7dfb      	ldrb	r3, [r7, #23]
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	4413      	add	r3, r2
 80065be:	2203      	movs	r2, #3
 80065c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80065c2:	7dfb      	ldrb	r3, [r7, #23]
 80065c4:	3301      	adds	r3, #1
 80065c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80065c8:	e013      	b.n	80065f2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	4413      	add	r3, r2
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	7812      	ldrb	r2, [r2, #0]
 80065d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	3301      	adds	r3, #1
 80065da:	613b      	str	r3, [r7, #16]
    idx++;
 80065dc:	7dfb      	ldrb	r3, [r7, #23]
 80065de:	3301      	adds	r3, #1
 80065e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80065e2:	7dfb      	ldrb	r3, [r7, #23]
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	4413      	add	r3, r2
 80065e8:	2200      	movs	r2, #0
 80065ea:	701a      	strb	r2, [r3, #0]
    idx++;
 80065ec:	7dfb      	ldrb	r3, [r7, #23]
 80065ee:	3301      	adds	r3, #1
 80065f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1e7      	bne.n	80065ca <USBD_GetString+0x6a>
 80065fa:	e000      	b.n	80065fe <USBD_GetString+0x9e>
    return;
 80065fc:	bf00      	nop
  }
}
 80065fe:	3718      	adds	r7, #24
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006614:	e005      	b.n	8006622 <USBD_GetLen+0x1e>
  {
    len++;
 8006616:	7bfb      	ldrb	r3, [r7, #15]
 8006618:	3301      	adds	r3, #1
 800661a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	3301      	adds	r3, #1
 8006620:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1f5      	bne.n	8006616 <USBD_GetLen+0x12>
  }

  return len;
 800662a:	7bfb      	ldrb	r3, [r7, #15]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3714      	adds	r7, #20
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2202      	movs	r2, #2
 8006648:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	2100      	movs	r1, #0
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f000 fcbf 	bl	8006fe2 <USBD_LL_Transmit>

  return USBD_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b084      	sub	sp, #16
 8006672:	af00      	add	r7, sp, #0
 8006674:	60f8      	str	r0, [r7, #12]
 8006676:	60b9      	str	r1, [r7, #8]
 8006678:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	2100      	movs	r1, #0
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 fcae 	bl	8006fe2 <USBD_LL_Transmit>

  return USBD_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2203      	movs	r2, #3
 80066a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	2100      	movs	r1, #0
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 fcb2 	bl	8007024 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b084      	sub	sp, #16
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	60b9      	str	r1, [r7, #8]
 80066d4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	2100      	movs	r1, #0
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f000 fca1 	bl	8007024 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2204      	movs	r2, #4
 80066f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80066fc:	2300      	movs	r3, #0
 80066fe:	2200      	movs	r2, #0
 8006700:	2100      	movs	r1, #0
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fc6d 	bl	8006fe2 <USBD_LL_Transmit>

  return USBD_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b082      	sub	sp, #8
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2205      	movs	r2, #5
 800671e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006722:	2300      	movs	r3, #0
 8006724:	2200      	movs	r2, #0
 8006726:	2100      	movs	r1, #0
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 fc7b 	bl	8007024 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &CDC_Desc, DEVICE_HS) != USBD_OK)
 800673c:	2201      	movs	r2, #1
 800673e:	4912      	ldr	r1, [pc, #72]	@ (8006788 <MX_USB_DEVICE_Init+0x50>)
 8006740:	4812      	ldr	r0, [pc, #72]	@ (800678c <MX_USB_DEVICE_Init+0x54>)
 8006742:	f7fe fccd 	bl	80050e0 <USBD_Init>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d001      	beq.n	8006750 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800674c:	f7f9 fddd 	bl	800030a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8006750:	490f      	ldr	r1, [pc, #60]	@ (8006790 <MX_USB_DEVICE_Init+0x58>)
 8006752:	480e      	ldr	r0, [pc, #56]	@ (800678c <MX_USB_DEVICE_Init+0x54>)
 8006754:	f7fe fcf4 	bl	8005140 <USBD_RegisterClass>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800675e:	f7f9 fdd4 	bl	800030a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8006762:	490c      	ldr	r1, [pc, #48]	@ (8006794 <MX_USB_DEVICE_Init+0x5c>)
 8006764:	4809      	ldr	r0, [pc, #36]	@ (800678c <MX_USB_DEVICE_Init+0x54>)
 8006766:	f7fe fc2b 	bl	8004fc0 <USBD_CDC_RegisterInterface>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006770:	f7f9 fdcb 	bl	800030a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8006774:	4805      	ldr	r0, [pc, #20]	@ (800678c <MX_USB_DEVICE_Init+0x54>)
 8006776:	f7fe fd19 	bl	80051ac <USBD_Start>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006780:	f7f9 fdc3 	bl	800030a <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006784:	bf00      	nop
 8006786:	bd80      	pop	{r7, pc}
 8006788:	240000ac 	.word	0x240000ac
 800678c:	24000124 	.word	0x24000124
 8006790:	24000018 	.word	0x24000018
 8006794:	24000098 	.word	0x24000098

08006798 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800679c:	2200      	movs	r2, #0
 800679e:	4905      	ldr	r1, [pc, #20]	@ (80067b4 <CDC_Init_HS+0x1c>)
 80067a0:	4805      	ldr	r0, [pc, #20]	@ (80067b8 <CDC_Init_HS+0x20>)
 80067a2:	f7fe fc27 	bl	8004ff4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80067a6:	4905      	ldr	r1, [pc, #20]	@ (80067bc <CDC_Init_HS+0x24>)
 80067a8:	4803      	ldr	r0, [pc, #12]	@ (80067b8 <CDC_Init_HS+0x20>)
 80067aa:	f7fe fc45 	bl	8005038 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80067ae:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	24000c00 	.word	0x24000c00
 80067b8:	24000124 	.word	0x24000124
 80067bc:	24000400 	.word	0x24000400

080067c0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80067c0:	b480      	push	{r7}
 80067c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80067c4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	4603      	mov	r3, r0
 80067d8:	6039      	str	r1, [r7, #0]
 80067da:	71fb      	strb	r3, [r7, #7]
 80067dc:	4613      	mov	r3, r2
 80067de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80067e0:	79fb      	ldrb	r3, [r7, #7]
 80067e2:	2b23      	cmp	r3, #35	@ 0x23
 80067e4:	d84a      	bhi.n	800687c <CDC_Control_HS+0xac>
 80067e6:	a201      	add	r2, pc, #4	@ (adr r2, 80067ec <CDC_Control_HS+0x1c>)
 80067e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ec:	0800687d 	.word	0x0800687d
 80067f0:	0800687d 	.word	0x0800687d
 80067f4:	0800687d 	.word	0x0800687d
 80067f8:	0800687d 	.word	0x0800687d
 80067fc:	0800687d 	.word	0x0800687d
 8006800:	0800687d 	.word	0x0800687d
 8006804:	0800687d 	.word	0x0800687d
 8006808:	0800687d 	.word	0x0800687d
 800680c:	0800687d 	.word	0x0800687d
 8006810:	0800687d 	.word	0x0800687d
 8006814:	0800687d 	.word	0x0800687d
 8006818:	0800687d 	.word	0x0800687d
 800681c:	0800687d 	.word	0x0800687d
 8006820:	0800687d 	.word	0x0800687d
 8006824:	0800687d 	.word	0x0800687d
 8006828:	0800687d 	.word	0x0800687d
 800682c:	0800687d 	.word	0x0800687d
 8006830:	0800687d 	.word	0x0800687d
 8006834:	0800687d 	.word	0x0800687d
 8006838:	0800687d 	.word	0x0800687d
 800683c:	0800687d 	.word	0x0800687d
 8006840:	0800687d 	.word	0x0800687d
 8006844:	0800687d 	.word	0x0800687d
 8006848:	0800687d 	.word	0x0800687d
 800684c:	0800687d 	.word	0x0800687d
 8006850:	0800687d 	.word	0x0800687d
 8006854:	0800687d 	.word	0x0800687d
 8006858:	0800687d 	.word	0x0800687d
 800685c:	0800687d 	.word	0x0800687d
 8006860:	0800687d 	.word	0x0800687d
 8006864:	0800687d 	.word	0x0800687d
 8006868:	0800687d 	.word	0x0800687d
 800686c:	0800687d 	.word	0x0800687d
 8006870:	0800687d 	.word	0x0800687d
 8006874:	0800687d 	.word	0x0800687d
 8006878:	0800687d 	.word	0x0800687d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800687c:	bf00      	nop
  }

  return (USBD_OK);
 800687e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8006880:	4618      	mov	r0, r3
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8006896:	6879      	ldr	r1, [r7, #4]
 8006898:	4805      	ldr	r0, [pc, #20]	@ (80068b0 <CDC_Receive_HS+0x24>)
 800689a:	f7fe fbcd 	bl	8005038 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800689e:	4804      	ldr	r0, [pc, #16]	@ (80068b0 <CDC_Receive_HS+0x24>)
 80068a0:	f7fe fbe8 	bl	8005074 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80068a4:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3708      	adds	r7, #8
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	24000124 	.word	0x24000124

080068b4 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	4613      	mov	r3, r2
 80068c0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80068c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	371c      	adds	r7, #28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
	...

080068d8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	4603      	mov	r3, r0
 80068e0:	6039      	str	r1, [r7, #0]
 80068e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	2212      	movs	r2, #18
 80068e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80068ea:	4b03      	ldr	r3, [pc, #12]	@ (80068f8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	240000cc 	.word	0x240000cc

080068fc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	4603      	mov	r3, r0
 8006904:	6039      	str	r1, [r7, #0]
 8006906:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	2204      	movs	r2, #4
 800690c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800690e:	4b03      	ldr	r3, [pc, #12]	@ (800691c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8006910:	4618      	mov	r0, r3
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr
 800691c:	240000e0 	.word	0x240000e0

08006920 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	4603      	mov	r3, r0
 8006928:	6039      	str	r1, [r7, #0]
 800692a:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	4904      	ldr	r1, [pc, #16]	@ (8006940 <USBD_CDC_ProductStrDescriptor+0x20>)
 8006930:	4804      	ldr	r0, [pc, #16]	@ (8006944 <USBD_CDC_ProductStrDescriptor+0x24>)
 8006932:	f7ff fe15 	bl	8006560 <USBD_GetString>
  return USBD_StrDesc;
 8006936:	4b02      	ldr	r3, [pc, #8]	@ (8006940 <USBD_CDC_ProductStrDescriptor+0x20>)
}
 8006938:	4618      	mov	r0, r3
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	24001400 	.word	0x24001400
 8006944:	0800718c 	.word	0x0800718c

08006948 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	4603      	mov	r3, r0
 8006950:	6039      	str	r1, [r7, #0]
 8006952:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	4904      	ldr	r1, [pc, #16]	@ (8006968 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8006958:	4804      	ldr	r0, [pc, #16]	@ (800696c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800695a:	f7ff fe01 	bl	8006560 <USBD_GetString>
  return USBD_StrDesc;
 800695e:	4b02      	ldr	r3, [pc, #8]	@ (8006968 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8006960:	4618      	mov	r0, r3
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	24001400 	.word	0x24001400
 800696c:	080071a4 	.word	0x080071a4

08006970 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	4603      	mov	r3, r0
 8006978:	6039      	str	r1, [r7, #0]
 800697a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	221a      	movs	r2, #26
 8006980:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006982:	f000 f82f 	bl	80069e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8006986:	4b02      	ldr	r3, [pc, #8]	@ (8006990 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8006988:	4618      	mov	r0, r3
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	240000e4 	.word	0x240000e4

08006994 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	4603      	mov	r3, r0
 800699c:	6039      	str	r1, [r7, #0]
 800699e:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	4904      	ldr	r1, [pc, #16]	@ (80069b4 <USBD_CDC_ConfigStrDescriptor+0x20>)
 80069a4:	4804      	ldr	r0, [pc, #16]	@ (80069b8 <USBD_CDC_ConfigStrDescriptor+0x24>)
 80069a6:	f7ff fddb 	bl	8006560 <USBD_GetString>
  return USBD_StrDesc;
 80069aa:	4b02      	ldr	r3, [pc, #8]	@ (80069b4 <USBD_CDC_ConfigStrDescriptor+0x20>)
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	24001400 	.word	0x24001400
 80069b8:	080071b8 	.word	0x080071b8

080069bc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	4603      	mov	r3, r0
 80069c4:	6039      	str	r1, [r7, #0]
 80069c6:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	4904      	ldr	r1, [pc, #16]	@ (80069dc <USBD_CDC_InterfaceStrDescriptor+0x20>)
 80069cc:	4804      	ldr	r0, [pc, #16]	@ (80069e0 <USBD_CDC_InterfaceStrDescriptor+0x24>)
 80069ce:	f7ff fdc7 	bl	8006560 <USBD_GetString>
  return USBD_StrDesc;
 80069d2:	4b02      	ldr	r3, [pc, #8]	@ (80069dc <USBD_CDC_InterfaceStrDescriptor+0x20>)
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3708      	adds	r7, #8
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	24001400 	.word	0x24001400
 80069e0:	080071c4 	.word	0x080071c4

080069e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80069ea:	4b0f      	ldr	r3, [pc, #60]	@ (8006a28 <Get_SerialNum+0x44>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80069f0:	4b0e      	ldr	r3, [pc, #56]	@ (8006a2c <Get_SerialNum+0x48>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80069f6:	4b0e      	ldr	r3, [pc, #56]	@ (8006a30 <Get_SerialNum+0x4c>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4413      	add	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d009      	beq.n	8006a1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006a0a:	2208      	movs	r2, #8
 8006a0c:	4909      	ldr	r1, [pc, #36]	@ (8006a34 <Get_SerialNum+0x50>)
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 f814 	bl	8006a3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006a14:	2204      	movs	r2, #4
 8006a16:	4908      	ldr	r1, [pc, #32]	@ (8006a38 <Get_SerialNum+0x54>)
 8006a18:	68b8      	ldr	r0, [r7, #8]
 8006a1a:	f000 f80f 	bl	8006a3c <IntToUnicode>
  }
}
 8006a1e:	bf00      	nop
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	08fff800 	.word	0x08fff800
 8006a2c:	08fff804 	.word	0x08fff804
 8006a30:	08fff808 	.word	0x08fff808
 8006a34:	240000e6 	.word	0x240000e6
 8006a38:	240000f6 	.word	0x240000f6

08006a3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b087      	sub	sp, #28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	4613      	mov	r3, r2
 8006a48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006a4e:	2300      	movs	r3, #0
 8006a50:	75fb      	strb	r3, [r7, #23]
 8006a52:	e027      	b.n	8006aa4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	0f1b      	lsrs	r3, r3, #28
 8006a58:	2b09      	cmp	r3, #9
 8006a5a:	d80b      	bhi.n	8006a74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	0f1b      	lsrs	r3, r3, #28
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	7dfb      	ldrb	r3, [r7, #23]
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	4619      	mov	r1, r3
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	440b      	add	r3, r1
 8006a6c:	3230      	adds	r2, #48	@ 0x30
 8006a6e:	b2d2      	uxtb	r2, r2
 8006a70:	701a      	strb	r2, [r3, #0]
 8006a72:	e00a      	b.n	8006a8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	0f1b      	lsrs	r3, r3, #28
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	7dfb      	ldrb	r3, [r7, #23]
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	4619      	mov	r1, r3
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	440b      	add	r3, r1
 8006a84:	3237      	adds	r2, #55	@ 0x37
 8006a86:	b2d2      	uxtb	r2, r2
 8006a88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	011b      	lsls	r3, r3, #4
 8006a8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006a90:	7dfb      	ldrb	r3, [r7, #23]
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	3301      	adds	r3, #1
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	4413      	add	r3, r2
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006a9e:	7dfb      	ldrb	r3, [r7, #23]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	75fb      	strb	r3, [r7, #23]
 8006aa4:	7dfa      	ldrb	r2, [r7, #23]
 8006aa6:	79fb      	ldrb	r3, [r7, #7]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d3d3      	bcc.n	8006a54 <IntToUnicode+0x18>
  }
}
 8006aac:	bf00      	nop
 8006aae:	bf00      	nop
 8006ab0:	371c      	adds	r7, #28
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
	...

08006abc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b0a6      	sub	sp, #152	@ 0x98
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006ac4:	f107 0314 	add.w	r3, r7, #20
 8006ac8:	2284      	movs	r2, #132	@ 0x84
 8006aca:	2100      	movs	r1, #0
 8006acc:	4618      	mov	r0, r3
 8006ace:	f000 fb21 	bl	8007114 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8006b50 <HAL_PCD_MspInit+0x94>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d134      	bne.n	8006b46 <HAL_PCD_MspInit+0x8a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHYC;
 8006adc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006ae0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbPhycClockSelection = RCC_USBPHYCCLKSOURCE_PLL3Q;
 8006ae2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006ae6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006aea:	f107 0314 	add.w	r3, r7, #20
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fb fbee 	bl	80022d0 <HAL_RCCEx_PeriphCLKConfig>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <HAL_PCD_MspInit+0x42>
    {
      Error_Handler();
 8006afa:	f7f9 fc06 	bl	800030a <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8006afe:	f7fb fa35 	bl	8001f6c <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8006b02:	4b14      	ldr	r3, [pc, #80]	@ (8006b54 <HAL_PCD_MspInit+0x98>)
 8006b04:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8006b08:	4a12      	ldr	r2, [pc, #72]	@ (8006b54 <HAL_PCD_MspInit+0x98>)
 8006b0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006b0e:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8006b12:	4b10      	ldr	r3, [pc, #64]	@ (8006b54 <HAL_PCD_MspInit+0x98>)
 8006b14:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8006b18:	613b      	str	r3, [r7, #16]
 8006b1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 8006b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8006b54 <HAL_PCD_MspInit+0x98>)
 8006b1e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8006b22:	4a0c      	ldr	r2, [pc, #48]	@ (8006b54 <HAL_PCD_MspInit+0x98>)
 8006b24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006b28:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8006b2c:	4b09      	ldr	r3, [pc, #36]	@ (8006b54 <HAL_PCD_MspInit+0x98>)
 8006b2e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8006b32:	60fb      	str	r3, [r7, #12]
 8006b34:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8006b36:	2200      	movs	r2, #0
 8006b38:	2100      	movs	r1, #0
 8006b3a:	205b      	movs	r0, #91	@ 0x5b
 8006b3c:	f7f9 ff37 	bl	80009ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8006b40:	205b      	movs	r0, #91	@ 0x5b
 8006b42:	f7f9 ff4e 	bl	80009e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8006b46:	bf00      	nop
 8006b48:	3798      	adds	r7, #152	@ 0x98
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	40040000 	.word	0x40040000
 8006b54:	58024400 	.word	0x58024400

08006b58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4610      	mov	r0, r2
 8006b70:	f7fe fb69 	bl	8005246 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SetupStageCallback_PostTreatment */

}
 8006b74:	bf00      	nop
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	460b      	mov	r3, r1
 8006b86:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006b8e:	78fa      	ldrb	r2, [r7, #3]
 8006b90:	6879      	ldr	r1, [r7, #4]
 8006b92:	4613      	mov	r3, r2
 8006b94:	00db      	lsls	r3, r3, #3
 8006b96:	4413      	add	r3, r2
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	440b      	add	r3, r1
 8006b9c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	78fb      	ldrb	r3, [r7, #3]
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	f7fe fba3 	bl	80052f0 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8006baa:	bf00      	nop
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b082      	sub	sp, #8
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
 8006bba:	460b      	mov	r3, r1
 8006bbc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006bc4:	78fa      	ldrb	r2, [r7, #3]
 8006bc6:	6879      	ldr	r1, [r7, #4]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	00db      	lsls	r3, r3, #3
 8006bcc:	4413      	add	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	440b      	add	r3, r1
 8006bd2:	3320      	adds	r3, #32
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	78fb      	ldrb	r3, [r7, #3]
 8006bd8:	4619      	mov	r1, r3
 8006bda:	f7fe fc3c 	bl	8005456 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8006bde:	bf00      	nop
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b082      	sub	sp, #8
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SofCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SofCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7fe fd76 	bl	80056e6 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SofCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SofCallback_PostTreatment */
}
 8006bfa:	bf00      	nop
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b084      	sub	sp, #16
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_HIGH)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	79db      	ldrb	r3, [r3, #7]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d102      	bne.n	8006c1c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006c16:	2300      	movs	r3, #0
 8006c18:	73fb      	strb	r3, [r7, #15]
 8006c1a:	e008      	b.n	8006c2e <HAL_PCD_ResetCallback+0x2c>
  }
  else if (hpcd->Init.speed == PCD_SPEED_FULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	79db      	ldrb	r3, [r3, #7]
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d102      	bne.n	8006c2a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006c24:	2301      	movs	r3, #1
 8006c26:	73fb      	strb	r3, [r7, #15]
 8006c28:	e001      	b.n	8006c2e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006c2a:	f7f9 fb6e 	bl	800030a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006c34:	7bfa      	ldrb	r2, [r7, #15]
 8006c36:	4611      	mov	r1, r2
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fe fd10 	bl	800565e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fe fcb8 	bl	80055ba <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8006c4a:	bf00      	nop
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
	...

08006c54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */

  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fe fd0b 	bl	800567e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	6812      	ldr	r2, [r2, #0]
 8006c76:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006c7a:	f043 0301 	orr.w	r3, r3, #1
 8006c7e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	7adb      	ldrb	r3, [r3, #11]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d007      	beq.n	8006c98 <HAL_PCD_SuspendCallback+0x44>
  {
	HAL_SuspendTick();
 8006c88:	f7f9 fd96 	bl	80007b8 <HAL_SuspendTick>
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006c8c:	4b04      	ldr	r3, [pc, #16]	@ (8006ca0 <HAL_PCD_SuspendCallback+0x4c>)
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	4a03      	ldr	r2, [pc, #12]	@ (8006ca0 <HAL_PCD_SuspendCallback+0x4c>)
 8006c92:	f043 0306 	orr.w	r3, r3, #6
 8006c96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8006c98:	bf00      	nop
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	e000ed00 	.word	0xe000ed00

08006ca4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	7adb      	ldrb	r3, [r3, #11]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d007      	beq.n	8006cc4 <HAL_PCD_ResumeCallback+0x20>
  {
    HAL_ResumeTick();
 8006cb4:	f7f9 fd90 	bl	80007d8 <HAL_ResumeTick>
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8006cf0 <HAL_PCD_ResumeCallback+0x4c>)
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	4a0c      	ldr	r2, [pc, #48]	@ (8006cf0 <HAL_PCD_ResumeCallback+0x4c>)
 8006cbe:	f023 0306 	bic.w	r3, r3, #6
 8006cc2:	6113      	str	r3, [r2, #16]

  }
  /* USER CODE END 3 */
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	6812      	ldr	r2, [r2, #0]
 8006cd2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006cd6:	f023 0301 	bic.w	r3, r3, #1
 8006cda:	6013      	str	r3, [r2, #0]
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fe fce7 	bl	80056b6 <USBD_LL_Resume>

  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8006ce8:	bf00      	nop
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	e000ed00 	.word	0xe000ed00

08006cf4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006d06:	78fa      	ldrb	r2, [r7, #3]
 8006d08:	4611      	mov	r1, r2
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fe fd3d 	bl	800578a <USBD_LL_IsoOUTIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */

}
 8006d10:	bf00      	nop
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	460b      	mov	r3, r1
 8006d22:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PreTreatment */
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006d2a:	78fa      	ldrb	r2, [r7, #3]
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fe fcf9 	bl	8005726 <USBD_LL_IsoINIncomplete>

  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PostTreatment */
}
 8006d34:	bf00      	nop
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PreTreatment */
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fe fd4f 	bl	80057ee <USBD_LL_DevConnected>
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PostTreatment */
}
 8006d50:	bf00      	nop
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PreTreatment */
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fe fd4c 	bl	8005804 <USBD_LL_DevDisconnected>
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PostTreatment */
}
 8006d6c:	bf00      	nop
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d13c      	bne.n	8006dfe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8006d84:	4a20      	ldr	r2, [pc, #128]	@ (8006e08 <USBD_LL_Init+0x94>)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8006e08 <USBD_LL_Init+0x94>)
 8006d90:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8006d94:	4b1c      	ldr	r3, [pc, #112]	@ (8006e08 <USBD_LL_Init+0x94>)
 8006d96:	4a1d      	ldr	r2, [pc, #116]	@ (8006e0c <USBD_LL_Init+0x98>)
 8006d98:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8006d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8006e08 <USBD_LL_Init+0x94>)
 8006d9c:	2209      	movs	r2, #9
 8006d9e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8006da0:	4b19      	ldr	r3, [pc, #100]	@ (8006e08 <USBD_LL_Init+0x94>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 8006da6:	4b18      	ldr	r3, [pc, #96]	@ (8006e08 <USBD_LL_Init+0x94>)
 8006da8:	2203      	movs	r2, #3
 8006daa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8006dac:	4b16      	ldr	r3, [pc, #88]	@ (8006e08 <USBD_LL_Init+0x94>)
 8006dae:	2200      	movs	r2, #0
 8006db0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8006db2:	4b15      	ldr	r3, [pc, #84]	@ (8006e08 <USBD_LL_Init+0x94>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8006db8:	4b13      	ldr	r3, [pc, #76]	@ (8006e08 <USBD_LL_Init+0x94>)
 8006dba:	2200      	movs	r2, #0
 8006dbc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8006dbe:	4b12      	ldr	r3, [pc, #72]	@ (8006e08 <USBD_LL_Init+0x94>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8006dc4:	4b10      	ldr	r3, [pc, #64]	@ (8006e08 <USBD_LL_Init+0x94>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8006dca:	4b0f      	ldr	r3, [pc, #60]	@ (8006e08 <USBD_LL_Init+0x94>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8006dd0:	480d      	ldr	r0, [pc, #52]	@ (8006e08 <USBD_LL_Init+0x94>)
 8006dd2:	f7f9 fe21 	bl	8000a18 <HAL_PCD_Init>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <USBD_LL_Init+0x6c>
  {
    Error_Handler();
 8006ddc:	f7f9 fa95 	bl	800030a <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN USB_HS_FIFO_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8006de0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006de4:	4808      	ldr	r0, [pc, #32]	@ (8006e08 <USBD_LL_Init+0x94>)
 8006de6:	f7fb f880 	bl	8001eea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x40);
 8006dea:	2240      	movs	r2, #64	@ 0x40
 8006dec:	2100      	movs	r1, #0
 8006dee:	4806      	ldr	r0, [pc, #24]	@ (8006e08 <USBD_LL_Init+0x94>)
 8006df0:	f7fb f834 	bl	8001e5c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x80);
 8006df4:	2280      	movs	r2, #128	@ 0x80
 8006df6:	2101      	movs	r1, #1
 8006df8:	4803      	ldr	r0, [pc, #12]	@ (8006e08 <USBD_LL_Init+0x94>)
 8006dfa:	f7fb f82f 	bl	8001e5c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END USB_HS_FIFO_Configuration */
  }
  return USBD_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	24001600 	.word	0x24001600
 8006e0c:	40040000 	.word	0x40040000

08006e10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7f9 ff0e 	bl	8000c48 <HAL_PCD_Start>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 f942 	bl	80070bc <USBD_Get_USB_Status>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b084      	sub	sp, #16
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
 8006e4e:	4608      	mov	r0, r1
 8006e50:	4611      	mov	r1, r2
 8006e52:	461a      	mov	r2, r3
 8006e54:	4603      	mov	r3, r0
 8006e56:	70fb      	strb	r3, [r7, #3]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	70bb      	strb	r3, [r7, #2]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e64:	2300      	movs	r3, #0
 8006e66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006e6e:	78bb      	ldrb	r3, [r7, #2]
 8006e70:	883a      	ldrh	r2, [r7, #0]
 8006e72:	78f9      	ldrb	r1, [r7, #3]
 8006e74:	f7fa fc0f 	bl	8001696 <HAL_PCD_EP_Open>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 f91c 	bl	80070bc <USBD_Get_USB_Status>
 8006e84:	4603      	mov	r3, r0
 8006e86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e88:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006eac:	78fa      	ldrb	r2, [r7, #3]
 8006eae:	4611      	mov	r1, r2
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7fa fc58 	bl	8001766 <HAL_PCD_EP_Close>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f000 f8fd 	bl	80070bc <USBD_Get_USB_Status>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ec6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	460b      	mov	r3, r1
 8006eda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006eea:	78fa      	ldrb	r2, [r7, #3]
 8006eec:	4611      	mov	r1, r2
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fa fd10 	bl	8001914 <HAL_PCD_EP_SetStall>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 f8de 	bl	80070bc <USBD_Get_USB_Status>
 8006f00:	4603      	mov	r3, r0
 8006f02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f04:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b084      	sub	sp, #16
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	460b      	mov	r3, r1
 8006f18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006f28:	78fa      	ldrb	r2, [r7, #3]
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fa fd54 	bl	80019da <HAL_PCD_EP_ClrStall>
 8006f32:	4603      	mov	r3, r0
 8006f34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f000 f8bf 	bl	80070bc <USBD_Get_USB_Status>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f42:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	460b      	mov	r3, r1
 8006f56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006f5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006f60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	da0b      	bge.n	8006f80 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006f68:	78fb      	ldrb	r3, [r7, #3]
 8006f6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f6e:	68f9      	ldr	r1, [r7, #12]
 8006f70:	4613      	mov	r3, r2
 8006f72:	00db      	lsls	r3, r3, #3
 8006f74:	4413      	add	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	440b      	add	r3, r1
 8006f7a:	3316      	adds	r3, #22
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	e00b      	b.n	8006f98 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006f80:	78fb      	ldrb	r3, [r7, #3]
 8006f82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f86:	68f9      	ldr	r1, [r7, #12]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	4413      	add	r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	440b      	add	r3, r1
 8006f92:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8006f96:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006fbe:	78fa      	ldrb	r2, [r7, #3]
 8006fc0:	4611      	mov	r1, r2
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fa fb43 	bl	800164e <HAL_PCD_SetAddress>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 f874 	bl	80070bc <USBD_Get_USB_Status>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b086      	sub	sp, #24
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	607a      	str	r2, [r7, #4]
 8006fec:	603b      	str	r3, [r7, #0]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007000:	7af9      	ldrb	r1, [r7, #11]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	f7fa fc4b 	bl	80018a0 <HAL_PCD_EP_Transmit>
 800700a:	4603      	mov	r3, r0
 800700c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800700e:	7dfb      	ldrb	r3, [r7, #23]
 8007010:	4618      	mov	r0, r3
 8007012:	f000 f853 	bl	80070bc <USBD_Get_USB_Status>
 8007016:	4603      	mov	r3, r0
 8007018:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800701a:	7dbb      	ldrb	r3, [r7, #22]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3718      	adds	r7, #24
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	607a      	str	r2, [r7, #4]
 800702e:	603b      	str	r3, [r7, #0]
 8007030:	460b      	mov	r3, r1
 8007032:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007034:	2300      	movs	r3, #0
 8007036:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007038:	2300      	movs	r3, #0
 800703a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007042:	7af9      	ldrb	r1, [r7, #11]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	f7fa fbd7 	bl	80017fa <HAL_PCD_EP_Receive>
 800704c:	4603      	mov	r3, r0
 800704e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007050:	7dfb      	ldrb	r3, [r7, #23]
 8007052:	4618      	mov	r0, r3
 8007054:	f000 f832 	bl	80070bc <USBD_Get_USB_Status>
 8007058:	4603      	mov	r3, r0
 800705a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800705c:	7dbb      	ldrb	r3, [r7, #22]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b082      	sub	sp, #8
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
 800706e:	460b      	mov	r3, r1
 8007070:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007078:	78fa      	ldrb	r2, [r7, #3]
 800707a:	4611      	mov	r1, r2
 800707c:	4618      	mov	r0, r3
 800707e:	f7fa fbf7 	bl	8001870 <HAL_PCD_EP_GetRxCount>
 8007082:	4603      	mov	r3, r0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007094:	4b03      	ldr	r3, [pc, #12]	@ (80070a4 <USBD_static_malloc+0x18>)
}
 8007096:	4618      	mov	r0, r3
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	24001ae4 	.word	0x24001ae4

080070a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	4603      	mov	r3, r0
 80070c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80070ca:	79fb      	ldrb	r3, [r7, #7]
 80070cc:	2b03      	cmp	r3, #3
 80070ce:	d817      	bhi.n	8007100 <USBD_Get_USB_Status+0x44>
 80070d0:	a201      	add	r2, pc, #4	@ (adr r2, 80070d8 <USBD_Get_USB_Status+0x1c>)
 80070d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d6:	bf00      	nop
 80070d8:	080070e9 	.word	0x080070e9
 80070dc:	080070ef 	.word	0x080070ef
 80070e0:	080070f5 	.word	0x080070f5
 80070e4:	080070fb 	.word	0x080070fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80070e8:	2300      	movs	r3, #0
 80070ea:	73fb      	strb	r3, [r7, #15]
    break;
 80070ec:	e00b      	b.n	8007106 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80070ee:	2303      	movs	r3, #3
 80070f0:	73fb      	strb	r3, [r7, #15]
    break;
 80070f2:	e008      	b.n	8007106 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80070f4:	2301      	movs	r3, #1
 80070f6:	73fb      	strb	r3, [r7, #15]
    break;
 80070f8:	e005      	b.n	8007106 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80070fa:	2303      	movs	r3, #3
 80070fc:	73fb      	strb	r3, [r7, #15]
    break;
 80070fe:	e002      	b.n	8007106 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007100:	2303      	movs	r3, #3
 8007102:	73fb      	strb	r3, [r7, #15]
    break;
 8007104:	bf00      	nop
  }
  return usb_status;
 8007106:	7bfb      	ldrb	r3, [r7, #15]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <memset>:
 8007114:	4402      	add	r2, r0
 8007116:	4603      	mov	r3, r0
 8007118:	4293      	cmp	r3, r2
 800711a:	d100      	bne.n	800711e <memset+0xa>
 800711c:	4770      	bx	lr
 800711e:	f803 1b01 	strb.w	r1, [r3], #1
 8007122:	e7f9      	b.n	8007118 <memset+0x4>

08007124 <__libc_init_array>:
 8007124:	b570      	push	{r4, r5, r6, lr}
 8007126:	4d0d      	ldr	r5, [pc, #52]	@ (800715c <__libc_init_array+0x38>)
 8007128:	4c0d      	ldr	r4, [pc, #52]	@ (8007160 <__libc_init_array+0x3c>)
 800712a:	1b64      	subs	r4, r4, r5
 800712c:	10a4      	asrs	r4, r4, #2
 800712e:	2600      	movs	r6, #0
 8007130:	42a6      	cmp	r6, r4
 8007132:	d109      	bne.n	8007148 <__libc_init_array+0x24>
 8007134:	4d0b      	ldr	r5, [pc, #44]	@ (8007164 <__libc_init_array+0x40>)
 8007136:	4c0c      	ldr	r4, [pc, #48]	@ (8007168 <__libc_init_array+0x44>)
 8007138:	f000 f818 	bl	800716c <_init>
 800713c:	1b64      	subs	r4, r4, r5
 800713e:	10a4      	asrs	r4, r4, #2
 8007140:	2600      	movs	r6, #0
 8007142:	42a6      	cmp	r6, r4
 8007144:	d105      	bne.n	8007152 <__libc_init_array+0x2e>
 8007146:	bd70      	pop	{r4, r5, r6, pc}
 8007148:	f855 3b04 	ldr.w	r3, [r5], #4
 800714c:	4798      	blx	r3
 800714e:	3601      	adds	r6, #1
 8007150:	e7ee      	b.n	8007130 <__libc_init_array+0xc>
 8007152:	f855 3b04 	ldr.w	r3, [r5], #4
 8007156:	4798      	blx	r3
 8007158:	3601      	adds	r6, #1
 800715a:	e7f2      	b.n	8007142 <__libc_init_array+0x1e>
 800715c:	080071d4 	.word	0x080071d4
 8007160:	080071d4 	.word	0x080071d4
 8007164:	080071d4 	.word	0x080071d4
 8007168:	080071d8 	.word	0x080071d8

0800716c <_init>:
 800716c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716e:	bf00      	nop
 8007170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007172:	bc08      	pop	{r3}
 8007174:	469e      	mov	lr, r3
 8007176:	4770      	bx	lr

08007178 <_fini>:
 8007178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717a:	bf00      	nop
 800717c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800717e:	bc08      	pop	{r3}
 8007180:	469e      	mov	lr, r3
 8007182:	4770      	bx	lr
